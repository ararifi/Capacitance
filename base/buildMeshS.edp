//-------------------------------------------------------
// LOAD & INCLUDES

// PACKAGE LOADING
load "msh3"
include	"getARGV.idp"
include "object.idp"

/* 
INCLUDE CONFIG FILE WITH FOLLOWING STUCTURE AS CSV:
objectType,theta,positionX,positionY,positionZ,objectParameter1,objectParameter2,objectParameter3,objectParameter4
*/
string configFile = getARGV("-c", "config.csv");

string meshSFile = getARGV("-o", "mesh.meshS");

icoSphereDir = getARGV("-i", "icosphere");

//-------------------------------------------------------
// SETTINGS

real boxSize = 90;

//-------------------------------------------------------
// SET BOX */
meshS ThS;
{
    /* ----- BOX ----- */

    /* number of elements */
    int[int] dimBoxNumElem = [1, 1, 1];

    /* box (size-)dimension */
    real [int,int] B = [[-boxSize/2., boxSize/2.], 
                        [-boxSize/2., boxSize/2.], 
                        [-boxSize/2., boxSize/2.]];

    /* labels */
    int [int,int] L = [[1, 2], [3, 4], [5, 6]];

    ThS = SurfaceHex(dimBoxNumElem, B, L, 1);
}

//-------------------------------------------------------
// SET OBJECTS */

// LOAD FILES FROM CONFIG
string[int] config = readConfig(configFile); 
assert(!checkIsEmpty(config));

int numObjects = config.n;
meshS[int] ThSObjects(numObjects);
for( int ind = 0; ind < numObjects; ind++ ){
    
    string line = config[ind];
    // ---------------------------------

    string type = getType(line);
    int theta = getTheta(line);
    real[int] position = getPosition(line);
    real[int] parameters = getParameter(line);
    // ---------------------------------

    meshS ThSObject = loadMeshS( type, parameters );

    shiftMeshS( ThSObject, position, ind );

    formMeshS( ThSObject, type, position, parameters );
    // ---------------------------------

    ThSObjects[ind] = ThSObject;

    if( (ind + 1) % int(ceil(numObjects/10)) == 0 ){
        cout << "Loaded " << ind + 1 << " of " << numObjects << " objects." << endl;
    }
}

// MERGE OBJECTS
int cnt = 0;
while(cnt < numObjects){
    meshS temp500;
    int cnt500 = numObjects - cnt > 500 ? 500 : numObjects - cnt;
    for( int ind = 0; ind < cnt500; ind++ ){
        temp500 = ThSObjects[cnt] + temp500;
        cnt++;
        if( (cnt + 1) % int(ceil(numObjects/10)) == 0 ){
            cout << "Stored " << cnt + 1 << " of " << numObjects << " objects." << endl;
        }
    }
    ThS = temp500 + ThS;
}





// SAVE MESH
savemesh( ThS, meshSFile );