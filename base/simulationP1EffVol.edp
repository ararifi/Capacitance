//-------------------------------------------------------
// TIMER
//-------------------------------------------------------
real[int] Elapsed(11); 
macro StartE(ind)Elapsed[ind] -= clock();//
macro StopE(ind)Elapsed[ind] += clock();//

/* runtime of
0: whole program
1: assembling (only stiffness matrix)
2: solving ICE
3: solving WATER
4: integrate C11
5: integrate C12
6: integrate C22
7: integrate sfc C11
8: integrate sfc C1n
9: integrate sfc C22
10: integrate sfc C12
*/

StartE(0)

//-------------------------------------------------------
// LOAD & INCLUDES
//-------------------------------------------------------

// --- FreeFEM ---
load "msh3"
load "tetgen2"
load "medit"
load "PETSc"
load "iovtk"
include "MeshSurface.idp"
macro dimension()3//
macro partitioner()parmetis//
include "macro_ddm2.idp"

// --- USER DEFINED ---
include "configRun.edp"
include "pkgMesh/mesh_surface.idp"
include "bMacro.idp"
include "macro.idp"

// ----- FINITE ELEMENT SPACE -----
func Pk = P1;

// ----- QUADRATURE FORMULAR -----
macro QFV()qfV5//
macro DQFV()qfV2//
macro QFT()qf2pT//
// -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
// (0) MESH + TIME
//
// init mesh
// -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-

// read mesh
mesh3 ThNo, Th = readmesh3(meshPath);
mpiBarrier(Comm);

fespace Ph(Th, P0);
Ph part;

// distribute overlapped mesh to the other processeors
buildDmesh(Th)
mpiBarrier(Comm);

createPartition(Th, part[], P0)
mpiBarrier(Comm);

int[int] n2o;
ThNo = trunc(Th, abs(part - 1.0) < 1e-1, new2old = n2o);

// evaluate goodness of sphere surfaces
cout << "INFO: eval goodness of the sphere surfaces" << endl;
real[int] LocalNormArea(numMeteor), NormArea(numMeteor); real localNormArea;
if(MPIRank == 0){cout << "INFO: eval goodness of the sphere surfaces" << endl;}
for(int ind = 0; ind < numMeteor; ind++){ getLocalNormArea(ind); LocalNormArea[ind] = localNormArea; }
mpiAllReduce(LocalNormArea, NormArea, Comm, mpiSUM);
cout << "INFO: NormArea finished" << endl;
// -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
// (1) INIT
//
// init the fespace for the field and the matrix for the
// capacity coefficients
// -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-

// ----- WITH_MODCAP -----

macro ISEXT()true//

// ----- FESPACE -----

fespace Vh(Th, Pk);
int dofVh = Vh.ndof;

// ----- FIELD -----

Vh Psi1, Psi2, Psi01, Psi02;

// allocate boundary field
Vh wh1, wh2; real[int] l1(dofVh), l2(dofVh), l1Bnd(dofVh), l2Bnd(dofVh);
// allocate stiffness matrix
Mat A(dofVh); 

// ----- INIT -----

int numElem = 0;
for(int i = 0; i < numMeteor; i++){numElem += (i + 1);}
real[int] LocalCap(2*numMeteor - 1), Cap(2*numMeteor - 1); 
real localEffCapSfc12, effCapSfc12;
real[int] EffCap(3), EffCapSfc(3);

// -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
// (2) ASSEMBLING
//  
//  assemble a dirchlet data free stiffness matrix, see
//  https://community.freefem.org/t/exact-dirichlet-bc/52/3
// -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-

StartE(1)
{
    varf a(u, v) = H1(u, v) + deltaUZero(u);

    if( mpirank == 0 ){ recordState }
    mpiBarrier(Comm);
    createMat(Th, A, Pk)
    if( mpirank == 0 ){ recordState }
    mpiBarrier(Comm);

    if(MPIRank==0){cout << "INFO: fill stiffness matrix "<< endl;} 
    A = a(Vh, Vh, tgv = -2);

    set(A, sparams = "-pc_type gamg -ksp_type cg -ksp_cg_type symmetric -ksp_rtol "+ string(solverEps));
    //set(A, sparams = "-pc_type hpddm -ksp_type gmres -ksp_rtol "+ string(solverEps));
}
StopE(1)

// -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
// (3) EVAL EFFECTIVE CAPACITY COEFFICIENT
//
// -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-


// C11
{    
    // set none zero dirchlet condition
    varf bndDirichlet(unused, v) = deltaUZero(unused) + on(0 + 7, unused = 1); 
    
    wh1[] = bndDirichlet(0, Vh, tgv = -1); 
    
    varf rhs(unused, v) = -H1(wh1, v)  + deltaUZero(unused); varf l1BndVarf(unused, v) = H1(wh1, v);

    l1 = rhs(0, Vh, tgv = -1); l1Bnd = l1BndVarf(0, Vh, tgv = -1);

    // solve the problem

    if(MPIRank == 0){cout << "INFO: solve problem for ice" << endl;}
    
    StartE(2)
    Psi01[] = A^-1 * l1;
    StopE(2)

    // add boundary values to solution
    Psi1[] = Psi01[] + wh1[];

    // EVAL SURFACE CAP
    if(ISEXT){
    //##########################################
    {// C11
        StartE(7)
        if(MPIRank == 0){cout << "INFO: eval by surface C11" << endl;}
        real localCap;
        getLocalCap2(Psi1, 0)
        LocalCap[ 0 ] = localCap; // C11
        StopE(7)
    }
    //##########################################
    {// C1n
        StartE(8)
        if(MPIRank == 0){cout << "INFO: eval by surface C1n" << endl;}
        real localCap;
        for(int ind1 = 1; ind1 < numMeteor; ind1++){
            getLocalCap2(Psi1, ind1)
            LocalCap[ numMeteor + ind1 - 1 ] = localCap; // C1n
        }
        StopE(8)
    }
    //##########################################
    }
}

// C12 & Cnn
if(numMeteor > 1){

    // set none zero dirchlet condition
    varf bndDirichlet(unused, v) = deltaUZero(unused) + deltaUOneMeteor(unused) + on(0 + 7, unused = 0);

    wh2[] = bndDirichlet(0, Vh, tgv = -1);

    varf rhs(unused, v) = -H1(wh2, v) + deltaUZero(unused); varf l2BndVarf(unused, v) = H1(wh2, v);

    l2 = rhs(0, Vh, tgv = -1); l2Bnd = l2BndVarf(0, Vh, tgv = -1);

    // solve the problem

    if(MPIRank == 0){cout << "INFO: ssolve problem for water" << endl;}

    StartE(3)
    Psi02[] = A^-1 * l2; 
    StopE(3)

    // add boundary values to solution
    Psi2[] = Psi02[] + wh2[];

    // EVAL SURFACE CAP
    if(ISEXT){
    //##########################################
    {// Cnn
        StartE(9)
        if(MPIRank == 0){cout << "INFO: eval effective Cnn" << endl;}

        real localCap;

        for(int ind1 = 1; ind1 < numMeteor; ind1++){
            getLocalCap2(Psi2, ind1) 
            LocalCap[ ind1 ] = localCap; // Cnn
        }
        StopE(9)
    }
    //##########################################
    {// C12
        StartE(10)
        if(MPIRank == 0){cout << "INFO: eval effective C12" << endl;}

        real localCap; getLocalCap2(Psi2, 0)
        localEffCapSfc12 = localCap; // C12

        StopE(10)
    }
    //##########################################    
    }
}

// MERGE SURFACE CAP ########################################

mpiAllReduce(LocalCap, Cap, Comm, mpiSUM); 
mpiAllReduce(localEffCapSfc12, effCapSfc12, Comm, mpiSUM);

EffCapSfc[0] = Cap[0]; // C11
if(numMeteor > 1){
EffCapSfc[2] = Cap( 1 : (numMeteor-1) ).sum; // C22
EffCapSfc[1] = effCapSfc12; // C12
}

recordVar(effCapSfc, EffCapSfc)

// EVAL VOLUME CAP ##########################################

StartE(4)
real[int] APsi01 = A * Psi01[]; 
real Psi01Psi01 = A(Psi01[], APsi01);
real wh1l1Bnd = A(wh1[], l1Bnd); EffCap[0] = wh1l1Bnd - Psi01Psi01;
StopE(4)

if(numMeteor > 1){
StartE(5)
real[int] APsi02 = A * Psi02[];
real Psi02Psi02 = A(Psi02[], APsi02);
real wh2l2Bnd = A(wh2[], l2Bnd); EffCap[2] = wh2l2Bnd - Psi02Psi02;
StopE(5)

StartE(6)
real Psi01Psi02 = A(Psi01[], APsi02); 
real wh1l2Bnd = A(wh1[], l2Bnd); EffCap[1] = wh1l2Bnd - Psi01Psi02; 
StopE(6)
}

EffCap *= 1.0 / (4 * pi);

//###########################################################

// -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
// (4) RECORD
//
//  store the values needed for the later analysis
// -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-

StopE(0)

if(MPIRank==0){ record }
