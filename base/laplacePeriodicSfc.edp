//-------------------------------------------------------
// LOAD & INCLUDES

// PACKAGE LOADING
load "msh3"
include	"getARGV.idp"
include "object.idp"
macro ISPERIODIC()//
include "helpers.idp"

// --- FreeFEM ---
load "PETSc"
macro dimension()3//
macro partitioner()parmetis//
include "macro_ddm.idp"

string configFile = getARGV("-c", "config.csv");

string meshFile = getARGV("-m", "mesh.mesh");

string outputDir = getARGV("-o", "../output");

string outputName = getARGV("-n", "sim");

// ----- FINITE ELEMENT SPACE -----
//int[int] labPeriodic = [1, 2, 3, 4, 5, 6];	
macro Pk() P2, periodic=[[3,x,z],[4,x,z],[1,y,z],[2,y,z],[5,x,y],[6,x,y]]//
int[int] labPeriodic = [3, 4, 1, 2, 5, 6];
// ----- QUADRATURE FORMULAR -----
macro QFV()qfV5//
macro DQFV()qfV2//
macro QFT()qf2pT//

// ----- ACCURACY -----
real solverEps = 1e-6;


// -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
// INPUT
// meshPath: path to mesh
// cardTheta: number of conductor-groups
// outputDir: path to output directory
// currInd: index of current simulation used in ensemble simulations

// GLOBAL SETTINGS
// Pk: Type Finite element space
// QFV: Quadrature formula for volume integrals
// DQFV: Quadrature formula for volume integrals, lower order
// QFT: Quadrature formula for surface integrals

// GLOBAL VARIABLES
// Th: Mesh
// ThNo: Mesh without overlap
// part: Partition of mesh
// n2o: Map from new (PETSc) indexing to old one
// Vh: Finite element space
// uh: Finite element function, solution with 0 Dirichlet boundary conditions
// wh: Finite element function, on the boundary otherwise 0
// A: Stiffness matrix
// U: Vector of solutions uh; for each conductor-group theta; size: cardTheta 
// W: Vector of solutions wh; for each conductor-group theta; size: cardTheta
// L: Vector of stiffness matrix entries on boundary; for each conductor-group theta; size: cardTheta

string[int] config = readConfig( configFile );

int cardTheta = getCardTheta( config );

// -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
// (0) MESH 
// -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-

// read mesh
mesh3 Th = readmesh3(meshFile);

// distribute overlapped mesh to the other processeors
macro ThPeriodicity()labPeriodic//
int[int] n2o;
macro ThN2O()n2o//

fespace Ph(Th, P0); Ph part;

DmeshCreate(Th);

createPartition(Th, part[], P0)
int[int] n2o2;
mesh3 ThNo = trunc(Th, abs(part - 1.0) < 1e-1, new2old = n2o2);

// -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
// (1) DEFINING
// -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-

macro dofAll()Vh.ndof * cardTheta//// dof of FEM * number of conductor-groups

fespace Vh(Th, Pk);// Finite element space

Vh uh; real[int] U(dofAll);// Solution function and vector

Vh wh; real[int] W(dofAll), L(dofAll);// Boundary function and vectors

Mat A; real[int] l(Vh.ndof);// Stiffness matrix and rhs

// -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
// (2) SOLVING AND FILLING
// -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-

fillA // fill stiffness matrix
for( int theta = 0; theta < cardTheta; ++theta ){ 
    fillWLl(theta);  // fill boundary vectors
    // for [ i, elem : test ]{ if ( elem != 0.0 ){ INFO("BINGO"); break; } } // set boundary vector to 1 on boundary
    solveU(theta); // solve for U[theta]
}

// get unity vector in order to rescale on the boundary
real[int] unity(Vh.ndof); unity = 1;
fillunity


// -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
// (3) COMUTING CAPACITANCE
// -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-

ofstream streamLogCap( outputDir + "/cap_"+outputName+".log" ); 
streamLogCap.precision(16);
for( int theta1 = 0; theta1 < cardTheta; ++theta1 ){ 
    real[int] Cap( cardTheta - theta1 );
    for( int theta2 = theta1; theta2 < cardTheta; ++theta2 ){ 
        INFO( "Computing capacitance between " + theta1 + " and " + theta2 );
        // here evaluate the capacitance between theta1 and theta2
        // and write it to Cap[theta1]
        writeCap( theta1, theta2 );
    }
    if( mpirank == 0 ) writeOutArray( streamLogCap, Cap );
}

ofstream streamLogCapSfc( outputDir + "/capSfc_"+outputName+".log" );
streamLogCapSfc.precision(16);
for( int theta1 = 0; theta1 < cardTheta; ++theta1 ){ 
    real[int] Cap( cardTheta - theta1 );
    for( int theta2 = theta1; theta2 < cardTheta; ++theta2 ){ 
        INFO( "Computing capacitance by sfc between " + theta1 + " and " + theta2 );
        // here evaluate the capacitance between theta1 and theta2
        // and write it to Cap[theta1]
        writeCapSfc( theta1, theta2 );  
    }
    if( mpirank == 0 ) writeOutArray( streamLogCapSfc, Cap );
}
