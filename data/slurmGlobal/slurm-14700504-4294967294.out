Running simulation on cluster...
-- FreeFem++ v4.14 (Mon Dec 25 14:16:42 UTC 2023 - git v4.14)
   file : laplace.edp
 Load: lg_fem lg_mesh lg_mesh3 eigenvalue parallelempi 
    1 : //-------------------------------------------------------
    2 : // LOAD & INCLUDES
    3 : 
    4 : // PACKAGE LOADING
    5 : load "msh3"
    6 : include	"getARGV.idp" // for gestion of FreeFem++ argument and in version 3.10-1 FH
    2 :  // F. Hecht 
    3 :  // Usage:  getARGV(n,defaultvalue) // get the fist used default valeu
    4 :  //  or     getARGV(after,defaultvalue) // get the arg after after 
    5 :  // the type of delfaut value given the return type: int,double, string
    6 :  // Modif version 3.54-2  Jan 2018 (add ones include)
    7 :  IFMACRO(!getARGVidp)
    8 &  macro getARGVidp 1 //
    9 &  
   10 &  
   11 &  func int usedARGV(int n)
   12 & {
   13 &   int k=1,ii=1,kk=1,ret=-1;
   14 &   for(int i=1;i<ARGV.n;++i)
   15 &    {
   16 &    // cout <<i<< " "<< ARGV[i] << " " <<(ARGV[i]=="-v") << " " << kk << "==" 
   17 &    //      << n << " " << ARGV[i].rfind("dp") << " " <<ARGV[i].length-2  << endl;
   18 &         
   19 &        if(ARGV[i]=="-v") i++;
   20 &        else if(ARGV[i]=="-fglut") i++;
   21 &        else if(ARGV[i]=="-ffg") i++;
   22 &        else if(ARGV[i]=="-glut") i++;
   23 &        else if(ARGV[i]=="-f") i++;
   24 &        else if(ARGV[i]=="-nw") ii;
   25 &        else if(ARGV[i]=="-wait") ii;
   26 &        else if(ARGV[i]=="-ne") ii;
   27 &        else if(ARGV[i]=="-cd") ii;
   28 &        //else if(ARGV[i].rfind(".edp")==ARGV[i].length-4 ) ii;
   29 &        else if(i==1) ii;
   30 &        else if(kk++==n) {ret=i;}
   31 &       // else cout << " +++ \n";
   32 &      }
   33 &    //  cout << ret << endl;
   34 &     return ret;
   35 & }
   36 & 
   37 & func int usedARGV(string after)
   38 & {
   39 &   int ret=-1;
   40 &   for(int i=ARGV.n-1;i>=0;--i)        
   41 &        if(ARGV[i]==after) { ret=++i; break;}
   42 &   if(ARGV.n<ret) ret=-1;
   43 &   return ret;
   44 & }
   45 & 
   46 & func int getARGV(int n,int default)
   47 & {
   48 &    int d=default;
   49 &    int k=usedARGV(n);
   50 &    if(k>0) d=strtol(ARGV[k]);
   51 &     return d;
   52 & }
   53 & func real getARGV(int n,real default)
   54 & {
   55 &    real d=default;
   56 &    int k=usedARGV(n);
   57 &    if(k>0) d=strtod(ARGV[k]);
   58 &    return d;
   59 & }
   60 & func string getARGV(int n,string default)
   61 & {
   62 &    string d=default;
   63 &    int k=usedARGV(n);
   64 &    if(k>0) d=ARGV[k];
   65 &     return d;
   66 & }
   67 & 
   68 & func int getARGV(string after,int default)
   69 & {
   70 &    int d=default;
   71 &    int k=usedARGV(after);
   72 &    if(k>0) d=strtol(ARGV[k]);
   73 &     return d;
   74 & }
   75 & func real getARGV(string after,real default)
   76 & {
   77 &    real d=default;
   78 &    int k=usedARGV(after);
   79 &    if(k>0) d=strtod(ARGV[k]);
   80 &    return d;
   81 & }
   82 & func string getARGV(string after,string default)
   83 & {
   84 &    string d=default;
   85 &    int k=usedARGV(after);
   86 &    if(k>0) d=ARGV[k];
   87 &     return d;
   88 & }
   89 & 
   90 & /*
   91 & cout << getARGV(1,100) << endl;
   92 & cout << getARGV(2,200.) << endl;
   93 & cout << getARGV(3,"300.000") << endl;
   94 & cout << getARGV("-n"," xxx") << endl;
   95 & */
   96 & ENDIFMACRO
    8 @  macro getARGVidp 1 //
    9 @  
   10 @  
   11 @  func int usedARGV(int n)
   12 @ {
   13 @   int k=1,ii=1,kk=1,ret=-1;
   14 @   for(int i=1;i<ARGV.n;++i)
   15 @    {
   16 @    // cout <<i<< " "<< ARGV[i] << " " <<(ARGV[i]=="-v") << " " << kk << "==" 
   17 @    //      << n << " " << ARGV[i].rfind("dp") << " " <<ARGV[i].length-2  << endl;
   18 @         
   19 @        if(ARGV[i]=="-v") i++;
   20 @        else if(ARGV[i]=="-fglut") i++;
   21 @        else if(ARGV[i]=="-ffg") i++;
   22 @        else if(ARGV[i]=="-glut") i++;
   23 @        else if(ARGV[i]=="-f") i++;
   24 @        else if(ARGV[i]=="-nw") ii;
   25 @        else if(ARGV[i]=="-wait") ii;
   26 @        else if(ARGV[i]=="-ne") ii;
   27 @        else if(ARGV[i]=="-cd") ii;
   28 @        //else if(ARGV[i].rfind(".edp")==ARGV[i].length-4 ) ii;
   29 @        else if(i==1) ii;
   30 @        else if(kk++==n) {ret=i;}
   31 @       // else cout << " +++ \n";
   32 @      }
   33 @    //  cout << ret << endl;
   34 @     return ret;
   35 @ }
   36 @ 
   37 @ func int usedARGV(string after)
   38 @ {
   39 @   int ret=-1;
   40 @   for(int i=ARGV.n-1;i>=0;--i)        
   41 @        if(ARGV[i]==after) { ret=++i; break;}
   42 @   if(ARGV.n<ret) ret=-1;
   43 @   return ret;
   44 @ }
   45 @ 
   46 @ func int getARGV(int n,int default)
   47 @ {
   48 @    int d=default;
   49 @    int k=usedARGV(n);
   50 @    if(k>0) d=strtol(ARGV[k]);
   51 @     return d;
   52 @ }
   53 @ func real getARGV(int n,real default)
   54 @ {
   55 @    real d=default;
   56 @    int k=usedARGV(n);
   57 @    if(k>0) d=strtod(ARGV[k]);
   58 @    return d;
   59 @ }
   60 @ func string getARGV(int n,string default)
   61 @ {
   62 @    string d=default;
   63 @    int k=usedARGV(n);
   64 @    if(k>0) d=ARGV[k];
   65 @     return d;
   66 @ }
   67 @ 
   68 @ func int getARGV(string after,int default)
   69 @ {
   70 @    int d=default;
   71 @    int k=usedARGV(after);
   72 @    if(k>0) d=strtol(ARGV[k]);
   73 @     return d;
   74 @ }
   75 @ func real getARGV(string after,real default)
   76 @ {
   77 @    real d=default;
   78 @    int k=usedARGV(after);
   79 @    if(k>0) d=strtod(ARGV[k]);
   80 @    return d;
   81 @ }
   82 @ func string getARGV(string after,string default)
   83 @ {
   84 @    string d=default;
   85 @    int k=usedARGV(after);
   86 @    if(k>0) d=ARGV[k];
   87 @     return d;
   88 @ }
   89 @ 
   90 @ /*
   91 @ cout << getARGV(1,100) << endl;
   92 @ cout << getARGV(2,200.) << endl;
   93 @ cout << getARGV(3,"300.000") << endl;
   94 @ cout << getARGV("-n"," xxx") << endl;
   95 @ */
   96 @ 
    7 : include "object.idp"load "msh3" (already loaded: msh3)
    2 : include "MeshSurface.idp"load "msh3" (already loaded: msh3)
    2 : load "medit"
    3 : load "mmg" load: mmg 

    4 : // 2 basic functions to build surface mesh 
    5 : /*  Usage:
    6 :   meshS   SurfaceHex(N,B,L,orient);
    7 :   --   build the surface mesh of a 3d box 
    8 :   where: for example:
    9 :     int[int]  N=[nx,ny,nz]; //  the number of seg in the 3 direction
   10 :     real [int,int]  B=[[xmin,xmax],[ymin,ymax],[zmin,zmax]]; // bounding bax  
   11 :     int [int,int]  L=[[1,2],[3,4],[5,6]]; // the label of the 6 face left,right, front, back, down, right
   12 :     orient the global orientation of the surface 1 extern (-1 intern)
   13 : 
   14 : 
   15 :   func meshS Sphere(real R,real h,int L,int orient);
   16 :   -- build a surface mesh of a sphere with 1 mapping (spheriale coordinate) 
   17 :      where R is  the raduis, 
   18 :      h is the mesh size  of  the shpere
   19 :      L is the label the the sphere
   20 :      orient the global orientation of the surface 1 extern (-1 intern
   21 : 
   22 :   func  meshS Icosahedron (int orientation)
   23 :    -- build a Icosahedron meshS with given orientation.
   24 :       with a region number go from 1  to 20 corresponding to the 20 faces
   25 : 
   26 :   func meshS Sphere20(real R,int N,int orient);
   27 :   -- build a sphere  mesh form a Isocaedron with each traingle subdivide by N^2
   28 :       with a region number go from 1  to 20 corresponding to the 20 faces
   29 :      orient the global orientation of the surface 1 extern (-1 intern
   30 : 
   31 : */
   32 : func meshS SurfaceHex(int[int] & N,real[int,int] &B ,int[int,int] & L,int orientation)
 *** Warning  The identifier N hide a Global identifier  

   33 : {
   34 :     real x0=B(0,0),x1=B(0,1);
   35 :     real y0=B(1,0),
 *** Warning  The identifier y0 hide a Global identifier  
y1=B(1,1);
 *** Warning  The identifier y1 hide a Global identifier  

   36 :     real z0=B(2,0),z1=B(2,1);
   37 :     
   38 :     int nx=N[0],ny=N[1],nz=N[2];
   39 :     
   40 :     mesh Thx = square(ny,nz,[y0+(y1-y0)*x,z0+(z1-z0)*y]);
   41 :     mesh Thy = square(nx,nz,[x0+(x1-x0)*x,z0+(z1-z0)*y]);
   42 :     mesh Thz = square(nx,ny,[x0+(x1-x0)*x,y0+(y1-y0)*y]);
   43 :     
   44 :     int[int] refx=[0,L(0,0)],refX=[0,L(0,1)];   //  Xmin, Ymax faces labels renumbering 
   45 :     int[int] refy=[0,L(1,0)],refY=[0,L(1,1)];   //  Ymin, Ymax faces labesl renumbering 
   46 :     int[int] refz=[0,L(2,0)],refZ=[0,L(2,1)];   //  Zmin, Zmax faces labels renumbering 
   47 :     
   48 :     meshS Thx0 = movemesh23(Thx,transfo=[x0,x,y],orientation=-orientation,region=refx);
   49 :     meshS Thx1 = movemesh23(Thx,transfo=[x1,x,y],orientation=+orientation,region=refX);
   50 :     meshS Thy0 = movemesh23(Thy,transfo=[x,y0,y],orientation=+orientation,region=refy);
   51 :     meshS Thy1 = movemesh23(Thy,transfo=[x,y1,y],orientation=-orientation,region=refY);
   52 :     meshS Thz0 = movemesh23(Thz,transfo=[x,y,z0],orientation=-orientation,region=refz);
   53 :     meshS Thz1 = movemesh23(Thz,transfo=[x,y,z1],orientation=+orientation,region=refZ);
   54 :     meshS Th= Thx0+Thx1+Thy0+Thy1+Thz0+Thz1;
   55 :     return Th;
   56 : }
   57 : func meshS Ellipsoide (real RX,real RY,real RZ,real h,int L,real Ox,real Oy,real Oz,int orientation)
   58 : {
   59 :   mesh  Th=square(10,20,[x*pi-pi/2,2*y*pi]);  //  $]\frac{-pi}{2},frac{-pi}{2}[\times]0,2\pi[ $
   60 :   //  a parametrization of a sphere 
   61 :   func f1 =RX*cos(x)*cos(y)+Ox;
   62 :   func f2 =RY*cos(x)*sin(y)+Oy;
   63 :   func f3 =RZ*sin(x)+Oz;
   64 :   //    partiel derivative 
   65 :   func f1x= -RX*sin(x)*cos(y);   
   66 :   func f1y= -RX*cos(x)*sin(y);
   67 :   func f2x= -RY*sin(x)*sin(y);
   68 :   func f2y= +RY*cos(x)*cos(y);
   69 :   func f3x=-RZ*cos(x);
   70 :   func f3y=0;
   71 :   // the metric on the sphere  $  M = DF^t DF $
   72 :   func m11=f1x^2+f2x^2+f3x^2;
   73 :   func m21=f1x*f1y+f2x*f2y+f3x*f3y;
   74 :   func m22=f1y^2+f2y^2+f3y^2;
   75 :   
   76 :   func perio=[[4,y],[2,y],[1,x],[3,x]];  // to store the periodic condition 
   77 :   real hh=h;// hh  mesh size on unite sphere
   78 :   real vv= 1/square(hh);
   79 :   Th=adaptmesh(Th,m11*vv,m21*vv,m22*vv,IsMetric=1,periodic=perio);
   80 :   Th=adaptmesh(Th,m11*vv,m21*vv,m22*vv,IsMetric=1,periodic=perio);
   81 :   Th=adaptmesh(Th,m11*vv,m21*vv,m22*vv,IsMetric=1,periodic=perio);
   82 :   Th=adaptmesh(Th,m11*vv,m21*vv,m22*vv,IsMetric=1,periodic=perio);
   83 :   int[int] ref=[0,L];  
   84 :   meshS  ThS= movemesh23(Th,transfo=[f1,f2,f3],orientation=orientation,reftri=ref);
   85 :   ThS=mmgs(ThS,hmin=h,hmax=h,hgrad=2.);
   86 :   return ThS;
   87 : }
   88 :  
   89 : func meshS Ellipsoide (real RX,real RY,real RZ,real h,int L,int orientation)
   90 : { 
   91 :  return Ellipsoide (RX,RY,RZ,h,L,0.,0.,0.,orientation);
   92 : }
   93 : 
   94 : func meshS Sphere(real R,real h,int L,int orientation)
   95 : {
   96 : 
   97 :   return Ellipsoide(R,R,R,h,L,orientation);
   98 : }
   99 : 
  100 : func meshS Sphere(real R,real h,int L,real Ox,real Oy,real Oz,int orientation)
  101 : {
  102 : 
  103 :   return Ellipsoide(R,R,R,h,L,Ox,Oy,Oz,orientation);
  104 : }
  105 : 
  106 : func meshS Icosahedron (int orientation,int wplot)
  107 : {
  108 : 	
  109 : //===================================================================================
  110 : //Angles utiles
  111 : //===================================================================================
  112 : real tan3pi10 = sqrt(25.+10.*sqrt(5.))/5.;//3pi/10 angle entre deux aretes du pentagone
  113 : real sin3pi10 = (sqrt(5)+1)/4;//3pi/10 angle entre deux aretes du pentagone
  114 : real cos3pi10 = sqrt(10-2*sqrt(5))/4;//3pi/10 angle entre deux aretes du pentagone
  115 : 
  116 : real cosdiedre = sqrt(5)/3; //angle diedre de l'icosaedre -pi/2
  117 : real sindiedre = 2./3; //angle diedre de l'icosaedre -pi/2
  118 : 
  119 : real cosico = tan3pi10/sqrt(3); //angle entre une face de la pyramide pentagonale par rapport à l'horizontale
  120 : real sinico = sqrt(1-square(cosico)); //angle entre une face de la pyramide pentagonale par rapport à l'horizontale
  121 : 
  122 : real sin2pi5 = sqrt(10+2*sqrt(5))/4; //2pi/5 angle pour la rotation des aretes du pentagone
  123 : real cos2pi5 = (sqrt(5)-1)/4; //2pi/5 angle pour la rotation des aretes du pentagone
  124 : 
  125 : real cosicod = cosdiedre*cosico+sindiedre*sinico;//angle diedre -pi/2 - ico
  126 : real sinicod = sindiedre*cosico-cosdiedre*sinico;//angle diedre -pi/2 - ico
  127 : 
  128 : 
  129 : real sinpi3 = sqrt(3)/2; //angle du triangle equilateral
  130 : 
  131 : int n = 1;
  132 : 
  133 : real sinpi5 = cos3pi10;//pi/5 angle de décalage entre deux demi icosaedre
  134 : real cospi5 = sin3pi10;//pi/5 angle de décalage entre deux demi icosaedre
  135 : 
  136 : real tanpi10 = sqrt(25.-10.*sqrt(5.))/5.;//pi/10 
  137 : real h = 0.5*sqrt(3-square(tanpi10));//hauteur du prisme d'ordre 5;
  138 : 
  139 : //=================================================================================
  140 : //Construction du triangle equilateral en 2D
  141 : //=================================================================================
  142 : border a(t=0,1){x=t; y=0; label =1;};
  143 : border b(t=1,0.5){x=t; y=sqrt(3)*(1-t); label =2;};
  144 : border c(t=0.5,0){x=t; y=sqrt(3)*(t); label =3;};
  145 : mesh Triangle= buildmesh(a(n)+b(n)+c(n)); //traingle equilateral
  146 : if(wplot>2) plot (cmm="Triangle",Triangle,wait=1);
  147 : 
  148 : func f = 1;
  149 : 
  150 : 
  151 : meshS Triangle3 = movemesh23(Triangle,transfo=[x,0,y]);//trianglesup
  152 : if(wplot>2) plot (cmm="Triangle3",Triangle3,wait=1); 
  153 : 
  154 : meshS TriangleS = change(fregion=1,movemeshS(Triangle3,transfo=[x,sinico*y+cosico*z,-cosico*y+sinico*z]));//rotation de -(pi - diedre) par rapport à l'axe des x pour former une face de la pyramide pentagonale
  155 : if(wplot>2) plot (cmm="TriangleS",TriangleS,wait=1);
  156 : //medit("face pyramide pentagonale",TriangleS);
  157 : 
  158 : meshS TriangleI = change(fregion=2,movemeshS(TriangleS,transfo=[x,-cosdiedre*y+sindiedre*z,-sindiedre*y-cosdiedre*z],orientation=-1));//triangle inf rotation de l'angle diedre par rapport au triangle sup
  159 : if(wplot>2) plot (cmm="TriangleI",TriangleI,wait=1);
  160 : 
  161 : meshS Triangles = TriangleI+TriangleS;
  162 : 
  163 : if(wplot>1) plot (cmm="Triangles",Triangles,wait=1);
  164 : //medit("face pyramide pentagonale + face antiprisme d'ordre 5",Triangles);
  165 : 
  166 : meshS T1 = change(movemeshS(Triangles,transfo=[x-0.5,y-sinpi3*cosico,z],orientation=1),fregion = region);//translation pour que la figure soit sur le bord du pentagone
  167 : meshS T2 = change(movemeshS(T1,transfo=[cos2pi5*x-sin2pi5*y,sin2pi5*x+cos2pi5*y,z],orientation=1),fregion = region+2);;
  168 : meshS T3 = change(movemeshS(T2,transfo=[cos2pi5*x-sin2pi5*y,sin2pi5*x+cos2pi5*y,z]),fregion = region+2);;
  169 : meshS T4 = change(movemeshS(T3,transfo=[cos2pi5*x-sin2pi5*y,sin2pi5*x+cos2pi5*y,z]),fregion = region+2);;
  170 : meshS T5 = change(movemeshS(T4,transfo=[cos2pi5*x-sin2pi5*y,sin2pi5*x+cos2pi5*y,z]),fregion = region+2);;
  171 : 
  172 : meshS Tdemi= T1+T2+T3+T4+T5;//moitié de l'icosaedre
  173 : meshS Tdemi0 = movemeshS(Tdemi,transfo=[x,y,z+0.5*h]);//moitié supérieure
  174 : meshS Tdemi1 = movemeshS(Tdemi0,transfo=[x,y,-z]);//moitié inférieure
  175 : meshS Tdemi1rot = change(movemeshS(Tdemi1,transfo=[cospi5*x-sinpi5*y,sinpi5*x+cospi5*y,z],orientation=-1),fregion = region+10);//rotation de la moitié inférieure pour les emboiter
  176 : meshS Ticosaedre = Tdemi0+Tdemi1rot;
  177 : //Ticosaedre=trunc(Ticosaedre,1,split=5);
  178 : if(wplot) plot(Ticosaedre,wait=1);
  179 : //cout << regions(Ticosaedre) << endl; 
  180 : return Ticosaedre;
  181 : }
  182 : 
  183 : func  meshS Icosahedron (int orientation)
  184 : {
  185 :  return Icosahedron(orientation,0);
  186 : }
  187 : func meshS Sphere20 (real R,int N,int orientation,int wplot)
 *** Warning  The identifier N hide a Global identifier  

  188 : {// Isocaedre regulier !!!!  Thank G. Vergez ..
  189 : meshS Ticosaedre = Icosahedron(orientation,wplot);
  190 : Ticosaedre=trunc(Ticosaedre,1,split=N);
  191 : if(wplot) plot(cmm="Icosaedre",Ticosaedre,wait=1);
  192 : 
  193 : //=================================================================================
  194 : //Construction de la sphere 3D
  195 : //=================================================================================
  196 : func metric =dist(x,y,z)/R;
  197 : meshS Th = movemeshS(Ticosaedre,transfo=[x/metric,y/metric,z/metric]); 
  198 : if(wplot) plot (cmm="Th",Th,wait=1);
  199 : return Th;
  200 : }
  201 : 
  202 : func meshS Sphere20 (real R,int N,int orientation)
 *** Warning  The identifier N hide a Global identifier  

  203 : {
  204 :   return Sphere20(R,N,orientation,0);
  205 : }
  206 : 
  207 : /*  test: 
  208 :  load "tetgen" 
  209 :   {   
  210 :     real hs = 0.1;  // mesh size on sphere 
  211 :     int[int]  N=[20,20,20];
  212 :     real [int,int]  B=[[-1,1],[-1,1],[-1,1]];
  213 :     int [int,int]  L=[[1,2],[3,4],[5,6]];
  214 :     
  215 :     ////////////////////////////////
  216 :     meshS ThH = 
  217 : 	(N,B,L,1);
  218 :     meshS ThS =Sphere(0.5,hs,7,1); // "gluing" surface meshs to tolat boundary meshes
  219 :     cout << " xxxx" << ThH.nv << " " << ThS.nv << endl;
  220 :     
  221 :     meshS ThHS=ThH+ThS;
  222 :     savemesh(ThHS,"Hex-Sphere.mesh");
  223 :     exec("ffmedit Hex-Sphere.mesh;rm Hex-Sphere.mesh");
  224 :     
  225 :     real voltet=(hs^3)/6.;
  226 :     cout << " voltet = " << voltet << endl;
  227 :     real[int] domaine = [0,0,0,1,voltet,0,0,0.7,2,voltet];
  228 :   
  229 :     mesh3 Th = tetg(ThHS,switch="pqaAAYYQ",nbofregions=2,regionlist=domaine);    
  230 :     medit("Cube-With-Ball",Th);
  231 :   }
  232 : 
  233 : */
    3 : 
    4 : //----------------------------------------------
    5 : // PATHS
    6 : 
    7 : string icoSphereDir = "../pkgMesh/meshSicosphere/meshS/";
    8 : 
    9 : //----------------------------------------------
   10 : // FUNCTION: READER
   11 : 
   12 : func string[int] readConfig(string filename){
   13 :   string[int] config(0);
   14 :   string line;
   15 :   int cnt = 0;
   16 :   ifstream f(filename);
   17 :   getline(f, line);// header
   18 :   while(f.good()){
   19 :     getline(f, line);
   20 :     if(line == "") continue;
   21 :     config.resize(cnt+1);
   22 :     config[cnt] = line;
   23 :     cnt++;
   24 :   }
   25 :   return config;
   26 : }
   27 : 
   28 : func bool checkIsEmpty(string[int] & config){
   29 :     if (config.n == 0){
   30 :         cout << "Warning: config file is empty" << endl;
   31 :         return true;
   32 :     }else{
   33 :         return false;
   34 :     }
   35 : }
   36 : 
   37 : func string getLineByIndex(string & line, int index){
   38 :     int len = line.length; int startLine = 0; int endLine = 0;
   39 :     string part;
   40 :     for( int ind = 0; ind < index + 1; ind++){
   41 :         if (startLine >= len){
   42 :             cout << "Warning: index out of range" << endl; return "";
   43 :         }
   44 :         endLine = line.find(",", startLine);
   45 :         part = line( startLine : (endLine-1) );
   46 :         startLine = endLine+1;
   47 :     }
   48 :     return part;
   49 : }
   50 : 
   51 : func string getType(string & line){
   52 :     return getLineByIndex(line, 0);
   53 : }
   54 : 
   55 : func string[int] getType(string[int] & config){
   56 :     int numLines = config.n;
   57 :     string[int] types(numLines);
   58 :     for( int indLine = 0; indLine < numLines; indLine++) types[indLine] = getType(config[indLine]);
   59 :     return types;
   60 : }
   61 : 
   62 : func real[int] getPosition(string & line){
   63 :     real[int] coord(3);
   64 :     coord[0] = atof(getLineByIndex(line, 2));
   65 :     coord[1] = atof(getLineByIndex(line, 3));
   66 :     coord[2] = atof(getLineByIndex(line, 4));
   67 :     return coord;
   68 : }
   69 : 
   70 : func real[int] getPosition(string[int] & config){
   71 :     int numLines = config.n;
   72 :     real[int] coords(3*numLines);
   73 :     for( int indLine = 0; indLine < numLines; indLine++){
   74 :         real[int] coord = getPosition(config[indLine]);
   75 :         for (int indCoord = 0; indCoord < 3; indCoord++){
   76 :             coords[3*indLine + indCoord] = coord[indCoord];
   77 :         }
   78 :     }
   79 :     return coords;
   80 : }
   81 : 
   82 : func int getTheta(string & line){
   83 :     return atoi(getLineByIndex(line, 1));
   84 : }
   85 : 
   86 : func int[int] getTheta(string[int] & config){
   87 :     int numLines = config.n;
   88 :     int[int] theta(numLines);
   89 :     for( int indLine = 0; indLine < numLines; indLine++) theta[indLine] = getTheta(config[indLine]);
   90 :     return theta;
   91 : }
   92 : 
   93 : func int getNumUnique( int[int] & Arr ){
   94 :     Arr.sort;
   95 :     int cnt = 0;
   96 :     for( int indLine = 0; indLine < Arr.n; indLine++){
   97 :         if (indLine == 0){
   98 :             cnt++;
   99 :         }else{
  100 :             if (Arr[indLine] != Arr[indLine-1]){
  101 :                 cnt++;
  102 :             }
  103 :         }
  104 :     }
  105 :     return cnt;
  106 : }
  107 : 
  108 : func int getCardTheta(string[int] & config){
  109 :     int[int] Theta = getTheta(config);
  110 :     return getNumUnique(Theta);
  111 : }
  112 : 
  113 : 
  114 : func real[int] getParameter(string & line){
  115 :     real[int] parameter(4);
  116 :     for (int indParam = 0; indParam < 4; indParam++){
  117 :         parameter[indParam] = atof(getLineByIndex(line, 5+indParam));
  118 :     }
  119 :     return parameter;
  120 : }
  121 : 
  122 : func real[int] getParameter(string[int] & config){
  123 :     int numLines = config.n;
  124 :     real[int] parameters(4*numLines);
  125 :     for( int indLine = 0; indLine < numLines; indLine++){
  126 :         real[int] parameter = getParameter(config[indLine]);
  127 :         for (int indParam = 0; indParam < 4; indParam++){
  128 :             parameters[4*indLine + indParam] = parameter[indParam];
  129 :         }
  130 :     }
  131 : }
  132 : 
  133 : //----------------------------------------------
  134 : // FUNCTION: MESH
  135 : 
  136 : func meshS loadMeshS(string & type, real[int] Parameter){
  137 :   meshS ThS;
  138 :   if (type == "icoSphere"){
  139 :     ThS = readmeshS(icoSphereDir + round(Parameter[0]) + ".mesh");
  140 :   }else{
  141 :     cout << "Warning: type not found" << endl;
  142 :   }
  143 :   return ThS;
  144 : }
  145 : 
  146 : func bool shiftMeshS(meshS & ThS, real[int] Coord, int theta){
  147 : 
  148 :   int orientation = 1;
  149 : 
  150 :   /* set the label change */
  151 :   int[int] changeLabel = [0, theta + 7];
  152 :   // shift the mesh
  153 :   ThS = movemeshS(ThS, 
  154 :     /* set the transformation of the grid */ 
  155 :     transfo = [
  156 :       (x + Coord[0]), 
  157 :       (y + Coord[1]), 
  158 :       (z + Coord[2])
  159 :       ],
  160 :     /* change the labels */
  161 :     label = changeLabel,
  162 :     region = changeLabel,
  163 :     orientation = orientation
  164 :   );
  165 : 
  166 :   return true;
  167 : }
  168 : 
  169 : func bool formMeshS(meshS & ThS, string & type, real[int] Coord, real[int] Parameter){
  170 : 
  171 :   if (type == "icoSphere"){
  172 :     
  173 :     ThS = movemeshS(ThS, 
  174 :       /* set the transformation of the grid */ 
  175 :       transfo = [
  176 :         (Parameter[1]*( x - Coord[0] ) + Coord[0]), 
  177 :         (Parameter[2]*( y - Coord[1] ) + Coord[1]),
  178 :         (Parameter[3]*( z - Coord[2] ) + Coord[2])
  179 :       ]
  180 :     );
  181 : 
  182 :     return true;
  183 :   }else{
  184 :     cout << "Warning: type not found" << endl;
  185 :     return false;
  186 :   }
  187 : }
  188 : 
  189 : //----------------------------------------------
  190 : 
  191 : 
    8 : include "helpers.idp"// -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
    2 : // HELPER-MACROS 
    3 : // -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
    4 : 
    5 : // Normal-Vector of Sphere
    6 : macro Normal() [N.x, N.y, N.z]//
    7 : 
    8 : // 3D-Gradient
    9 : macro Grad(u) [dx(u), dy(u), dz(u)] )  //
   10 : 
   11 : // H0-Norm
   12 : macro H0(u, v, Th) int3d(Th, qfV=QFV)(u*v) )  //
   13 : 
   14 : // H1-Norm
   15 : macro H1(u, v, Th) int3d(Th, qfV=DQFV)(dx(u)*dx(v) + dy(u)*dy(v) + dz(u)*dz(v)) )  //
   16 : 
   17 : macro INFO(msg) if(mpirank == 0){ cout << "INFO: "; cout << msg << endl; } )  //
   18 : 
   19 : // chunk index
   20 : macro INDC(ind) Vh.ndof * ind : (Vh.ndof * (ind+1) - 1) )  //
   21 : 
   22 : //-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
   23 : // COMPUTATION
   24 : //-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
   25 : 
   26 : // BOUNDARY CONDITIONS -> DEFINES: deltaUZero
   27 : include "deltaUZero.idp"// -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
    2 : // HARDCODED DEFINITION MAX. (16384) GROUPS ALLOWED
    3 : // -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
    4 : 
    5 : macro deltaUZero1(u)on(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513, u=0) )  //
    6 : macro deltaUZero2(u)on(513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025, u=0) )  //
    7 : macro deltaUZero3(u)on(1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1444,1445,1446,1447,1448,1449,1450,1451,1452,1453,1454,1455,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482,1483,1484,1485,1486,1487,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1515,1516,1517,1518,1519,1520,1521,1522,1523,1524,1525,1526,1527,1528,1529,1530,1531,1532,1533,1534,1535,1536,1537, u=0) )  //
    8 : macro deltaUZero4(u)on(1537,1538,1539,1540,1541,1542,1543,1544,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1558,1559,1560,1561,1562,1563,1564,1565,1566,1567,1568,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,1595,1596,1597,1598,1599,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1631,1632,1633,1634,1635,1636,1637,1638,1639,1640,1641,1642,1643,1644,1645,1646,1647,1648,1649,1650,1651,1652,1653,1654,1655,1656,1657,1658,1659,1660,1661,1662,1663,1664,1665,1666,1667,1668,1669,1670,1671,1672,1673,1674,1675,1676,1677,1678,1679,1680,1681,1682,1683,1684,1685,1686,1687,1688,1689,1690,1691,1692,1693,1694,1695,1696,1697,1698,1699,1700,1701,1702,1703,1704,1705,1706,1707,1708,1709,1710,1711,1712,1713,1714,1715,1716,1717,1718,1719,1720,1721,1722,1723,1724,1725,1726,1727,1728,1729,1730,1731,1732,1733,1734,1735,1736,1737,1738,1739,1740,1741,1742,1743,1744,1745,1746,1747,1748,1749,1750,1751,1752,1753,1754,1755,1756,1757,1758,1759,1760,1761,1762,1763,1764,1765,1766,1767,1768,1769,1770,1771,1772,1773,1774,1775,1776,1777,1778,1779,1780,1781,1782,1783,1784,1785,1786,1787,1788,1789,1790,1791,1792,1793,1794,1795,1796,1797,1798,1799,1800,1801,1802,1803,1804,1805,1806,1807,1808,1809,1810,1811,1812,1813,1814,1815,1816,1817,1818,1819,1820,1821,1822,1823,1824,1825,1826,1827,1828,1829,1830,1831,1832,1833,1834,1835,1836,1837,1838,1839,1840,1841,1842,1843,1844,1845,1846,1847,1848,1849,1850,1851,1852,1853,1854,1855,1856,1857,1858,1859,1860,1861,1862,1863,1864,1865,1866,1867,1868,1869,1870,1871,1872,1873,1874,1875,1876,1877,1878,1879,1880,1881,1882,1883,1884,1885,1886,1887,1888,1889,1890,1891,1892,1893,1894,1895,1896,1897,1898,1899,1900,1901,1902,1903,1904,1905,1906,1907,1908,1909,1910,1911,1912,1913,1914,1915,1916,1917,1918,1919,1920,1921,1922,1923,1924,1925,1926,1927,1928,1929,1930,1931,1932,1933,1934,1935,1936,1937,1938,1939,1940,1941,1942,1943,1944,1945,1946,1947,1948,1949,1950,1951,1952,1953,1954,1955,1956,1957,1958,1959,1960,1961,1962,1963,1964,1965,1966,1967,1968,1969,1970,1971,1972,1973,1974,1975,1976,1977,1978,1979,1980,1981,1982,1983,1984,1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049, u=0) )  //
    9 : macro deltaUZero5(u)on(2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110,2111,2112,2113,2114,2115,2116,2117,2118,2119,2120,2121,2122,2123,2124,2125,2126,2127,2128,2129,2130,2131,2132,2133,2134,2135,2136,2137,2138,2139,2140,2141,2142,2143,2144,2145,2146,2147,2148,2149,2150,2151,2152,2153,2154,2155,2156,2157,2158,2159,2160,2161,2162,2163,2164,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,2182,2183,2184,2185,2186,2187,2188,2189,2190,2191,2192,2193,2194,2195,2196,2197,2198,2199,2200,2201,2202,2203,2204,2205,2206,2207,2208,2209,2210,2211,2212,2213,2214,2215,2216,2217,2218,2219,2220,2221,2222,2223,2224,2225,2226,2227,2228,2229,2230,2231,2232,2233,2234,2235,2236,2237,2238,2239,2240,2241,2242,2243,2244,2245,2246,2247,2248,2249,2250,2251,2252,2253,2254,2255,2256,2257,2258,2259,2260,2261,2262,2263,2264,2265,2266,2267,2268,2269,2270,2271,2272,2273,2274,2275,2276,2277,2278,2279,2280,2281,2282,2283,2284,2285,2286,2287,2288,2289,2290,2291,2292,2293,2294,2295,2296,2297,2298,2299,2300,2301,2302,2303,2304,2305,2306,2307,2308,2309,2310,2311,2312,2313,2314,2315,2316,2317,2318,2319,2320,2321,2322,2323,2324,2325,2326,2327,2328,2329,2330,2331,2332,2333,2334,2335,2336,2337,2338,2339,2340,2341,2342,2343,2344,2345,2346,2347,2348,2349,2350,2351,2352,2353,2354,2355,2356,2357,2358,2359,2360,2361,2362,2363,2364,2365,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2384,2385,2386,2387,2388,2389,2390,2391,2392,2393,2394,2395,2396,2397,2398,2399,2400,2401,2402,2403,2404,2405,2406,2407,2408,2409,2410,2411,2412,2413,2414,2415,2416,2417,2418,2419,2420,2421,2422,2423,2424,2425,2426,2427,2428,2429,2430,2431,2432,2433,2434,2435,2436,2437,2438,2439,2440,2441,2442,2443,2444,2445,2446,2447,2448,2449,2450,2451,2452,2453,2454,2455,2456,2457,2458,2459,2460,2461,2462,2463,2464,2465,2466,2467,2468,2469,2470,2471,2472,2473,2474,2475,2476,2477,2478,2479,2480,2481,2482,2483,2484,2485,2486,2487,2488,2489,2490,2491,2492,2493,2494,2495,2496,2497,2498,2499,2500,2501,2502,2503,2504,2505,2506,2507,2508,2509,2510,2511,2512,2513,2514,2515,2516,2517,2518,2519,2520,2521,2522,2523,2524,2525,2526,2527,2528,2529,2530,2531,2532,2533,2534,2535,2536,2537,2538,2539,2540,2541,2542,2543,2544,2545,2546,2547,2548,2549,2550,2551,2552,2553,2554,2555,2556,2557,2558,2559,2560,2561, u=0) )  //
   10 : macro deltaUZero6(u)on(2561,2562,2563,2564,2565,2566,2567,2568,2569,2570,2571,2572,2573,2574,2575,2576,2577,2578,2579,2580,2581,2582,2583,2584,2585,2586,2587,2588,2589,2590,2591,2592,2593,2594,2595,2596,2597,2598,2599,2600,2601,2602,2603,2604,2605,2606,2607,2608,2609,2610,2611,2612,2613,2614,2615,2616,2617,2618,2619,2620,2621,2622,2623,2624,2625,2626,2627,2628,2629,2630,2631,2632,2633,2634,2635,2636,2637,2638,2639,2640,2641,2642,2643,2644,2645,2646,2647,2648,2649,2650,2651,2652,2653,2654,2655,2656,2657,2658,2659,2660,2661,2662,2663,2664,2665,2666,2667,2668,2669,2670,2671,2672,2673,2674,2675,2676,2677,2678,2679,2680,2681,2682,2683,2684,2685,2686,2687,2688,2689,2690,2691,2692,2693,2694,2695,2696,2697,2698,2699,2700,2701,2702,2703,2704,2705,2706,2707,2708,2709,2710,2711,2712,2713,2714,2715,2716,2717,2718,2719,2720,2721,2722,2723,2724,2725,2726,2727,2728,2729,2730,2731,2732,2733,2734,2735,2736,2737,2738,2739,2740,2741,2742,2743,2744,2745,2746,2747,2748,2749,2750,2751,2752,2753,2754,2755,2756,2757,2758,2759,2760,2761,2762,2763,2764,2765,2766,2767,2768,2769,2770,2771,2772,2773,2774,2775,2776,2777,2778,2779,2780,2781,2782,2783,2784,2785,2786,2787,2788,2789,2790,2791,2792,2793,2794,2795,2796,2797,2798,2799,2800,2801,2802,2803,2804,2805,2806,2807,2808,2809,2810,2811,2812,2813,2814,2815,2816,2817,2818,2819,2820,2821,2822,2823,2824,2825,2826,2827,2828,2829,2830,2831,2832,2833,2834,2835,2836,2837,2838,2839,2840,2841,2842,2843,2844,2845,2846,2847,2848,2849,2850,2851,2852,2853,2854,2855,2856,2857,2858,2859,2860,2861,2862,2863,2864,2865,2866,2867,2868,2869,2870,2871,2872,2873,2874,2875,2876,2877,2878,2879,2880,2881,2882,2883,2884,2885,2886,2887,2888,2889,2890,2891,2892,2893,2894,2895,2896,2897,2898,2899,2900,2901,2902,2903,2904,2905,2906,2907,2908,2909,2910,2911,2912,2913,2914,2915,2916,2917,2918,2919,2920,2921,2922,2923,2924,2925,2926,2927,2928,2929,2930,2931,2932,2933,2934,2935,2936,2937,2938,2939,2940,2941,2942,2943,2944,2945,2946,2947,2948,2949,2950,2951,2952,2953,2954,2955,2956,2957,2958,2959,2960,2961,2962,2963,2964,2965,2966,2967,2968,2969,2970,2971,2972,2973,2974,2975,2976,2977,2978,2979,2980,2981,2982,2983,2984,2985,2986,2987,2988,2989,2990,2991,2992,2993,2994,2995,2996,2997,2998,2999,3000,3001,3002,3003,3004,3005,3006,3007,3008,3009,3010,3011,3012,3013,3014,3015,3016,3017,3018,3019,3020,3021,3022,3023,3024,3025,3026,3027,3028,3029,3030,3031,3032,3033,3034,3035,3036,3037,3038,3039,3040,3041,3042,3043,3044,3045,3046,3047,3048,3049,3050,3051,3052,3053,3054,3055,3056,3057,3058,3059,3060,3061,3062,3063,3064,3065,3066,3067,3068,3069,3070,3071,3072,3073, u=0) )  //
   11 : macro deltaUZero7(u)on(3073,3074,3075,3076,3077,3078,3079,3080,3081,3082,3083,3084,3085,3086,3087,3088,3089,3090,3091,3092,3093,3094,3095,3096,3097,3098,3099,3100,3101,3102,3103,3104,3105,3106,3107,3108,3109,3110,3111,3112,3113,3114,3115,3116,3117,3118,3119,3120,3121,3122,3123,3124,3125,3126,3127,3128,3129,3130,3131,3132,3133,3134,3135,3136,3137,3138,3139,3140,3141,3142,3143,3144,3145,3146,3147,3148,3149,3150,3151,3152,3153,3154,3155,3156,3157,3158,3159,3160,3161,3162,3163,3164,3165,3166,3167,3168,3169,3170,3171,3172,3173,3174,3175,3176,3177,3178,3179,3180,3181,3182,3183,3184,3185,3186,3187,3188,3189,3190,3191,3192,3193,3194,3195,3196,3197,3198,3199,3200,3201,3202,3203,3204,3205,3206,3207,3208,3209,3210,3211,3212,3213,3214,3215,3216,3217,3218,3219,3220,3221,3222,3223,3224,3225,3226,3227,3228,3229,3230,3231,3232,3233,3234,3235,3236,3237,3238,3239,3240,3241,3242,3243,3244,3245,3246,3247,3248,3249,3250,3251,3252,3253,3254,3255,3256,3257,3258,3259,3260,3261,3262,3263,3264,3265,3266,3267,3268,3269,3270,3271,3272,3273,3274,3275,3276,3277,3278,3279,3280,3281,3282,3283,3284,3285,3286,3287,3288,3289,3290,3291,3292,3293,3294,3295,3296,3297,3298,3299,3300,3301,3302,3303,3304,3305,3306,3307,3308,3309,3310,3311,3312,3313,3314,3315,3316,3317,3318,3319,3320,3321,3322,3323,3324,3325,3326,3327,3328,3329,3330,3331,3332,3333,3334,3335,3336,3337,3338,3339,3340,3341,3342,3343,3344,3345,3346,3347,3348,3349,3350,3351,3352,3353,3354,3355,3356,3357,3358,3359,3360,3361,3362,3363,3364,3365,3366,3367,3368,3369,3370,3371,3372,3373,3374,3375,3376,3377,3378,3379,3380,3381,3382,3383,3384,3385,3386,3387,3388,3389,3390,3391,3392,3393,3394,3395,3396,3397,3398,3399,3400,3401,3402,3403,3404,3405,3406,3407,3408,3409,3410,3411,3412,3413,3414,3415,3416,3417,3418,3419,3420,3421,3422,3423,3424,3425,3426,3427,3428,3429,3430,3431,3432,3433,3434,3435,3436,3437,3438,3439,3440,3441,3442,3443,3444,3445,3446,3447,3448,3449,3450,3451,3452,3453,3454,3455,3456,3457,3458,3459,3460,3461,3462,3463,3464,3465,3466,3467,3468,3469,3470,3471,3472,3473,3474,3475,3476,3477,3478,3479,3480,3481,3482,3483,3484,3485,3486,3487,3488,3489,3490,3491,3492,3493,3494,3495,3496,3497,3498,3499,3500,3501,3502,3503,3504,3505,3506,3507,3508,3509,3510,3511,3512,3513,3514,3515,3516,3517,3518,3519,3520,3521,3522,3523,3524,3525,3526,3527,3528,3529,3530,3531,3532,3533,3534,3535,3536,3537,3538,3539,3540,3541,3542,3543,3544,3545,3546,3547,3548,3549,3550,3551,3552,3553,3554,3555,3556,3557,3558,3559,3560,3561,3562,3563,3564,3565,3566,3567,3568,3569,3570,3571,3572,3573,3574,3575,3576,3577,3578,3579,3580,3581,3582,3583,3584,3585, u=0) )  //
   12 : macro deltaUZero8(u)on(3585,3586,3587,3588,3589,3590,3591,3592,3593,3594,3595,3596,3597,3598,3599,3600,3601,3602,3603,3604,3605,3606,3607,3608,3609,3610,3611,3612,3613,3614,3615,3616,3617,3618,3619,3620,3621,3622,3623,3624,3625,3626,3627,3628,3629,3630,3631,3632,3633,3634,3635,3636,3637,3638,3639,3640,3641,3642,3643,3644,3645,3646,3647,3648,3649,3650,3651,3652,3653,3654,3655,3656,3657,3658,3659,3660,3661,3662,3663,3664,3665,3666,3667,3668,3669,3670,3671,3672,3673,3674,3675,3676,3677,3678,3679,3680,3681,3682,3683,3684,3685,3686,3687,3688,3689,3690,3691,3692,3693,3694,3695,3696,3697,3698,3699,3700,3701,3702,3703,3704,3705,3706,3707,3708,3709,3710,3711,3712,3713,3714,3715,3716,3717,3718,3719,3720,3721,3722,3723,3724,3725,3726,3727,3728,3729,3730,3731,3732,3733,3734,3735,3736,3737,3738,3739,3740,3741,3742,3743,3744,3745,3746,3747,3748,3749,3750,3751,3752,3753,3754,3755,3756,3757,3758,3759,3760,3761,3762,3763,3764,3765,3766,3767,3768,3769,3770,3771,3772,3773,3774,3775,3776,3777,3778,3779,3780,3781,3782,3783,3784,3785,3786,3787,3788,3789,3790,3791,3792,3793,3794,3795,3796,3797,3798,3799,3800,3801,3802,3803,3804,3805,3806,3807,3808,3809,3810,3811,3812,3813,3814,3815,3816,3817,3818,3819,3820,3821,3822,3823,3824,3825,3826,3827,3828,3829,3830,3831,3832,3833,3834,3835,3836,3837,3838,3839,3840,3841,3842,3843,3844,3845,3846,3847,3848,3849,3850,3851,3852,3853,3854,3855,3856,3857,3858,3859,3860,3861,3862,3863,3864,3865,3866,3867,3868,3869,3870,3871,3872,3873,3874,3875,3876,3877,3878,3879,3880,3881,3882,3883,3884,3885,3886,3887,3888,3889,3890,3891,3892,3893,3894,3895,3896,3897,3898,3899,3900,3901,3902,3903,3904,3905,3906,3907,3908,3909,3910,3911,3912,3913,3914,3915,3916,3917,3918,3919,3920,3921,3922,3923,3924,3925,3926,3927,3928,3929,3930,3931,3932,3933,3934,3935,3936,3937,3938,3939,3940,3941,3942,3943,3944,3945,3946,3947,3948,3949,3950,3951,3952,3953,3954,3955,3956,3957,3958,3959,3960,3961,3962,3963,3964,3965,3966,3967,3968,3969,3970,3971,3972,3973,3974,3975,3976,3977,3978,3979,3980,3981,3982,3983,3984,3985,3986,3987,3988,3989,3990,3991,3992,3993,3994,3995,3996,3997,3998,3999,4000,4001,4002,4003,4004,4005,4006,4007,4008,4009,4010,4011,4012,4013,4014,4015,4016,4017,4018,4019,4020,4021,4022,4023,4024,4025,4026,4027,4028,4029,4030,4031,4032,4033,4034,4035,4036,4037,4038,4039,4040,4041,4042,4043,4044,4045,4046,4047,4048,4049,4050,4051,4052,4053,4054,4055,4056,4057,4058,4059,4060,4061,4062,4063,4064,4065,4066,4067,4068,4069,4070,4071,4072,4073,4074,4075,4076,4077,4078,4079,4080,4081,4082,4083,4084,4085,4086,4087,4088,4089,4090,4091,4092,4093,4094,4095,4096,4097, u=0) )  //
   13 : macro deltaUZero9(u)on(4097,4098,4099,4100,4101,4102,4103,4104,4105,4106,4107,4108,4109,4110,4111,4112,4113,4114,4115,4116,4117,4118,4119,4120,4121,4122,4123,4124,4125,4126,4127,4128,4129,4130,4131,4132,4133,4134,4135,4136,4137,4138,4139,4140,4141,4142,4143,4144,4145,4146,4147,4148,4149,4150,4151,4152,4153,4154,4155,4156,4157,4158,4159,4160,4161,4162,4163,4164,4165,4166,4167,4168,4169,4170,4171,4172,4173,4174,4175,4176,4177,4178,4179,4180,4181,4182,4183,4184,4185,4186,4187,4188,4189,4190,4191,4192,4193,4194,4195,4196,4197,4198,4199,4200,4201,4202,4203,4204,4205,4206,4207,4208,4209,4210,4211,4212,4213,4214,4215,4216,4217,4218,4219,4220,4221,4222,4223,4224,4225,4226,4227,4228,4229,4230,4231,4232,4233,4234,4235,4236,4237,4238,4239,4240,4241,4242,4243,4244,4245,4246,4247,4248,4249,4250,4251,4252,4253,4254,4255,4256,4257,4258,4259,4260,4261,4262,4263,4264,4265,4266,4267,4268,4269,4270,4271,4272,4273,4274,4275,4276,4277,4278,4279,4280,4281,4282,4283,4284,4285,4286,4287,4288,4289,4290,4291,4292,4293,4294,4295,4296,4297,4298,4299,4300,4301,4302,4303,4304,4305,4306,4307,4308,4309,4310,4311,4312,4313,4314,4315,4316,4317,4318,4319,4320,4321,4322,4323,4324,4325,4326,4327,4328,4329,4330,4331,4332,4333,4334,4335,4336,4337,4338,4339,4340,4341,4342,4343,4344,4345,4346,4347,4348,4349,4350,4351,4352,4353,4354,4355,4356,4357,4358,4359,4360,4361,4362,4363,4364,4365,4366,4367,4368,4369,4370,4371,4372,4373,4374,4375,4376,4377,4378,4379,4380,4381,4382,4383,4384,4385,4386,4387,4388,4389,4390,4391,4392,4393,4394,4395,4396,4397,4398,4399,4400,4401,4402,4403,4404,4405,4406,4407,4408,4409,4410,4411,4412,4413,4414,4415,4416,4417,4418,4419,4420,4421,4422,4423,4424,4425,4426,4427,4428,4429,4430,4431,4432,4433,4434,4435,4436,4437,4438,4439,4440,4441,4442,4443,4444,4445,4446,4447,4448,4449,4450,4451,4452,4453,4454,4455,4456,4457,4458,4459,4460,4461,4462,4463,4464,4465,4466,4467,4468,4469,4470,4471,4472,4473,4474,4475,4476,4477,4478,4479,4480,4481,4482,4483,4484,4485,4486,4487,4488,4489,4490,4491,4492,4493,4494,4495,4496,4497,4498,4499,4500,4501,4502,4503,4504,4505,4506,4507,4508,4509,4510,4511,4512,4513,4514,4515,4516,4517,4518,4519,4520,4521,4522,4523,4524,4525,4526,4527,4528,4529,4530,4531,4532,4533,4534,4535,4536,4537,4538,4539,4540,4541,4542,4543,4544,4545,4546,4547,4548,4549,4550,4551,4552,4553,4554,4555,4556,4557,4558,4559,4560,4561,4562,4563,4564,4565,4566,4567,4568,4569,4570,4571,4572,4573,4574,4575,4576,4577,4578,4579,4580,4581,4582,4583,4584,4585,4586,4587,4588,4589,4590,4591,4592,4593,4594,4595,4596,4597,4598,4599,4600,4601,4602,4603,4604,4605,4606,4607,4608,4609, u=0) )  //
   14 : macro deltaUZero10(u)on(4609,4610,4611,4612,4613,4614,4615,4616,4617,4618,4619,4620,4621,4622,4623,4624,4625,4626,4627,4628,4629,4630,4631,4632,4633,4634,4635,4636,4637,4638,4639,4640,4641,4642,4643,4644,4645,4646,4647,4648,4649,4650,4651,4652,4653,4654,4655,4656,4657,4658,4659,4660,4661,4662,4663,4664,4665,4666,4667,4668,4669,4670,4671,4672,4673,4674,4675,4676,4677,4678,4679,4680,4681,4682,4683,4684,4685,4686,4687,4688,4689,4690,4691,4692,4693,4694,4695,4696,4697,4698,4699,4700,4701,4702,4703,4704,4705,4706,4707,4708,4709,4710,4711,4712,4713,4714,4715,4716,4717,4718,4719,4720,4721,4722,4723,4724,4725,4726,4727,4728,4729,4730,4731,4732,4733,4734,4735,4736,4737,4738,4739,4740,4741,4742,4743,4744,4745,4746,4747,4748,4749,4750,4751,4752,4753,4754,4755,4756,4757,4758,4759,4760,4761,4762,4763,4764,4765,4766,4767,4768,4769,4770,4771,4772,4773,4774,4775,4776,4777,4778,4779,4780,4781,4782,4783,4784,4785,4786,4787,4788,4789,4790,4791,4792,4793,4794,4795,4796,4797,4798,4799,4800,4801,4802,4803,4804,4805,4806,4807,4808,4809,4810,4811,4812,4813,4814,4815,4816,4817,4818,4819,4820,4821,4822,4823,4824,4825,4826,4827,4828,4829,4830,4831,4832,4833,4834,4835,4836,4837,4838,4839,4840,4841,4842,4843,4844,4845,4846,4847,4848,4849,4850,4851,4852,4853,4854,4855,4856,4857,4858,4859,4860,4861,4862,4863,4864,4865,4866,4867,4868,4869,4870,4871,4872,4873,4874,4875,4876,4877,4878,4879,4880,4881,4882,4883,4884,4885,4886,4887,4888,4889,4890,4891,4892,4893,4894,4895,4896,4897,4898,4899,4900,4901,4902,4903,4904,4905,4906,4907,4908,4909,4910,4911,4912,4913,4914,4915,4916,4917,4918,4919,4920,4921,4922,4923,4924,4925,4926,4927,4928,4929,4930,4931,4932,4933,4934,4935,4936,4937,4938,4939,4940,4941,4942,4943,4944,4945,4946,4947,4948,4949,4950,4951,4952,4953,4954,4955,4956,4957,4958,4959,4960,4961,4962,4963,4964,4965,4966,4967,4968,4969,4970,4971,4972,4973,4974,4975,4976,4977,4978,4979,4980,4981,4982,4983,4984,4985,4986,4987,4988,4989,4990,4991,4992,4993,4994,4995,4996,4997,4998,4999,5000,5001,5002,5003,5004,5005,5006,5007,5008,5009,5010,5011,5012,5013,5014,5015,5016,5017,5018,5019,5020,5021,5022,5023,5024,5025,5026,5027,5028,5029,5030,5031,5032,5033,5034,5035,5036,5037,5038,5039,5040,5041,5042,5043,5044,5045,5046,5047,5048,5049,5050,5051,5052,5053,5054,5055,5056,5057,5058,5059,5060,5061,5062,5063,5064,5065,5066,5067,5068,5069,5070,5071,5072,5073,5074,5075,5076,5077,5078,5079,5080,5081,5082,5083,5084,5085,5086,5087,5088,5089,5090,5091,5092,5093,5094,5095,5096,5097,5098,5099,5100,5101,5102,5103,5104,5105,5106,5107,5108,5109,5110,5111,5112,5113,5114,5115,5116,5117,5118,5119,5120,5121, u=0) )  //
   15 : macro deltaUZero11(u)on(5121,5122,5123,5124,5125,5126,5127,5128,5129,5130,5131,5132,5133,5134,5135,5136,5137,5138,5139,5140,5141,5142,5143,5144,5145,5146,5147,5148,5149,5150,5151,5152,5153,5154,5155,5156,5157,5158,5159,5160,5161,5162,5163,5164,5165,5166,5167,5168,5169,5170,5171,5172,5173,5174,5175,5176,5177,5178,5179,5180,5181,5182,5183,5184,5185,5186,5187,5188,5189,5190,5191,5192,5193,5194,5195,5196,5197,5198,5199,5200,5201,5202,5203,5204,5205,5206,5207,5208,5209,5210,5211,5212,5213,5214,5215,5216,5217,5218,5219,5220,5221,5222,5223,5224,5225,5226,5227,5228,5229,5230,5231,5232,5233,5234,5235,5236,5237,5238,5239,5240,5241,5242,5243,5244,5245,5246,5247,5248,5249,5250,5251,5252,5253,5254,5255,5256,5257,5258,5259,5260,5261,5262,5263,5264,5265,5266,5267,5268,5269,5270,5271,5272,5273,5274,5275,5276,5277,5278,5279,5280,5281,5282,5283,5284,5285,5286,5287,5288,5289,5290,5291,5292,5293,5294,5295,5296,5297,5298,5299,5300,5301,5302,5303,5304,5305,5306,5307,5308,5309,5310,5311,5312,5313,5314,5315,5316,5317,5318,5319,5320,5321,5322,5323,5324,5325,5326,5327,5328,5329,5330,5331,5332,5333,5334,5335,5336,5337,5338,5339,5340,5341,5342,5343,5344,5345,5346,5347,5348,5349,5350,5351,5352,5353,5354,5355,5356,5357,5358,5359,5360,5361,5362,5363,5364,5365,5366,5367,5368,5369,5370,5371,5372,5373,5374,5375,5376,5377,5378,5379,5380,5381,5382,5383,5384,5385,5386,5387,5388,5389,5390,5391,5392,5393,5394,5395,5396,5397,5398,5399,5400,5401,5402,5403,5404,5405,5406,5407,5408,5409,5410,5411,5412,5413,5414,5415,5416,5417,5418,5419,5420,5421,5422,5423,5424,5425,5426,5427,5428,5429,5430,5431,5432,5433,5434,5435,5436,5437,5438,5439,5440,5441,5442,5443,5444,5445,5446,5447,5448,5449,5450,5451,5452,5453,5454,5455,5456,5457,5458,5459,5460,5461,5462,5463,5464,5465,5466,5467,5468,5469,5470,5471,5472,5473,5474,5475,5476,5477,5478,5479,5480,5481,5482,5483,5484,5485,5486,5487,5488,5489,5490,5491,5492,5493,5494,5495,5496,5497,5498,5499,5500,5501,5502,5503,5504,5505,5506,5507,5508,5509,5510,5511,5512,5513,5514,5515,5516,5517,5518,5519,5520,5521,5522,5523,5524,5525,5526,5527,5528,5529,5530,5531,5532,5533,5534,5535,5536,5537,5538,5539,5540,5541,5542,5543,5544,5545,5546,5547,5548,5549,5550,5551,5552,5553,5554,5555,5556,5557,5558,5559,5560,5561,5562,5563,5564,5565,5566,5567,5568,5569,5570,5571,5572,5573,5574,5575,5576,5577,5578,5579,5580,5581,5582,5583,5584,5585,5586,5587,5588,5589,5590,5591,5592,5593,5594,5595,5596,5597,5598,5599,5600,5601,5602,5603,5604,5605,5606,5607,5608,5609,5610,5611,5612,5613,5614,5615,5616,5617,5618,5619,5620,5621,5622,5623,5624,5625,5626,5627,5628,5629,5630,5631,5632,5633, u=0) )  //
   16 : macro deltaUZero12(u)on(5633,5634,5635,5636,5637,5638,5639,5640,5641,5642,5643,5644,5645,5646,5647,5648,5649,5650,5651,5652,5653,5654,5655,5656,5657,5658,5659,5660,5661,5662,5663,5664,5665,5666,5667,5668,5669,5670,5671,5672,5673,5674,5675,5676,5677,5678,5679,5680,5681,5682,5683,5684,5685,5686,5687,5688,5689,5690,5691,5692,5693,5694,5695,5696,5697,5698,5699,5700,5701,5702,5703,5704,5705,5706,5707,5708,5709,5710,5711,5712,5713,5714,5715,5716,5717,5718,5719,5720,5721,5722,5723,5724,5725,5726,5727,5728,5729,5730,5731,5732,5733,5734,5735,5736,5737,5738,5739,5740,5741,5742,5743,5744,5745,5746,5747,5748,5749,5750,5751,5752,5753,5754,5755,5756,5757,5758,5759,5760,5761,5762,5763,5764,5765,5766,5767,5768,5769,5770,5771,5772,5773,5774,5775,5776,5777,5778,5779,5780,5781,5782,5783,5784,5785,5786,5787,5788,5789,5790,5791,5792,5793,5794,5795,5796,5797,5798,5799,5800,5801,5802,5803,5804,5805,5806,5807,5808,5809,5810,5811,5812,5813,5814,5815,5816,5817,5818,5819,5820,5821,5822,5823,5824,5825,5826,5827,5828,5829,5830,5831,5832,5833,5834,5835,5836,5837,5838,5839,5840,5841,5842,5843,5844,5845,5846,5847,5848,5849,5850,5851,5852,5853,5854,5855,5856,5857,5858,5859,5860,5861,5862,5863,5864,5865,5866,5867,5868,5869,5870,5871,5872,5873,5874,5875,5876,5877,5878,5879,5880,5881,5882,5883,5884,5885,5886,5887,5888,5889,5890,5891,5892,5893,5894,5895,5896,5897,5898,5899,5900,5901,5902,5903,5904,5905,5906,5907,5908,5909,5910,5911,5912,5913,5914,5915,5916,5917,5918,5919,5920,5921,5922,5923,5924,5925,5926,5927,5928,5929,5930,5931,5932,5933,5934,5935,5936,5937,5938,5939,5940,5941,5942,5943,5944,5945,5946,5947,5948,5949,5950,5951,5952,5953,5954,5955,5956,5957,5958,5959,5960,5961,5962,5963,5964,5965,5966,5967,5968,5969,5970,5971,5972,5973,5974,5975,5976,5977,5978,5979,5980,5981,5982,5983,5984,5985,5986,5987,5988,5989,5990,5991,5992,5993,5994,5995,5996,5997,5998,5999,6000,6001,6002,6003,6004,6005,6006,6007,6008,6009,6010,6011,6012,6013,6014,6015,6016,6017,6018,6019,6020,6021,6022,6023,6024,6025,6026,6027,6028,6029,6030,6031,6032,6033,6034,6035,6036,6037,6038,6039,6040,6041,6042,6043,6044,6045,6046,6047,6048,6049,6050,6051,6052,6053,6054,6055,6056,6057,6058,6059,6060,6061,6062,6063,6064,6065,6066,6067,6068,6069,6070,6071,6072,6073,6074,6075,6076,6077,6078,6079,6080,6081,6082,6083,6084,6085,6086,6087,6088,6089,6090,6091,6092,6093,6094,6095,6096,6097,6098,6099,6100,6101,6102,6103,6104,6105,6106,6107,6108,6109,6110,6111,6112,6113,6114,6115,6116,6117,6118,6119,6120,6121,6122,6123,6124,6125,6126,6127,6128,6129,6130,6131,6132,6133,6134,6135,6136,6137,6138,6139,6140,6141,6142,6143,6144,6145, u=0) )  //
   17 : macro deltaUZero13(u)on(6145,6146,6147,6148,6149,6150,6151,6152,6153,6154,6155,6156,6157,6158,6159,6160,6161,6162,6163,6164,6165,6166,6167,6168,6169,6170,6171,6172,6173,6174,6175,6176,6177,6178,6179,6180,6181,6182,6183,6184,6185,6186,6187,6188,6189,6190,6191,6192,6193,6194,6195,6196,6197,6198,6199,6200,6201,6202,6203,6204,6205,6206,6207,6208,6209,6210,6211,6212,6213,6214,6215,6216,6217,6218,6219,6220,6221,6222,6223,6224,6225,6226,6227,6228,6229,6230,6231,6232,6233,6234,6235,6236,6237,6238,6239,6240,6241,6242,6243,6244,6245,6246,6247,6248,6249,6250,6251,6252,6253,6254,6255,6256,6257,6258,6259,6260,6261,6262,6263,6264,6265,6266,6267,6268,6269,6270,6271,6272,6273,6274,6275,6276,6277,6278,6279,6280,6281,6282,6283,6284,6285,6286,6287,6288,6289,6290,6291,6292,6293,6294,6295,6296,6297,6298,6299,6300,6301,6302,6303,6304,6305,6306,6307,6308,6309,6310,6311,6312,6313,6314,6315,6316,6317,6318,6319,6320,6321,6322,6323,6324,6325,6326,6327,6328,6329,6330,6331,6332,6333,6334,6335,6336,6337,6338,6339,6340,6341,6342,6343,6344,6345,6346,6347,6348,6349,6350,6351,6352,6353,6354,6355,6356,6357,6358,6359,6360,6361,6362,6363,6364,6365,6366,6367,6368,6369,6370,6371,6372,6373,6374,6375,6376,6377,6378,6379,6380,6381,6382,6383,6384,6385,6386,6387,6388,6389,6390,6391,6392,6393,6394,6395,6396,6397,6398,6399,6400,6401,6402,6403,6404,6405,6406,6407,6408,6409,6410,6411,6412,6413,6414,6415,6416,6417,6418,6419,6420,6421,6422,6423,6424,6425,6426,6427,6428,6429,6430,6431,6432,6433,6434,6435,6436,6437,6438,6439,6440,6441,6442,6443,6444,6445,6446,6447,6448,6449,6450,6451,6452,6453,6454,6455,6456,6457,6458,6459,6460,6461,6462,6463,6464,6465,6466,6467,6468,6469,6470,6471,6472,6473,6474,6475,6476,6477,6478,6479,6480,6481,6482,6483,6484,6485,6486,6487,6488,6489,6490,6491,6492,6493,6494,6495,6496,6497,6498,6499,6500,6501,6502,6503,6504,6505,6506,6507,6508,6509,6510,6511,6512,6513,6514,6515,6516,6517,6518,6519,6520,6521,6522,6523,6524,6525,6526,6527,6528,6529,6530,6531,6532,6533,6534,6535,6536,6537,6538,6539,6540,6541,6542,6543,6544,6545,6546,6547,6548,6549,6550,6551,6552,6553,6554,6555,6556,6557,6558,6559,6560,6561,6562,6563,6564,6565,6566,6567,6568,6569,6570,6571,6572,6573,6574,6575,6576,6577,6578,6579,6580,6581,6582,6583,6584,6585,6586,6587,6588,6589,6590,6591,6592,6593,6594,6595,6596,6597,6598,6599,6600,6601,6602,6603,6604,6605,6606,6607,6608,6609,6610,6611,6612,6613,6614,6615,6616,6617,6618,6619,6620,6621,6622,6623,6624,6625,6626,6627,6628,6629,6630,6631,6632,6633,6634,6635,6636,6637,6638,6639,6640,6641,6642,6643,6644,6645,6646,6647,6648,6649,6650,6651,6652,6653,6654,6655,6656,6657, u=0) )  //
   18 : macro deltaUZero14(u)on(6657,6658,6659,6660,6661,6662,6663,6664,6665,6666,6667,6668,6669,6670,6671,6672,6673,6674,6675,6676,6677,6678,6679,6680,6681,6682,6683,6684,6685,6686,6687,6688,6689,6690,6691,6692,6693,6694,6695,6696,6697,6698,6699,6700,6701,6702,6703,6704,6705,6706,6707,6708,6709,6710,6711,6712,6713,6714,6715,6716,6717,6718,6719,6720,6721,6722,6723,6724,6725,6726,6727,6728,6729,6730,6731,6732,6733,6734,6735,6736,6737,6738,6739,6740,6741,6742,6743,6744,6745,6746,6747,6748,6749,6750,6751,6752,6753,6754,6755,6756,6757,6758,6759,6760,6761,6762,6763,6764,6765,6766,6767,6768,6769,6770,6771,6772,6773,6774,6775,6776,6777,6778,6779,6780,6781,6782,6783,6784,6785,6786,6787,6788,6789,6790,6791,6792,6793,6794,6795,6796,6797,6798,6799,6800,6801,6802,6803,6804,6805,6806,6807,6808,6809,6810,6811,6812,6813,6814,6815,6816,6817,6818,6819,6820,6821,6822,6823,6824,6825,6826,6827,6828,6829,6830,6831,6832,6833,6834,6835,6836,6837,6838,6839,6840,6841,6842,6843,6844,6845,6846,6847,6848,6849,6850,6851,6852,6853,6854,6855,6856,6857,6858,6859,6860,6861,6862,6863,6864,6865,6866,6867,6868,6869,6870,6871,6872,6873,6874,6875,6876,6877,6878,6879,6880,6881,6882,6883,6884,6885,6886,6887,6888,6889,6890,6891,6892,6893,6894,6895,6896,6897,6898,6899,6900,6901,6902,6903,6904,6905,6906,6907,6908,6909,6910,6911,6912,6913,6914,6915,6916,6917,6918,6919,6920,6921,6922,6923,6924,6925,6926,6927,6928,6929,6930,6931,6932,6933,6934,6935,6936,6937,6938,6939,6940,6941,6942,6943,6944,6945,6946,6947,6948,6949,6950,6951,6952,6953,6954,6955,6956,6957,6958,6959,6960,6961,6962,6963,6964,6965,6966,6967,6968,6969,6970,6971,6972,6973,6974,6975,6976,6977,6978,6979,6980,6981,6982,6983,6984,6985,6986,6987,6988,6989,6990,6991,6992,6993,6994,6995,6996,6997,6998,6999,7000,7001,7002,7003,7004,7005,7006,7007,7008,7009,7010,7011,7012,7013,7014,7015,7016,7017,7018,7019,7020,7021,7022,7023,7024,7025,7026,7027,7028,7029,7030,7031,7032,7033,7034,7035,7036,7037,7038,7039,7040,7041,7042,7043,7044,7045,7046,7047,7048,7049,7050,7051,7052,7053,7054,7055,7056,7057,7058,7059,7060,7061,7062,7063,7064,7065,7066,7067,7068,7069,7070,7071,7072,7073,7074,7075,7076,7077,7078,7079,7080,7081,7082,7083,7084,7085,7086,7087,7088,7089,7090,7091,7092,7093,7094,7095,7096,7097,7098,7099,7100,7101,7102,7103,7104,7105,7106,7107,7108,7109,7110,7111,7112,7113,7114,7115,7116,7117,7118,7119,7120,7121,7122,7123,7124,7125,7126,7127,7128,7129,7130,7131,7132,7133,7134,7135,7136,7137,7138,7139,7140,7141,7142,7143,7144,7145,7146,7147,7148,7149,7150,7151,7152,7153,7154,7155,7156,7157,7158,7159,7160,7161,7162,7163,7164,7165,7166,7167,7168,7169, u=0) )  //
   19 : macro deltaUZero15(u)on(7169,7170,7171,7172,7173,7174,7175,7176,7177,7178,7179,7180,7181,7182,7183,7184,7185,7186,7187,7188,7189,7190,7191,7192,7193,7194,7195,7196,7197,7198,7199,7200,7201,7202,7203,7204,7205,7206,7207,7208,7209,7210,7211,7212,7213,7214,7215,7216,7217,7218,7219,7220,7221,7222,7223,7224,7225,7226,7227,7228,7229,7230,7231,7232,7233,7234,7235,7236,7237,7238,7239,7240,7241,7242,7243,7244,7245,7246,7247,7248,7249,7250,7251,7252,7253,7254,7255,7256,7257,7258,7259,7260,7261,7262,7263,7264,7265,7266,7267,7268,7269,7270,7271,7272,7273,7274,7275,7276,7277,7278,7279,7280,7281,7282,7283,7284,7285,7286,7287,7288,7289,7290,7291,7292,7293,7294,7295,7296,7297,7298,7299,7300,7301,7302,7303,7304,7305,7306,7307,7308,7309,7310,7311,7312,7313,7314,7315,7316,7317,7318,7319,7320,7321,7322,7323,7324,7325,7326,7327,7328,7329,7330,7331,7332,7333,7334,7335,7336,7337,7338,7339,7340,7341,7342,7343,7344,7345,7346,7347,7348,7349,7350,7351,7352,7353,7354,7355,7356,7357,7358,7359,7360,7361,7362,7363,7364,7365,7366,7367,7368,7369,7370,7371,7372,7373,7374,7375,7376,7377,7378,7379,7380,7381,7382,7383,7384,7385,7386,7387,7388,7389,7390,7391,7392,7393,7394,7395,7396,7397,7398,7399,7400,7401,7402,7403,7404,7405,7406,7407,7408,7409,7410,7411,7412,7413,7414,7415,7416,7417,7418,7419,7420,7421,7422,7423,7424,7425,7426,7427,7428,7429,7430,7431,7432,7433,7434,7435,7436,7437,7438,7439,7440,7441,7442,7443,7444,7445,7446,7447,7448,7449,7450,7451,7452,7453,7454,7455,7456,7457,7458,7459,7460,7461,7462,7463,7464,7465,7466,7467,7468,7469,7470,7471,7472,7473,7474,7475,7476,7477,7478,7479,7480,7481,7482,7483,7484,7485,7486,7487,7488,7489,7490,7491,7492,7493,7494,7495,7496,7497,7498,7499,7500,7501,7502,7503,7504,7505,7506,7507,7508,7509,7510,7511,7512,7513,7514,7515,7516,7517,7518,7519,7520,7521,7522,7523,7524,7525,7526,7527,7528,7529,7530,7531,7532,7533,7534,7535,7536,7537,7538,7539,7540,7541,7542,7543,7544,7545,7546,7547,7548,7549,7550,7551,7552,7553,7554,7555,7556,7557,7558,7559,7560,7561,7562,7563,7564,7565,7566,7567,7568,7569,7570,7571,7572,7573,7574,7575,7576,7577,7578,7579,7580,7581,7582,7583,7584,7585,7586,7587,7588,7589,7590,7591,7592,7593,7594,7595,7596,7597,7598,7599,7600,7601,7602,7603,7604,7605,7606,7607,7608,7609,7610,7611,7612,7613,7614,7615,7616,7617,7618,7619,7620,7621,7622,7623,7624,7625,7626,7627,7628,7629,7630,7631,7632,7633,7634,7635,7636,7637,7638,7639,7640,7641,7642,7643,7644,7645,7646,7647,7648,7649,7650,7651,7652,7653,7654,7655,7656,7657,7658,7659,7660,7661,7662,7663,7664,7665,7666,7667,7668,7669,7670,7671,7672,7673,7674,7675,7676,7677,7678,7679,7680,7681, u=0) )  //
   20 : macro deltaUZero16(u)on(7681,7682,7683,7684,7685,7686,7687,7688,7689,7690,7691,7692,7693,7694,7695,7696,7697,7698,7699,7700,7701,7702,7703,7704,7705,7706,7707,7708,7709,7710,7711,7712,7713,7714,7715,7716,7717,7718,7719,7720,7721,7722,7723,7724,7725,7726,7727,7728,7729,7730,7731,7732,7733,7734,7735,7736,7737,7738,7739,7740,7741,7742,7743,7744,7745,7746,7747,7748,7749,7750,7751,7752,7753,7754,7755,7756,7757,7758,7759,7760,7761,7762,7763,7764,7765,7766,7767,7768,7769,7770,7771,7772,7773,7774,7775,7776,7777,7778,7779,7780,7781,7782,7783,7784,7785,7786,7787,7788,7789,7790,7791,7792,7793,7794,7795,7796,7797,7798,7799,7800,7801,7802,7803,7804,7805,7806,7807,7808,7809,7810,7811,7812,7813,7814,7815,7816,7817,7818,7819,7820,7821,7822,7823,7824,7825,7826,7827,7828,7829,7830,7831,7832,7833,7834,7835,7836,7837,7838,7839,7840,7841,7842,7843,7844,7845,7846,7847,7848,7849,7850,7851,7852,7853,7854,7855,7856,7857,7858,7859,7860,7861,7862,7863,7864,7865,7866,7867,7868,7869,7870,7871,7872,7873,7874,7875,7876,7877,7878,7879,7880,7881,7882,7883,7884,7885,7886,7887,7888,7889,7890,7891,7892,7893,7894,7895,7896,7897,7898,7899,7900,7901,7902,7903,7904,7905,7906,7907,7908,7909,7910,7911,7912,7913,7914,7915,7916,7917,7918,7919,7920,7921,7922,7923,7924,7925,7926,7927,7928,7929,7930,7931,7932,7933,7934,7935,7936,7937,7938,7939,7940,7941,7942,7943,7944,7945,7946,7947,7948,7949,7950,7951,7952,7953,7954,7955,7956,7957,7958,7959,7960,7961,7962,7963,7964,7965,7966,7967,7968,7969,7970,7971,7972,7973,7974,7975,7976,7977,7978,7979,7980,7981,7982,7983,7984,7985,7986,7987,7988,7989,7990,7991,7992,7993,7994,7995,7996,7997,7998,7999,8000,8001,8002,8003,8004,8005,8006,8007,8008,8009,8010,8011,8012,8013,8014,8015,8016,8017,8018,8019,8020,8021,8022,8023,8024,8025,8026,8027,8028,8029,8030,8031,8032,8033,8034,8035,8036,8037,8038,8039,8040,8041,8042,8043,8044,8045,8046,8047,8048,8049,8050,8051,8052,8053,8054,8055,8056,8057,8058,8059,8060,8061,8062,8063,8064,8065,8066,8067,8068,8069,8070,8071,8072,8073,8074,8075,8076,8077,8078,8079,8080,8081,8082,8083,8084,8085,8086,8087,8088,8089,8090,8091,8092,8093,8094,8095,8096,8097,8098,8099,8100,8101,8102,8103,8104,8105,8106,8107,8108,8109,8110,8111,8112,8113,8114,8115,8116,8117,8118,8119,8120,8121,8122,8123,8124,8125,8126,8127,8128,8129,8130,8131,8132,8133,8134,8135,8136,8137,8138,8139,8140,8141,8142,8143,8144,8145,8146,8147,8148,8149,8150,8151,8152,8153,8154,8155,8156,8157,8158,8159,8160,8161,8162,8163,8164,8165,8166,8167,8168,8169,8170,8171,8172,8173,8174,8175,8176,8177,8178,8179,8180,8181,8182,8183,8184,8185,8186,8187,8188,8189,8190,8191,8192,8193, u=0) )  //
   21 : macro deltaUZero17(u)on(8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8203,8204,8205,8206,8207,8208,8209,8210,8211,8212,8213,8214,8215,8216,8217,8218,8219,8220,8221,8222,8223,8224,8225,8226,8227,8228,8229,8230,8231,8232,8233,8234,8235,8236,8237,8238,8239,8240,8241,8242,8243,8244,8245,8246,8247,8248,8249,8250,8251,8252,8253,8254,8255,8256,8257,8258,8259,8260,8261,8262,8263,8264,8265,8266,8267,8268,8269,8270,8271,8272,8273,8274,8275,8276,8277,8278,8279,8280,8281,8282,8283,8284,8285,8286,8287,8288,8289,8290,8291,8292,8293,8294,8295,8296,8297,8298,8299,8300,8301,8302,8303,8304,8305,8306,8307,8308,8309,8310,8311,8312,8313,8314,8315,8316,8317,8318,8319,8320,8321,8322,8323,8324,8325,8326,8327,8328,8329,8330,8331,8332,8333,8334,8335,8336,8337,8338,8339,8340,8341,8342,8343,8344,8345,8346,8347,8348,8349,8350,8351,8352,8353,8354,8355,8356,8357,8358,8359,8360,8361,8362,8363,8364,8365,8366,8367,8368,8369,8370,8371,8372,8373,8374,8375,8376,8377,8378,8379,8380,8381,8382,8383,8384,8385,8386,8387,8388,8389,8390,8391,8392,8393,8394,8395,8396,8397,8398,8399,8400,8401,8402,8403,8404,8405,8406,8407,8408,8409,8410,8411,8412,8413,8414,8415,8416,8417,8418,8419,8420,8421,8422,8423,8424,8425,8426,8427,8428,8429,8430,8431,8432,8433,8434,8435,8436,8437,8438,8439,8440,8441,8442,8443,8444,8445,8446,8447,8448,8449,8450,8451,8452,8453,8454,8455,8456,8457,8458,8459,8460,8461,8462,8463,8464,8465,8466,8467,8468,8469,8470,8471,8472,8473,8474,8475,8476,8477,8478,8479,8480,8481,8482,8483,8484,8485,8486,8487,8488,8489,8490,8491,8492,8493,8494,8495,8496,8497,8498,8499,8500,8501,8502,8503,8504,8505,8506,8507,8508,8509,8510,8511,8512,8513,8514,8515,8516,8517,8518,8519,8520,8521,8522,8523,8524,8525,8526,8527,8528,8529,8530,8531,8532,8533,8534,8535,8536,8537,8538,8539,8540,8541,8542,8543,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,8554,8555,8556,8557,8558,8559,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,8570,8571,8572,8573,8574,8575,8576,8577,8578,8579,8580,8581,8582,8583,8584,8585,8586,8587,8588,8589,8590,8591,8592,8593,8594,8595,8596,8597,8598,8599,8600,8601,8602,8603,8604,8605,8606,8607,8608,8609,8610,8611,8612,8613,8614,8615,8616,8617,8618,8619,8620,8621,8622,8623,8624,8625,8626,8627,8628,8629,8630,8631,8632,8633,8634,8635,8636,8637,8638,8639,8640,8641,8642,8643,8644,8645,8646,8647,8648,8649,8650,8651,8652,8653,8654,8655,8656,8657,8658,8659,8660,8661,8662,8663,8664,8665,8666,8667,8668,8669,8670,8671,8672,8673,8674,8675,8676,8677,8678,8679,8680,8681,8682,8683,8684,8685,8686,8687,8688,8689,8690,8691,8692,8693,8694,8695,8696,8697,8698,8699,8700,8701,8702,8703,8704,8705, u=0) )  //
   22 : macro deltaUZero18(u)on(8705,8706,8707,8708,8709,8710,8711,8712,8713,8714,8715,8716,8717,8718,8719,8720,8721,8722,8723,8724,8725,8726,8727,8728,8729,8730,8731,8732,8733,8734,8735,8736,8737,8738,8739,8740,8741,8742,8743,8744,8745,8746,8747,8748,8749,8750,8751,8752,8753,8754,8755,8756,8757,8758,8759,8760,8761,8762,8763,8764,8765,8766,8767,8768,8769,8770,8771,8772,8773,8774,8775,8776,8777,8778,8779,8780,8781,8782,8783,8784,8785,8786,8787,8788,8789,8790,8791,8792,8793,8794,8795,8796,8797,8798,8799,8800,8801,8802,8803,8804,8805,8806,8807,8808,8809,8810,8811,8812,8813,8814,8815,8816,8817,8818,8819,8820,8821,8822,8823,8824,8825,8826,8827,8828,8829,8830,8831,8832,8833,8834,8835,8836,8837,8838,8839,8840,8841,8842,8843,8844,8845,8846,8847,8848,8849,8850,8851,8852,8853,8854,8855,8856,8857,8858,8859,8860,8861,8862,8863,8864,8865,8866,8867,8868,8869,8870,8871,8872,8873,8874,8875,8876,8877,8878,8879,8880,8881,8882,8883,8884,8885,8886,8887,8888,8889,8890,8891,8892,8893,8894,8895,8896,8897,8898,8899,8900,8901,8902,8903,8904,8905,8906,8907,8908,8909,8910,8911,8912,8913,8914,8915,8916,8917,8918,8919,8920,8921,8922,8923,8924,8925,8926,8927,8928,8929,8930,8931,8932,8933,8934,8935,8936,8937,8938,8939,8940,8941,8942,8943,8944,8945,8946,8947,8948,8949,8950,8951,8952,8953,8954,8955,8956,8957,8958,8959,8960,8961,8962,8963,8964,8965,8966,8967,8968,8969,8970,8971,8972,8973,8974,8975,8976,8977,8978,8979,8980,8981,8982,8983,8984,8985,8986,8987,8988,8989,8990,8991,8992,8993,8994,8995,8996,8997,8998,8999,9000,9001,9002,9003,9004,9005,9006,9007,9008,9009,9010,9011,9012,9013,9014,9015,9016,9017,9018,9019,9020,9021,9022,9023,9024,9025,9026,9027,9028,9029,9030,9031,9032,9033,9034,9035,9036,9037,9038,9039,9040,9041,9042,9043,9044,9045,9046,9047,9048,9049,9050,9051,9052,9053,9054,9055,9056,9057,9058,9059,9060,9061,9062,9063,9064,9065,9066,9067,9068,9069,9070,9071,9072,9073,9074,9075,9076,9077,9078,9079,9080,9081,9082,9083,9084,9085,9086,9087,9088,9089,9090,9091,9092,9093,9094,9095,9096,9097,9098,9099,9100,9101,9102,9103,9104,9105,9106,9107,9108,9109,9110,9111,9112,9113,9114,9115,9116,9117,9118,9119,9120,9121,9122,9123,9124,9125,9126,9127,9128,9129,9130,9131,9132,9133,9134,9135,9136,9137,9138,9139,9140,9141,9142,9143,9144,9145,9146,9147,9148,9149,9150,9151,9152,9153,9154,9155,9156,9157,9158,9159,9160,9161,9162,9163,9164,9165,9166,9167,9168,9169,9170,9171,9172,9173,9174,9175,9176,9177,9178,9179,9180,9181,9182,9183,9184,9185,9186,9187,9188,9189,9190,9191,9192,9193,9194,9195,9196,9197,9198,9199,9200,9201,9202,9203,9204,9205,9206,9207,9208,9209,9210,9211,9212,9213,9214,9215,9216,9217, u=0) )  //
   23 : macro deltaUZero19(u)on(9217,9218,9219,9220,9221,9222,9223,9224,9225,9226,9227,9228,9229,9230,9231,9232,9233,9234,9235,9236,9237,9238,9239,9240,9241,9242,9243,9244,9245,9246,9247,9248,9249,9250,9251,9252,9253,9254,9255,9256,9257,9258,9259,9260,9261,9262,9263,9264,9265,9266,9267,9268,9269,9270,9271,9272,9273,9274,9275,9276,9277,9278,9279,9280,9281,9282,9283,9284,9285,9286,9287,9288,9289,9290,9291,9292,9293,9294,9295,9296,9297,9298,9299,9300,9301,9302,9303,9304,9305,9306,9307,9308,9309,9310,9311,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,9322,9323,9324,9325,9326,9327,9328,9329,9330,9331,9332,9333,9334,9335,9336,9337,9338,9339,9340,9341,9342,9343,9344,9345,9346,9347,9348,9349,9350,9351,9352,9353,9354,9355,9356,9357,9358,9359,9360,9361,9362,9363,9364,9365,9366,9367,9368,9369,9370,9371,9372,9373,9374,9375,9376,9377,9378,9379,9380,9381,9382,9383,9384,9385,9386,9387,9388,9389,9390,9391,9392,9393,9394,9395,9396,9397,9398,9399,9400,9401,9402,9403,9404,9405,9406,9407,9408,9409,9410,9411,9412,9413,9414,9415,9416,9417,9418,9419,9420,9421,9422,9423,9424,9425,9426,9427,9428,9429,9430,9431,9432,9433,9434,9435,9436,9437,9438,9439,9440,9441,9442,9443,9444,9445,9446,9447,9448,9449,9450,9451,9452,9453,9454,9455,9456,9457,9458,9459,9460,9461,9462,9463,9464,9465,9466,9467,9468,9469,9470,9471,9472,9473,9474,9475,9476,9477,9478,9479,9480,9481,9482,9483,9484,9485,9486,9487,9488,9489,9490,9491,9492,9493,9494,9495,9496,9497,9498,9499,9500,9501,9502,9503,9504,9505,9506,9507,9508,9509,9510,9511,9512,9513,9514,9515,9516,9517,9518,9519,9520,9521,9522,9523,9524,9525,9526,9527,9528,9529,9530,9531,9532,9533,9534,9535,9536,9537,9538,9539,9540,9541,9542,9543,9544,9545,9546,9547,9548,9549,9550,9551,9552,9553,9554,9555,9556,9557,9558,9559,9560,9561,9562,9563,9564,9565,9566,9567,9568,9569,9570,9571,9572,9573,9574,9575,9576,9577,9578,9579,9580,9581,9582,9583,9584,9585,9586,9587,9588,9589,9590,9591,9592,9593,9594,9595,9596,9597,9598,9599,9600,9601,9602,9603,9604,9605,9606,9607,9608,9609,9610,9611,9612,9613,9614,9615,9616,9617,9618,9619,9620,9621,9622,9623,9624,9625,9626,9627,9628,9629,9630,9631,9632,9633,9634,9635,9636,9637,9638,9639,9640,9641,9642,9643,9644,9645,9646,9647,9648,9649,9650,9651,9652,9653,9654,9655,9656,9657,9658,9659,9660,9661,9662,9663,9664,9665,9666,9667,9668,9669,9670,9671,9672,9673,9674,9675,9676,9677,9678,9679,9680,9681,9682,9683,9684,9685,9686,9687,9688,9689,9690,9691,9692,9693,9694,9695,9696,9697,9698,9699,9700,9701,9702,9703,9704,9705,9706,9707,9708,9709,9710,9711,9712,9713,9714,9715,9716,9717,9718,9719,9720,9721,9722,9723,9724,9725,9726,9727,9728,9729, u=0) )  //
   24 : macro deltaUZero20(u)on(9729,9730,9731,9732,9733,9734,9735,9736,9737,9738,9739,9740,9741,9742,9743,9744,9745,9746,9747,9748,9749,9750,9751,9752,9753,9754,9755,9756,9757,9758,9759,9760,9761,9762,9763,9764,9765,9766,9767,9768,9769,9770,9771,9772,9773,9774,9775,9776,9777,9778,9779,9780,9781,9782,9783,9784,9785,9786,9787,9788,9789,9790,9791,9792,9793,9794,9795,9796,9797,9798,9799,9800,9801,9802,9803,9804,9805,9806,9807,9808,9809,9810,9811,9812,9813,9814,9815,9816,9817,9818,9819,9820,9821,9822,9823,9824,9825,9826,9827,9828,9829,9830,9831,9832,9833,9834,9835,9836,9837,9838,9839,9840,9841,9842,9843,9844,9845,9846,9847,9848,9849,9850,9851,9852,9853,9854,9855,9856,9857,9858,9859,9860,9861,9862,9863,9864,9865,9866,9867,9868,9869,9870,9871,9872,9873,9874,9875,9876,9877,9878,9879,9880,9881,9882,9883,9884,9885,9886,9887,9888,9889,9890,9891,9892,9893,9894,9895,9896,9897,9898,9899,9900,9901,9902,9903,9904,9905,9906,9907,9908,9909,9910,9911,9912,9913,9914,9915,9916,9917,9918,9919,9920,9921,9922,9923,9924,9925,9926,9927,9928,9929,9930,9931,9932,9933,9934,9935,9936,9937,9938,9939,9940,9941,9942,9943,9944,9945,9946,9947,9948,9949,9950,9951,9952,9953,9954,9955,9956,9957,9958,9959,9960,9961,9962,9963,9964,9965,9966,9967,9968,9969,9970,9971,9972,9973,9974,9975,9976,9977,9978,9979,9980,9981,9982,9983,9984,9985,9986,9987,9988,9989,9990,9991,9992,9993,9994,9995,9996,9997,9998,9999,10000,10001,10002,10003,10004,10005,10006,10007,10008,10009,10010,10011,10012,10013,10014,10015,10016,10017,10018,10019,10020,10021,10022,10023,10024,10025,10026,10027,10028,10029,10030,10031,10032,10033,10034,10035,10036,10037,10038,10039,10040,10041,10042,10043,10044,10045,10046,10047,10048,10049,10050,10051,10052,10053,10054,10055,10056,10057,10058,10059,10060,10061,10062,10063,10064,10065,10066,10067,10068,10069,10070,10071,10072,10073,10074,10075,10076,10077,10078,10079,10080,10081,10082,10083,10084,10085,10086,10087,10088,10089,10090,10091,10092,10093,10094,10095,10096,10097,10098,10099,10100,10101,10102,10103,10104,10105,10106,10107,10108,10109,10110,10111,10112,10113,10114,10115,10116,10117,10118,10119,10120,10121,10122,10123,10124,10125,10126,10127,10128,10129,10130,10131,10132,10133,10134,10135,10136,10137,10138,10139,10140,10141,10142,10143,10144,10145,10146,10147,10148,10149,10150,10151,10152,10153,10154,10155,10156,10157,10158,10159,10160,10161,10162,10163,10164,10165,10166,10167,10168,10169,10170,10171,10172,10173,10174,10175,10176,10177,10178,10179,10180,10181,10182,10183,10184,10185,10186,10187,10188,10189,10190,10191,10192,10193,10194,10195,10196,10197,10198,10199,10200,10201,10202,10203,10204,10205,10206,10207,10208,10209,10210,10211,10212,10213,10214,10215,10216,10217,10218,10219,10220,10221,10222,10223,10224,10225,10226,10227,10228,10229,10230,10231,10232,10233,10234,10235,10236,10237,10238,10239,10240,10241, u=0) )  //
   25 : macro deltaUZero21(u)on(10241,10242,10243,10244,10245,10246,10247,10248,10249,10250,10251,10252,10253,10254,10255,10256,10257,10258,10259,10260,10261,10262,10263,10264,10265,10266,10267,10268,10269,10270,10271,10272,10273,10274,10275,10276,10277,10278,10279,10280,10281,10282,10283,10284,10285,10286,10287,10288,10289,10290,10291,10292,10293,10294,10295,10296,10297,10298,10299,10300,10301,10302,10303,10304,10305,10306,10307,10308,10309,10310,10311,10312,10313,10314,10315,10316,10317,10318,10319,10320,10321,10322,10323,10324,10325,10326,10327,10328,10329,10330,10331,10332,10333,10334,10335,10336,10337,10338,10339,10340,10341,10342,10343,10344,10345,10346,10347,10348,10349,10350,10351,10352,10353,10354,10355,10356,10357,10358,10359,10360,10361,10362,10363,10364,10365,10366,10367,10368,10369,10370,10371,10372,10373,10374,10375,10376,10377,10378,10379,10380,10381,10382,10383,10384,10385,10386,10387,10388,10389,10390,10391,10392,10393,10394,10395,10396,10397,10398,10399,10400,10401,10402,10403,10404,10405,10406,10407,10408,10409,10410,10411,10412,10413,10414,10415,10416,10417,10418,10419,10420,10421,10422,10423,10424,10425,10426,10427,10428,10429,10430,10431,10432,10433,10434,10435,10436,10437,10438,10439,10440,10441,10442,10443,10444,10445,10446,10447,10448,10449,10450,10451,10452,10453,10454,10455,10456,10457,10458,10459,10460,10461,10462,10463,10464,10465,10466,10467,10468,10469,10470,10471,10472,10473,10474,10475,10476,10477,10478,10479,10480,10481,10482,10483,10484,10485,10486,10487,10488,10489,10490,10491,10492,10493,10494,10495,10496,10497,10498,10499,10500,10501,10502,10503,10504,10505,10506,10507,10508,10509,10510,10511,10512,10513,10514,10515,10516,10517,10518,10519,10520,10521,10522,10523,10524,10525,10526,10527,10528,10529,10530,10531,10532,10533,10534,10535,10536,10537,10538,10539,10540,10541,10542,10543,10544,10545,10546,10547,10548,10549,10550,10551,10552,10553,10554,10555,10556,10557,10558,10559,10560,10561,10562,10563,10564,10565,10566,10567,10568,10569,10570,10571,10572,10573,10574,10575,10576,10577,10578,10579,10580,10581,10582,10583,10584,10585,10586,10587,10588,10589,10590,10591,10592,10593,10594,10595,10596,10597,10598,10599,10600,10601,10602,10603,10604,10605,10606,10607,10608,10609,10610,10611,10612,10613,10614,10615,10616,10617,10618,10619,10620,10621,10622,10623,10624,10625,10626,10627,10628,10629,10630,10631,10632,10633,10634,10635,10636,10637,10638,10639,10640,10641,10642,10643,10644,10645,10646,10647,10648,10649,10650,10651,10652,10653,10654,10655,10656,10657,10658,10659,10660,10661,10662,10663,10664,10665,10666,10667,10668,10669,10670,10671,10672,10673,10674,10675,10676,10677,10678,10679,10680,10681,10682,10683,10684,10685,10686,10687,10688,10689,10690,10691,10692,10693,10694,10695,10696,10697,10698,10699,10700,10701,10702,10703,10704,10705,10706,10707,10708,10709,10710,10711,10712,10713,10714,10715,10716,10717,10718,10719,10720,10721,10722,10723,10724,10725,10726,10727,10728,10729,10730,10731,10732,10733,10734,10735,10736,10737,10738,10739,10740,10741,10742,10743,10744,10745,10746,10747,10748,10749,10750,10751,10752,10753, u=0) )  //
   26 : macro deltaUZero22(u)on(10753,10754,10755,10756,10757,10758,10759,10760,10761,10762,10763,10764,10765,10766,10767,10768,10769,10770,10771,10772,10773,10774,10775,10776,10777,10778,10779,10780,10781,10782,10783,10784,10785,10786,10787,10788,10789,10790,10791,10792,10793,10794,10795,10796,10797,10798,10799,10800,10801,10802,10803,10804,10805,10806,10807,10808,10809,10810,10811,10812,10813,10814,10815,10816,10817,10818,10819,10820,10821,10822,10823,10824,10825,10826,10827,10828,10829,10830,10831,10832,10833,10834,10835,10836,10837,10838,10839,10840,10841,10842,10843,10844,10845,10846,10847,10848,10849,10850,10851,10852,10853,10854,10855,10856,10857,10858,10859,10860,10861,10862,10863,10864,10865,10866,10867,10868,10869,10870,10871,10872,10873,10874,10875,10876,10877,10878,10879,10880,10881,10882,10883,10884,10885,10886,10887,10888,10889,10890,10891,10892,10893,10894,10895,10896,10897,10898,10899,10900,10901,10902,10903,10904,10905,10906,10907,10908,10909,10910,10911,10912,10913,10914,10915,10916,10917,10918,10919,10920,10921,10922,10923,10924,10925,10926,10927,10928,10929,10930,10931,10932,10933,10934,10935,10936,10937,10938,10939,10940,10941,10942,10943,10944,10945,10946,10947,10948,10949,10950,10951,10952,10953,10954,10955,10956,10957,10958,10959,10960,10961,10962,10963,10964,10965,10966,10967,10968,10969,10970,10971,10972,10973,10974,10975,10976,10977,10978,10979,10980,10981,10982,10983,10984,10985,10986,10987,10988,10989,10990,10991,10992,10993,10994,10995,10996,10997,10998,10999,11000,11001,11002,11003,11004,11005,11006,11007,11008,11009,11010,11011,11012,11013,11014,11015,11016,11017,11018,11019,11020,11021,11022,11023,11024,11025,11026,11027,11028,11029,11030,11031,11032,11033,11034,11035,11036,11037,11038,11039,11040,11041,11042,11043,11044,11045,11046,11047,11048,11049,11050,11051,11052,11053,11054,11055,11056,11057,11058,11059,11060,11061,11062,11063,11064,11065,11066,11067,11068,11069,11070,11071,11072,11073,11074,11075,11076,11077,11078,11079,11080,11081,11082,11083,11084,11085,11086,11087,11088,11089,11090,11091,11092,11093,11094,11095,11096,11097,11098,11099,11100,11101,11102,11103,11104,11105,11106,11107,11108,11109,11110,11111,11112,11113,11114,11115,11116,11117,11118,11119,11120,11121,11122,11123,11124,11125,11126,11127,11128,11129,11130,11131,11132,11133,11134,11135,11136,11137,11138,11139,11140,11141,11142,11143,11144,11145,11146,11147,11148,11149,11150,11151,11152,11153,11154,11155,11156,11157,11158,11159,11160,11161,11162,11163,11164,11165,11166,11167,11168,11169,11170,11171,11172,11173,11174,11175,11176,11177,11178,11179,11180,11181,11182,11183,11184,11185,11186,11187,11188,11189,11190,11191,11192,11193,11194,11195,11196,11197,11198,11199,11200,11201,11202,11203,11204,11205,11206,11207,11208,11209,11210,11211,11212,11213,11214,11215,11216,11217,11218,11219,11220,11221,11222,11223,11224,11225,11226,11227,11228,11229,11230,11231,11232,11233,11234,11235,11236,11237,11238,11239,11240,11241,11242,11243,11244,11245,11246,11247,11248,11249,11250,11251,11252,11253,11254,11255,11256,11257,11258,11259,11260,11261,11262,11263,11264,11265, u=0) )  //
   27 : macro deltaUZero23(u)on(11265,11266,11267,11268,11269,11270,11271,11272,11273,11274,11275,11276,11277,11278,11279,11280,11281,11282,11283,11284,11285,11286,11287,11288,11289,11290,11291,11292,11293,11294,11295,11296,11297,11298,11299,11300,11301,11302,11303,11304,11305,11306,11307,11308,11309,11310,11311,11312,11313,11314,11315,11316,11317,11318,11319,11320,11321,11322,11323,11324,11325,11326,11327,11328,11329,11330,11331,11332,11333,11334,11335,11336,11337,11338,11339,11340,11341,11342,11343,11344,11345,11346,11347,11348,11349,11350,11351,11352,11353,11354,11355,11356,11357,11358,11359,11360,11361,11362,11363,11364,11365,11366,11367,11368,11369,11370,11371,11372,11373,11374,11375,11376,11377,11378,11379,11380,11381,11382,11383,11384,11385,11386,11387,11388,11389,11390,11391,11392,11393,11394,11395,11396,11397,11398,11399,11400,11401,11402,11403,11404,11405,11406,11407,11408,11409,11410,11411,11412,11413,11414,11415,11416,11417,11418,11419,11420,11421,11422,11423,11424,11425,11426,11427,11428,11429,11430,11431,11432,11433,11434,11435,11436,11437,11438,11439,11440,11441,11442,11443,11444,11445,11446,11447,11448,11449,11450,11451,11452,11453,11454,11455,11456,11457,11458,11459,11460,11461,11462,11463,11464,11465,11466,11467,11468,11469,11470,11471,11472,11473,11474,11475,11476,11477,11478,11479,11480,11481,11482,11483,11484,11485,11486,11487,11488,11489,11490,11491,11492,11493,11494,11495,11496,11497,11498,11499,11500,11501,11502,11503,11504,11505,11506,11507,11508,11509,11510,11511,11512,11513,11514,11515,11516,11517,11518,11519,11520,11521,11522,11523,11524,11525,11526,11527,11528,11529,11530,11531,11532,11533,11534,11535,11536,11537,11538,11539,11540,11541,11542,11543,11544,11545,11546,11547,11548,11549,11550,11551,11552,11553,11554,11555,11556,11557,11558,11559,11560,11561,11562,11563,11564,11565,11566,11567,11568,11569,11570,11571,11572,11573,11574,11575,11576,11577,11578,11579,11580,11581,11582,11583,11584,11585,11586,11587,11588,11589,11590,11591,11592,11593,11594,11595,11596,11597,11598,11599,11600,11601,11602,11603,11604,11605,11606,11607,11608,11609,11610,11611,11612,11613,11614,11615,11616,11617,11618,11619,11620,11621,11622,11623,11624,11625,11626,11627,11628,11629,11630,11631,11632,11633,11634,11635,11636,11637,11638,11639,11640,11641,11642,11643,11644,11645,11646,11647,11648,11649,11650,11651,11652,11653,11654,11655,11656,11657,11658,11659,11660,11661,11662,11663,11664,11665,11666,11667,11668,11669,11670,11671,11672,11673,11674,11675,11676,11677,11678,11679,11680,11681,11682,11683,11684,11685,11686,11687,11688,11689,11690,11691,11692,11693,11694,11695,11696,11697,11698,11699,11700,11701,11702,11703,11704,11705,11706,11707,11708,11709,11710,11711,11712,11713,11714,11715,11716,11717,11718,11719,11720,11721,11722,11723,11724,11725,11726,11727,11728,11729,11730,11731,11732,11733,11734,11735,11736,11737,11738,11739,11740,11741,11742,11743,11744,11745,11746,11747,11748,11749,11750,11751,11752,11753,11754,11755,11756,11757,11758,11759,11760,11761,11762,11763,11764,11765,11766,11767,11768,11769,11770,11771,11772,11773,11774,11775,11776,11777, u=0) )  //
   28 : macro deltaUZero24(u)on(11777,11778,11779,11780,11781,11782,11783,11784,11785,11786,11787,11788,11789,11790,11791,11792,11793,11794,11795,11796,11797,11798,11799,11800,11801,11802,11803,11804,11805,11806,11807,11808,11809,11810,11811,11812,11813,11814,11815,11816,11817,11818,11819,11820,11821,11822,11823,11824,11825,11826,11827,11828,11829,11830,11831,11832,11833,11834,11835,11836,11837,11838,11839,11840,11841,11842,11843,11844,11845,11846,11847,11848,11849,11850,11851,11852,11853,11854,11855,11856,11857,11858,11859,11860,11861,11862,11863,11864,11865,11866,11867,11868,11869,11870,11871,11872,11873,11874,11875,11876,11877,11878,11879,11880,11881,11882,11883,11884,11885,11886,11887,11888,11889,11890,11891,11892,11893,11894,11895,11896,11897,11898,11899,11900,11901,11902,11903,11904,11905,11906,11907,11908,11909,11910,11911,11912,11913,11914,11915,11916,11917,11918,11919,11920,11921,11922,11923,11924,11925,11926,11927,11928,11929,11930,11931,11932,11933,11934,11935,11936,11937,11938,11939,11940,11941,11942,11943,11944,11945,11946,11947,11948,11949,11950,11951,11952,11953,11954,11955,11956,11957,11958,11959,11960,11961,11962,11963,11964,11965,11966,11967,11968,11969,11970,11971,11972,11973,11974,11975,11976,11977,11978,11979,11980,11981,11982,11983,11984,11985,11986,11987,11988,11989,11990,11991,11992,11993,11994,11995,11996,11997,11998,11999,12000,12001,12002,12003,12004,12005,12006,12007,12008,12009,12010,12011,12012,12013,12014,12015,12016,12017,12018,12019,12020,12021,12022,12023,12024,12025,12026,12027,12028,12029,12030,12031,12032,12033,12034,12035,12036,12037,12038,12039,12040,12041,12042,12043,12044,12045,12046,12047,12048,12049,12050,12051,12052,12053,12054,12055,12056,12057,12058,12059,12060,12061,12062,12063,12064,12065,12066,12067,12068,12069,12070,12071,12072,12073,12074,12075,12076,12077,12078,12079,12080,12081,12082,12083,12084,12085,12086,12087,12088,12089,12090,12091,12092,12093,12094,12095,12096,12097,12098,12099,12100,12101,12102,12103,12104,12105,12106,12107,12108,12109,12110,12111,12112,12113,12114,12115,12116,12117,12118,12119,12120,12121,12122,12123,12124,12125,12126,12127,12128,12129,12130,12131,12132,12133,12134,12135,12136,12137,12138,12139,12140,12141,12142,12143,12144,12145,12146,12147,12148,12149,12150,12151,12152,12153,12154,12155,12156,12157,12158,12159,12160,12161,12162,12163,12164,12165,12166,12167,12168,12169,12170,12171,12172,12173,12174,12175,12176,12177,12178,12179,12180,12181,12182,12183,12184,12185,12186,12187,12188,12189,12190,12191,12192,12193,12194,12195,12196,12197,12198,12199,12200,12201,12202,12203,12204,12205,12206,12207,12208,12209,12210,12211,12212,12213,12214,12215,12216,12217,12218,12219,12220,12221,12222,12223,12224,12225,12226,12227,12228,12229,12230,12231,12232,12233,12234,12235,12236,12237,12238,12239,12240,12241,12242,12243,12244,12245,12246,12247,12248,12249,12250,12251,12252,12253,12254,12255,12256,12257,12258,12259,12260,12261,12262,12263,12264,12265,12266,12267,12268,12269,12270,12271,12272,12273,12274,12275,12276,12277,12278,12279,12280,12281,12282,12283,12284,12285,12286,12287,12288,12289, u=0) )  //
   29 : macro deltaUZero25(u)on(12289,12290,12291,12292,12293,12294,12295,12296,12297,12298,12299,12300,12301,12302,12303,12304,12305,12306,12307,12308,12309,12310,12311,12312,12313,12314,12315,12316,12317,12318,12319,12320,12321,12322,12323,12324,12325,12326,12327,12328,12329,12330,12331,12332,12333,12334,12335,12336,12337,12338,12339,12340,12341,12342,12343,12344,12345,12346,12347,12348,12349,12350,12351,12352,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,12436,12437,12438,12439,12440,12441,12442,12443,12444,12445,12446,12447,12448,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,12535,12536,12537,12538,12539,12540,12541,12542,12543,12544,12545,12546,12547,12548,12549,12550,12551,12552,12553,12554,12555,12556,12557,12558,12559,12560,12561,12562,12563,12564,12565,12566,12567,12568,12569,12570,12571,12572,12573,12574,12575,12576,12577,12578,12579,12580,12581,12582,12583,12584,12585,12586,12587,12588,12589,12590,12591,12592,12593,12594,12595,12596,12597,12598,12599,12600,12601,12602,12603,12604,12605,12606,12607,12608,12609,12610,12611,12612,12613,12614,12615,12616,12617,12618,12619,12620,12621,12622,12623,12624,12625,12626,12627,12628,12629,12630,12631,12632,12633,12634,12635,12636,12637,12638,12639,12640,12641,12642,12643,12644,12645,12646,12647,12648,12649,12650,12651,12652,12653,12654,12655,12656,12657,12658,12659,12660,12661,12662,12663,12664,12665,12666,12667,12668,12669,12670,12671,12672,12673,12674,12675,12676,12677,12678,12679,12680,12681,12682,12683,12684,12685,12686,12687,12688,12689,12690,12691,12692,12693,12694,12695,12696,12697,12698,12699,12700,12701,12702,12703,12704,12705,12706,12707,12708,12709,12710,12711,12712,12713,12714,12715,12716,12717,12718,12719,12720,12721,12722,12723,12724,12725,12726,12727,12728,12729,12730,12731,12732,12733,12734,12735,12736,12737,12738,12739,12740,12741,12742,12743,12744,12745,12746,12747,12748,12749,12750,12751,12752,12753,12754,12755,12756,12757,12758,12759,12760,12761,12762,12763,12764,12765,12766,12767,12768,12769,12770,12771,12772,12773,12774,12775,12776,12777,12778,12779,12780,12781,12782,12783,12784,12785,12786,12787,12788,12789,12790,12791,12792,12793,12794,12795,12796,12797,12798,12799,12800,12801, u=0) )  //
   30 : macro deltaUZero26(u)on(12801,12802,12803,12804,12805,12806,12807,12808,12809,12810,12811,12812,12813,12814,12815,12816,12817,12818,12819,12820,12821,12822,12823,12824,12825,12826,12827,12828,12829,12830,12831,12832,12833,12834,12835,12836,12837,12838,12839,12840,12841,12842,12843,12844,12845,12846,12847,12848,12849,12850,12851,12852,12853,12854,12855,12856,12857,12858,12859,12860,12861,12862,12863,12864,12865,12866,12867,12868,12869,12870,12871,12872,12873,12874,12875,12876,12877,12878,12879,12880,12881,12882,12883,12884,12885,12886,12887,12888,12889,12890,12891,12892,12893,12894,12895,12896,12897,12898,12899,12900,12901,12902,12903,12904,12905,12906,12907,12908,12909,12910,12911,12912,12913,12914,12915,12916,12917,12918,12919,12920,12921,12922,12923,12924,12925,12926,12927,12928,12929,12930,12931,12932,12933,12934,12935,12936,12937,12938,12939,12940,12941,12942,12943,12944,12945,12946,12947,12948,12949,12950,12951,12952,12953,12954,12955,12956,12957,12958,12959,12960,12961,12962,12963,12964,12965,12966,12967,12968,12969,12970,12971,12972,12973,12974,12975,12976,12977,12978,12979,12980,12981,12982,12983,12984,12985,12986,12987,12988,12989,12990,12991,12992,12993,12994,12995,12996,12997,12998,12999,13000,13001,13002,13003,13004,13005,13006,13007,13008,13009,13010,13011,13012,13013,13014,13015,13016,13017,13018,13019,13020,13021,13022,13023,13024,13025,13026,13027,13028,13029,13030,13031,13032,13033,13034,13035,13036,13037,13038,13039,13040,13041,13042,13043,13044,13045,13046,13047,13048,13049,13050,13051,13052,13053,13054,13055,13056,13057,13058,13059,13060,13061,13062,13063,13064,13065,13066,13067,13068,13069,13070,13071,13072,13073,13074,13075,13076,13077,13078,13079,13080,13081,13082,13083,13084,13085,13086,13087,13088,13089,13090,13091,13092,13093,13094,13095,13096,13097,13098,13099,13100,13101,13102,13103,13104,13105,13106,13107,13108,13109,13110,13111,13112,13113,13114,13115,13116,13117,13118,13119,13120,13121,13122,13123,13124,13125,13126,13127,13128,13129,13130,13131,13132,13133,13134,13135,13136,13137,13138,13139,13140,13141,13142,13143,13144,13145,13146,13147,13148,13149,13150,13151,13152,13153,13154,13155,13156,13157,13158,13159,13160,13161,13162,13163,13164,13165,13166,13167,13168,13169,13170,13171,13172,13173,13174,13175,13176,13177,13178,13179,13180,13181,13182,13183,13184,13185,13186,13187,13188,13189,13190,13191,13192,13193,13194,13195,13196,13197,13198,13199,13200,13201,13202,13203,13204,13205,13206,13207,13208,13209,13210,13211,13212,13213,13214,13215,13216,13217,13218,13219,13220,13221,13222,13223,13224,13225,13226,13227,13228,13229,13230,13231,13232,13233,13234,13235,13236,13237,13238,13239,13240,13241,13242,13243,13244,13245,13246,13247,13248,13249,13250,13251,13252,13253,13254,13255,13256,13257,13258,13259,13260,13261,13262,13263,13264,13265,13266,13267,13268,13269,13270,13271,13272,13273,13274,13275,13276,13277,13278,13279,13280,13281,13282,13283,13284,13285,13286,13287,13288,13289,13290,13291,13292,13293,13294,13295,13296,13297,13298,13299,13300,13301,13302,13303,13304,13305,13306,13307,13308,13309,13310,13311,13312,13313, u=0) )  //
   31 : macro deltaUZero27(u)on(13313,13314,13315,13316,13317,13318,13319,13320,13321,13322,13323,13324,13325,13326,13327,13328,13329,13330,13331,13332,13333,13334,13335,13336,13337,13338,13339,13340,13341,13342,13343,13344,13345,13346,13347,13348,13349,13350,13351,13352,13353,13354,13355,13356,13357,13358,13359,13360,13361,13362,13363,13364,13365,13366,13367,13368,13369,13370,13371,13372,13373,13374,13375,13376,13377,13378,13379,13380,13381,13382,13383,13384,13385,13386,13387,13388,13389,13390,13391,13392,13393,13394,13395,13396,13397,13398,13399,13400,13401,13402,13403,13404,13405,13406,13407,13408,13409,13410,13411,13412,13413,13414,13415,13416,13417,13418,13419,13420,13421,13422,13423,13424,13425,13426,13427,13428,13429,13430,13431,13432,13433,13434,13435,13436,13437,13438,13439,13440,13441,13442,13443,13444,13445,13446,13447,13448,13449,13450,13451,13452,13453,13454,13455,13456,13457,13458,13459,13460,13461,13462,13463,13464,13465,13466,13467,13468,13469,13470,13471,13472,13473,13474,13475,13476,13477,13478,13479,13480,13481,13482,13483,13484,13485,13486,13487,13488,13489,13490,13491,13492,13493,13494,13495,13496,13497,13498,13499,13500,13501,13502,13503,13504,13505,13506,13507,13508,13509,13510,13511,13512,13513,13514,13515,13516,13517,13518,13519,13520,13521,13522,13523,13524,13525,13526,13527,13528,13529,13530,13531,13532,13533,13534,13535,13536,13537,13538,13539,13540,13541,13542,13543,13544,13545,13546,13547,13548,13549,13550,13551,13552,13553,13554,13555,13556,13557,13558,13559,13560,13561,13562,13563,13564,13565,13566,13567,13568,13569,13570,13571,13572,13573,13574,13575,13576,13577,13578,13579,13580,13581,13582,13583,13584,13585,13586,13587,13588,13589,13590,13591,13592,13593,13594,13595,13596,13597,13598,13599,13600,13601,13602,13603,13604,13605,13606,13607,13608,13609,13610,13611,13612,13613,13614,13615,13616,13617,13618,13619,13620,13621,13622,13623,13624,13625,13626,13627,13628,13629,13630,13631,13632,13633,13634,13635,13636,13637,13638,13639,13640,13641,13642,13643,13644,13645,13646,13647,13648,13649,13650,13651,13652,13653,13654,13655,13656,13657,13658,13659,13660,13661,13662,13663,13664,13665,13666,13667,13668,13669,13670,13671,13672,13673,13674,13675,13676,13677,13678,13679,13680,13681,13682,13683,13684,13685,13686,13687,13688,13689,13690,13691,13692,13693,13694,13695,13696,13697,13698,13699,13700,13701,13702,13703,13704,13705,13706,13707,13708,13709,13710,13711,13712,13713,13714,13715,13716,13717,13718,13719,13720,13721,13722,13723,13724,13725,13726,13727,13728,13729,13730,13731,13732,13733,13734,13735,13736,13737,13738,13739,13740,13741,13742,13743,13744,13745,13746,13747,13748,13749,13750,13751,13752,13753,13754,13755,13756,13757,13758,13759,13760,13761,13762,13763,13764,13765,13766,13767,13768,13769,13770,13771,13772,13773,13774,13775,13776,13777,13778,13779,13780,13781,13782,13783,13784,13785,13786,13787,13788,13789,13790,13791,13792,13793,13794,13795,13796,13797,13798,13799,13800,13801,13802,13803,13804,13805,13806,13807,13808,13809,13810,13811,13812,13813,13814,13815,13816,13817,13818,13819,13820,13821,13822,13823,13824,13825, u=0) )  //
   32 : macro deltaUZero28(u)on(13825,13826,13827,13828,13829,13830,13831,13832,13833,13834,13835,13836,13837,13838,13839,13840,13841,13842,13843,13844,13845,13846,13847,13848,13849,13850,13851,13852,13853,13854,13855,13856,13857,13858,13859,13860,13861,13862,13863,13864,13865,13866,13867,13868,13869,13870,13871,13872,13873,13874,13875,13876,13877,13878,13879,13880,13881,13882,13883,13884,13885,13886,13887,13888,13889,13890,13891,13892,13893,13894,13895,13896,13897,13898,13899,13900,13901,13902,13903,13904,13905,13906,13907,13908,13909,13910,13911,13912,13913,13914,13915,13916,13917,13918,13919,13920,13921,13922,13923,13924,13925,13926,13927,13928,13929,13930,13931,13932,13933,13934,13935,13936,13937,13938,13939,13940,13941,13942,13943,13944,13945,13946,13947,13948,13949,13950,13951,13952,13953,13954,13955,13956,13957,13958,13959,13960,13961,13962,13963,13964,13965,13966,13967,13968,13969,13970,13971,13972,13973,13974,13975,13976,13977,13978,13979,13980,13981,13982,13983,13984,13985,13986,13987,13988,13989,13990,13991,13992,13993,13994,13995,13996,13997,13998,13999,14000,14001,14002,14003,14004,14005,14006,14007,14008,14009,14010,14011,14012,14013,14014,14015,14016,14017,14018,14019,14020,14021,14022,14023,14024,14025,14026,14027,14028,14029,14030,14031,14032,14033,14034,14035,14036,14037,14038,14039,14040,14041,14042,14043,14044,14045,14046,14047,14048,14049,14050,14051,14052,14053,14054,14055,14056,14057,14058,14059,14060,14061,14062,14063,14064,14065,14066,14067,14068,14069,14070,14071,14072,14073,14074,14075,14076,14077,14078,14079,14080,14081,14082,14083,14084,14085,14086,14087,14088,14089,14090,14091,14092,14093,14094,14095,14096,14097,14098,14099,14100,14101,14102,14103,14104,14105,14106,14107,14108,14109,14110,14111,14112,14113,14114,14115,14116,14117,14118,14119,14120,14121,14122,14123,14124,14125,14126,14127,14128,14129,14130,14131,14132,14133,14134,14135,14136,14137,14138,14139,14140,14141,14142,14143,14144,14145,14146,14147,14148,14149,14150,14151,14152,14153,14154,14155,14156,14157,14158,14159,14160,14161,14162,14163,14164,14165,14166,14167,14168,14169,14170,14171,14172,14173,14174,14175,14176,14177,14178,14179,14180,14181,14182,14183,14184,14185,14186,14187,14188,14189,14190,14191,14192,14193,14194,14195,14196,14197,14198,14199,14200,14201,14202,14203,14204,14205,14206,14207,14208,14209,14210,14211,14212,14213,14214,14215,14216,14217,14218,14219,14220,14221,14222,14223,14224,14225,14226,14227,14228,14229,14230,14231,14232,14233,14234,14235,14236,14237,14238,14239,14240,14241,14242,14243,14244,14245,14246,14247,14248,14249,14250,14251,14252,14253,14254,14255,14256,14257,14258,14259,14260,14261,14262,14263,14264,14265,14266,14267,14268,14269,14270,14271,14272,14273,14274,14275,14276,14277,14278,14279,14280,14281,14282,14283,14284,14285,14286,14287,14288,14289,14290,14291,14292,14293,14294,14295,14296,14297,14298,14299,14300,14301,14302,14303,14304,14305,14306,14307,14308,14309,14310,14311,14312,14313,14314,14315,14316,14317,14318,14319,14320,14321,14322,14323,14324,14325,14326,14327,14328,14329,14330,14331,14332,14333,14334,14335,14336,14337, u=0) )  //
   33 : macro deltaUZero29(u)on(14337,14338,14339,14340,14341,14342,14343,14344,14345,14346,14347,14348,14349,14350,14351,14352,14353,14354,14355,14356,14357,14358,14359,14360,14361,14362,14363,14364,14365,14366,14367,14368,14369,14370,14371,14372,14373,14374,14375,14376,14377,14378,14379,14380,14381,14382,14383,14384,14385,14386,14387,14388,14389,14390,14391,14392,14393,14394,14395,14396,14397,14398,14399,14400,14401,14402,14403,14404,14405,14406,14407,14408,14409,14410,14411,14412,14413,14414,14415,14416,14417,14418,14419,14420,14421,14422,14423,14424,14425,14426,14427,14428,14429,14430,14431,14432,14433,14434,14435,14436,14437,14438,14439,14440,14441,14442,14443,14444,14445,14446,14447,14448,14449,14450,14451,14452,14453,14454,14455,14456,14457,14458,14459,14460,14461,14462,14463,14464,14465,14466,14467,14468,14469,14470,14471,14472,14473,14474,14475,14476,14477,14478,14479,14480,14481,14482,14483,14484,14485,14486,14487,14488,14489,14490,14491,14492,14493,14494,14495,14496,14497,14498,14499,14500,14501,14502,14503,14504,14505,14506,14507,14508,14509,14510,14511,14512,14513,14514,14515,14516,14517,14518,14519,14520,14521,14522,14523,14524,14525,14526,14527,14528,14529,14530,14531,14532,14533,14534,14535,14536,14537,14538,14539,14540,14541,14542,14543,14544,14545,14546,14547,14548,14549,14550,14551,14552,14553,14554,14555,14556,14557,14558,14559,14560,14561,14562,14563,14564,14565,14566,14567,14568,14569,14570,14571,14572,14573,14574,14575,14576,14577,14578,14579,14580,14581,14582,14583,14584,14585,14586,14587,14588,14589,14590,14591,14592,14593,14594,14595,14596,14597,14598,14599,14600,14601,14602,14603,14604,14605,14606,14607,14608,14609,14610,14611,14612,14613,14614,14615,14616,14617,14618,14619,14620,14621,14622,14623,14624,14625,14626,14627,14628,14629,14630,14631,14632,14633,14634,14635,14636,14637,14638,14639,14640,14641,14642,14643,14644,14645,14646,14647,14648,14649,14650,14651,14652,14653,14654,14655,14656,14657,14658,14659,14660,14661,14662,14663,14664,14665,14666,14667,14668,14669,14670,14671,14672,14673,14674,14675,14676,14677,14678,14679,14680,14681,14682,14683,14684,14685,14686,14687,14688,14689,14690,14691,14692,14693,14694,14695,14696,14697,14698,14699,14700,14701,14702,14703,14704,14705,14706,14707,14708,14709,14710,14711,14712,14713,14714,14715,14716,14717,14718,14719,14720,14721,14722,14723,14724,14725,14726,14727,14728,14729,14730,14731,14732,14733,14734,14735,14736,14737,14738,14739,14740,14741,14742,14743,14744,14745,14746,14747,14748,14749,14750,14751,14752,14753,14754,14755,14756,14757,14758,14759,14760,14761,14762,14763,14764,14765,14766,14767,14768,14769,14770,14771,14772,14773,14774,14775,14776,14777,14778,14779,14780,14781,14782,14783,14784,14785,14786,14787,14788,14789,14790,14791,14792,14793,14794,14795,14796,14797,14798,14799,14800,14801,14802,14803,14804,14805,14806,14807,14808,14809,14810,14811,14812,14813,14814,14815,14816,14817,14818,14819,14820,14821,14822,14823,14824,14825,14826,14827,14828,14829,14830,14831,14832,14833,14834,14835,14836,14837,14838,14839,14840,14841,14842,14843,14844,14845,14846,14847,14848,14849, u=0) )  //
   34 : macro deltaUZero30(u)on(14849,14850,14851,14852,14853,14854,14855,14856,14857,14858,14859,14860,14861,14862,14863,14864,14865,14866,14867,14868,14869,14870,14871,14872,14873,14874,14875,14876,14877,14878,14879,14880,14881,14882,14883,14884,14885,14886,14887,14888,14889,14890,14891,14892,14893,14894,14895,14896,14897,14898,14899,14900,14901,14902,14903,14904,14905,14906,14907,14908,14909,14910,14911,14912,14913,14914,14915,14916,14917,14918,14919,14920,14921,14922,14923,14924,14925,14926,14927,14928,14929,14930,14931,14932,14933,14934,14935,14936,14937,14938,14939,14940,14941,14942,14943,14944,14945,14946,14947,14948,14949,14950,14951,14952,14953,14954,14955,14956,14957,14958,14959,14960,14961,14962,14963,14964,14965,14966,14967,14968,14969,14970,14971,14972,14973,14974,14975,14976,14977,14978,14979,14980,14981,14982,14983,14984,14985,14986,14987,14988,14989,14990,14991,14992,14993,14994,14995,14996,14997,14998,14999,15000,15001,15002,15003,15004,15005,15006,15007,15008,15009,15010,15011,15012,15013,15014,15015,15016,15017,15018,15019,15020,15021,15022,15023,15024,15025,15026,15027,15028,15029,15030,15031,15032,15033,15034,15035,15036,15037,15038,15039,15040,15041,15042,15043,15044,15045,15046,15047,15048,15049,15050,15051,15052,15053,15054,15055,15056,15057,15058,15059,15060,15061,15062,15063,15064,15065,15066,15067,15068,15069,15070,15071,15072,15073,15074,15075,15076,15077,15078,15079,15080,15081,15082,15083,15084,15085,15086,15087,15088,15089,15090,15091,15092,15093,15094,15095,15096,15097,15098,15099,15100,15101,15102,15103,15104,15105,15106,15107,15108,15109,15110,15111,15112,15113,15114,15115,15116,15117,15118,15119,15120,15121,15122,15123,15124,15125,15126,15127,15128,15129,15130,15131,15132,15133,15134,15135,15136,15137,15138,15139,15140,15141,15142,15143,15144,15145,15146,15147,15148,15149,15150,15151,15152,15153,15154,15155,15156,15157,15158,15159,15160,15161,15162,15163,15164,15165,15166,15167,15168,15169,15170,15171,15172,15173,15174,15175,15176,15177,15178,15179,15180,15181,15182,15183,15184,15185,15186,15187,15188,15189,15190,15191,15192,15193,15194,15195,15196,15197,15198,15199,15200,15201,15202,15203,15204,15205,15206,15207,15208,15209,15210,15211,15212,15213,15214,15215,15216,15217,15218,15219,15220,15221,15222,15223,15224,15225,15226,15227,15228,15229,15230,15231,15232,15233,15234,15235,15236,15237,15238,15239,15240,15241,15242,15243,15244,15245,15246,15247,15248,15249,15250,15251,15252,15253,15254,15255,15256,15257,15258,15259,15260,15261,15262,15263,15264,15265,15266,15267,15268,15269,15270,15271,15272,15273,15274,15275,15276,15277,15278,15279,15280,15281,15282,15283,15284,15285,15286,15287,15288,15289,15290,15291,15292,15293,15294,15295,15296,15297,15298,15299,15300,15301,15302,15303,15304,15305,15306,15307,15308,15309,15310,15311,15312,15313,15314,15315,15316,15317,15318,15319,15320,15321,15322,15323,15324,15325,15326,15327,15328,15329,15330,15331,15332,15333,15334,15335,15336,15337,15338,15339,15340,15341,15342,15343,15344,15345,15346,15347,15348,15349,15350,15351,15352,15353,15354,15355,15356,15357,15358,15359,15360,15361, u=0) )  //
   35 : macro deltaUZero31(u)on(15361,15362,15363,15364,15365,15366,15367,15368,15369,15370,15371,15372,15373,15374,15375,15376,15377,15378,15379,15380,15381,15382,15383,15384,15385,15386,15387,15388,15389,15390,15391,15392,15393,15394,15395,15396,15397,15398,15399,15400,15401,15402,15403,15404,15405,15406,15407,15408,15409,15410,15411,15412,15413,15414,15415,15416,15417,15418,15419,15420,15421,15422,15423,15424,15425,15426,15427,15428,15429,15430,15431,15432,15433,15434,15435,15436,15437,15438,15439,15440,15441,15442,15443,15444,15445,15446,15447,15448,15449,15450,15451,15452,15453,15454,15455,15456,15457,15458,15459,15460,15461,15462,15463,15464,15465,15466,15467,15468,15469,15470,15471,15472,15473,15474,15475,15476,15477,15478,15479,15480,15481,15482,15483,15484,15485,15486,15487,15488,15489,15490,15491,15492,15493,15494,15495,15496,15497,15498,15499,15500,15501,15502,15503,15504,15505,15506,15507,15508,15509,15510,15511,15512,15513,15514,15515,15516,15517,15518,15519,15520,15521,15522,15523,15524,15525,15526,15527,15528,15529,15530,15531,15532,15533,15534,15535,15536,15537,15538,15539,15540,15541,15542,15543,15544,15545,15546,15547,15548,15549,15550,15551,15552,15553,15554,15555,15556,15557,15558,15559,15560,15561,15562,15563,15564,15565,15566,15567,15568,15569,15570,15571,15572,15573,15574,15575,15576,15577,15578,15579,15580,15581,15582,15583,15584,15585,15586,15587,15588,15589,15590,15591,15592,15593,15594,15595,15596,15597,15598,15599,15600,15601,15602,15603,15604,15605,15606,15607,15608,15609,15610,15611,15612,15613,15614,15615,15616,15617,15618,15619,15620,15621,15622,15623,15624,15625,15626,15627,15628,15629,15630,15631,15632,15633,15634,15635,15636,15637,15638,15639,15640,15641,15642,15643,15644,15645,15646,15647,15648,15649,15650,15651,15652,15653,15654,15655,15656,15657,15658,15659,15660,15661,15662,15663,15664,15665,15666,15667,15668,15669,15670,15671,15672,15673,15674,15675,15676,15677,15678,15679,15680,15681,15682,15683,15684,15685,15686,15687,15688,15689,15690,15691,15692,15693,15694,15695,15696,15697,15698,15699,15700,15701,15702,15703,15704,15705,15706,15707,15708,15709,15710,15711,15712,15713,15714,15715,15716,15717,15718,15719,15720,15721,15722,15723,15724,15725,15726,15727,15728,15729,15730,15731,15732,15733,15734,15735,15736,15737,15738,15739,15740,15741,15742,15743,15744,15745,15746,15747,15748,15749,15750,15751,15752,15753,15754,15755,15756,15757,15758,15759,15760,15761,15762,15763,15764,15765,15766,15767,15768,15769,15770,15771,15772,15773,15774,15775,15776,15777,15778,15779,15780,15781,15782,15783,15784,15785,15786,15787,15788,15789,15790,15791,15792,15793,15794,15795,15796,15797,15798,15799,15800,15801,15802,15803,15804,15805,15806,15807,15808,15809,15810,15811,15812,15813,15814,15815,15816,15817,15818,15819,15820,15821,15822,15823,15824,15825,15826,15827,15828,15829,15830,15831,15832,15833,15834,15835,15836,15837,15838,15839,15840,15841,15842,15843,15844,15845,15846,15847,15848,15849,15850,15851,15852,15853,15854,15855,15856,15857,15858,15859,15860,15861,15862,15863,15864,15865,15866,15867,15868,15869,15870,15871,15872,15873, u=0) )  //
   36 : macro deltaUZero32(u)on(15873,15874,15875,15876,15877,15878,15879,15880,15881,15882,15883,15884,15885,15886,15887,15888,15889,15890,15891,15892,15893,15894,15895,15896,15897,15898,15899,15900,15901,15902,15903,15904,15905,15906,15907,15908,15909,15910,15911,15912,15913,15914,15915,15916,15917,15918,15919,15920,15921,15922,15923,15924,15925,15926,15927,15928,15929,15930,15931,15932,15933,15934,15935,15936,15937,15938,15939,15940,15941,15942,15943,15944,15945,15946,15947,15948,15949,15950,15951,15952,15953,15954,15955,15956,15957,15958,15959,15960,15961,15962,15963,15964,15965,15966,15967,15968,15969,15970,15971,15972,15973,15974,15975,15976,15977,15978,15979,15980,15981,15982,15983,15984,15985,15986,15987,15988,15989,15990,15991,15992,15993,15994,15995,15996,15997,15998,15999,16000,16001,16002,16003,16004,16005,16006,16007,16008,16009,16010,16011,16012,16013,16014,16015,16016,16017,16018,16019,16020,16021,16022,16023,16024,16025,16026,16027,16028,16029,16030,16031,16032,16033,16034,16035,16036,16037,16038,16039,16040,16041,16042,16043,16044,16045,16046,16047,16048,16049,16050,16051,16052,16053,16054,16055,16056,16057,16058,16059,16060,16061,16062,16063,16064,16065,16066,16067,16068,16069,16070,16071,16072,16073,16074,16075,16076,16077,16078,16079,16080,16081,16082,16083,16084,16085,16086,16087,16088,16089,16090,16091,16092,16093,16094,16095,16096,16097,16098,16099,16100,16101,16102,16103,16104,16105,16106,16107,16108,16109,16110,16111,16112,16113,16114,16115,16116,16117,16118,16119,16120,16121,16122,16123,16124,16125,16126,16127,16128,16129,16130,16131,16132,16133,16134,16135,16136,16137,16138,16139,16140,16141,16142,16143,16144,16145,16146,16147,16148,16149,16150,16151,16152,16153,16154,16155,16156,16157,16158,16159,16160,16161,16162,16163,16164,16165,16166,16167,16168,16169,16170,16171,16172,16173,16174,16175,16176,16177,16178,16179,16180,16181,16182,16183,16184,16185,16186,16187,16188,16189,16190,16191,16192,16193,16194,16195,16196,16197,16198,16199,16200,16201,16202,16203,16204,16205,16206,16207,16208,16209,16210,16211,16212,16213,16214,16215,16216,16217,16218,16219,16220,16221,16222,16223,16224,16225,16226,16227,16228,16229,16230,16231,16232,16233,16234,16235,16236,16237,16238,16239,16240,16241,16242,16243,16244,16245,16246,16247,16248,16249,16250,16251,16252,16253,16254,16255,16256,16257,16258,16259,16260,16261,16262,16263,16264,16265,16266,16267,16268,16269,16270,16271,16272,16273,16274,16275,16276,16277,16278,16279,16280,16281,16282,16283,16284,16285,16286,16287,16288,16289,16290,16291,16292,16293,16294,16295,16296,16297,16298,16299,16300,16301,16302,16303,16304,16305,16306,16307,16308,16309,16310,16311,16312,16313,16314,16315,16316,16317,16318,16319,16320,16321,16322,16323,16324,16325,16326,16327,16328,16329,16330,16331,16332,16333,16334,16335,16336,16337,16338,16339,16340,16341,16342,16343,16344,16345,16346,16347,16348,16349,16350,16351,16352,16353,16354,16355,16356,16357,16358,16359,16360,16361,16362,16363,16364,16365,16366,16367,16368,16369,16370,16371,16372,16373,16374,16375,16376,16377,16378,16379,16380,16381,16382,16383,16384,16385, u=0) )  //
   37 : macro deltaUZero33(u)on(16385,16386,16387,16388,16389,16390, u=0) )  //
   38 : macro deltaUZero(u)deltaUZero1(u)+deltaUZero2(u)+deltaUZero3(u)+deltaUZero4(u)+deltaUZero5(u)+deltaUZero6(u)+deltaUZero7(u)+deltaUZero8(u)+deltaUZero9(u)+deltaUZero10(u)+deltaUZero11(u)+deltaUZero12(u)+deltaUZero13(u)+deltaUZero14(u)+deltaUZero15(u)+deltaUZero16(u)+deltaUZero17(u)+deltaUZero18(u)+deltaUZero19(u)+deltaUZero20(u)+deltaUZero21(u)+deltaUZero22(u)+deltaUZero23(u)+deltaUZero24(u)+deltaUZero25(u)+deltaUZero26(u)+deltaUZero27(u)+deltaUZero28(u)+deltaUZero29(u)+deltaUZero30(u)+deltaUZero31(u)+deltaUZero32(u)+deltaUZero33(u) )  //
   39 : 
   28 : 
   29 : macro fillA() /* A = Stiffness Matrix */ 
   30 # { /* Fill Stiffness Matrix A */
   31 #     varf a(u, v) = H1(u, v, Th) + deltaUZero(u);
   32 # 
   33 #     INFO("initiate structure for partitioning matrix")
   34 #     createMat(Th, A, Pk)
   35 # 
   36 #     INFO("fill stiffness matrix")
   37 #     A = a(Vh, Vh, tgv = -2);
   38 # 
   39 #     set(A, sparams = "-pc_type gamg -ksp_type cg -ksp_rtol "+ string(solverEps));
   40 #     /*set(A, sparams = "-pc_type hpddm -ksp_type gmres -ksp_rtol "+ string(solverEps));*/
   41 # 
   42 #     INFO("fill stiffness matrix done")
   43 # }//
   44 : 
   45 : macro fillWLl(theta)
   46 # {
   47 #     /* set none zero dirchlet condition */
   48 #     varf bndDirichlet(unused, v) = deltaUZero(unused) + on(theta + 7, unused = 1); 
   49 #     
   50 #     wh[] = bndDirichlet(0, Vh, tgv = -1); 
   51 # 
   52 #     W(INDC(theta)) = wh[];
   53 # 
   54 #     /* compute rhs of weak formulation */
   55 #     varf rhs(unused, v) = -H1(wh, v, Th) + deltaUZero(unused); 
   56 #     
   57 #     l = rhs(0, Vh, tgv = -1); 
   58 # 
   59 #     /* for computation of capacitance needed */
   60 #     varf lBndVarf(unused, v) = H1(wh, v, Th); 
   61 #     
   62 #     L(INDC(theta)) = lBndVarf(0, Vh, tgv = -1);
   63 # } )  //
   64 : 
   65 : macro solveU(theta) 
   66 # {
   67 #     real[int] temp = A^-1 * l;
   68 #     U(INDC(theta)) = temp;
   69 # } )  //
   70 : 
   71 : 
   72 : macro writeCap(theta1, theta2)
   73 # {
   74 #     real[int] temp = A * U(INDC(theta2));
   75 #     
   76 #     real U1U2 = A(U(INDC(theta1)), temp); real W1L2 = A(W(INDC(theta1)), L(INDC(theta2)));
   77 # 
   78 #     Cap[ theta2 - theta1 ] = 1.0 / (4 * pi) * (W1L2 - U1U2);
   79 # } )  //
   80 : 
   81 : //-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
   82 : // AUXILIARY FUNCTIONS
   83 : //-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
   84 : 
   85 : func bool writeOutArray( ofstream &file, real[int] &V ){
   86 :     int last = V.n;
   87 :     for [ i,v : V ] {
   88 :         file << v; 
   89 :         if( i == last-1 ) file << endl; else file << ","; 
   90 :     }
   91 :     return true;
   92 : }
   93 : 
   94 : macro initRecord(varName)
   95 #     string dataPath#varName = outputDir + "/" + Stringification( varName ) + "_" + outputName + ".log";
   96 #     ofstream streamLog#varName(dataPath#VarName);
   97 #     streamLog#varName.precision(16);
   98 #  )  //
   99 : 
  100 : macro recordVar(varName, var)
  101 # {
  102 #     ofstream streamLog#varName(dataPath#VarName);
  103 #     streamLog#varName.precision(16);
  104 #     writeOutArray(streamLog#varName, var);
  105 # } )  //
  106 : 
  107 : macro record 
  108 : {
  109 #     recordVar(cap, Cap);
  110 # }//
  111 : 
    9 : 
   10 : // --- FreeFEM ---
   11 : load "PETSc"
   12 : macro dimension()3//
   13 : macro partitioner()parmetis//
   14 : include "macro_ddm.idp"IFMACRO(!macroDDMidp)
    2 & macro macroDDMidp()1// EOM
include "getARGV.idp"
    3 & IFMACRO(!partitioner)
    4 & macro partitioner()metis// EOM
ENDIFMACRO
IFMACRO(partitioner,metis)
    5 & load "metis"
    6 & macro partitionerSeq(part, Th, size){ if(size <= 1) part = 0; else metisdual(part, Th, size); }// EOM
macro partitionerPar(part, Th, comm, size)broadcast(processor(0, comm), part)// EOM
ENDIFMACRO
IFMACRO(partitioner,scotch)
    7 & load "scotch"
    8 & macro partitionerSeq(part, Th, size){ if(size <= 1) part = 0; else scotch(part, Th, size); }// EOM
macro partitionerPar(part, Th, comm, size)broadcast(processor(0, comm), part)// EOM
ENDIFMACRO
IFMACRO(partitioner,parmetis)
    9 & load "parmetis"
   10 & macro partitionerSeq(part, Th, size)// EOM
macro partitionerPar(part, Th, comm, size)parmetis(part, Th, size, communicator = comm, worker = getARGV("-parmetis_worker", 1))// EOM
ENDIFMACRO
IFMACRO(!partitionerSeq)
   11 & cout << "The macro 'partitioner' must be set to 'metis', 'scotch', or 'parmetis'" << endl;
   12 & exit(1);
   13 & ENDIFMACRO
IFMACRO(dimension,2)
   14 & macro meshN()mesh// EOM             // two-dimensional problem
macro intN()int2d// EOM             // two-dimensional integral
macro intN1()int1d// EOM            // one-dimensional integral
macro readmeshN()readmesh// EOM     // two-dimensional problem
macro defVel(uP)[uP, uP#Y]// EOM    // two-dimensional velocity for convect/advect
ENDIFMACRO
IFMACRO(dimension,3)
   15 & load "msh3"
   16 & macro meshN()mesh3// EOM            // three-dimensional problem
macro intN()int3d// EOM             // three-dimensional integral
macro intN1()int2d// EOM            // two-dimensional integral
macro readmeshN()readmesh3// EOM    // three-dimensional problem
macro defVel(uP)[uP, uP#Y, uP#Z]// EOM // three-dimensional velocity for convect/advect
ENDIFMACRO
IFMACRO(dimension,3S)
   17 & load "msh3"
   18 & macro meshN()meshS// EOM            // three-dimensional surface problem
macro intN()int2d// EOM             // two-dimensional integral
macro intN1()int1d// EOM            // one-dimensional integral
macro intNxN()int2dx2d// EOM        // two-dimensional integral for BEM
ENDIFMACRO
IFMACRO(dimension,3L)
   19 & load "msh3"
   20 & macro meshN()meshL// EOM            // three-dimensional line problem
macro intN()int1d// EOM             // one-dimensional integral
macro intN1()int0d// EOM            // zero-dimensional integral
macro intNxN()int1dx1d// EOM        // one-dimensional integral for BEM
ENDIFMACRO

   21 & macro plotDmesh(Th, params)
   22 & if(!NoGraphicWindow || usedARGV("-fglut") != -1) {
   23 &     fespace PhPlotPrivate(Th, P0);
   24 &     PhPlotPrivate plt;
   25 &     if(Th.nt)
   26 &         plt[] = mpirank;
   27 & NewMacro defPlt#Th(uPrivate)uPrivate EndMacro
    plotMPI(Th, plt, P0, defPlt#Th, real, params)
   28 & }//
   29 & 
   30 & macro plotD(Th, uPrivate, params)
   31 & if(!NoGraphicWindow || usedARGV("-fglut") != -1) {
   32 &     fespace VhPlotPrivate(Th, P1);
   33 &     VhPlotPrivate plt;
   34 &     if(Th.nt)
   35 &         plt = uPrivate;
   36 & NewMacro defPlt#Th(vPrivate)vPrivate EndMacro
    plotMPI(Th, plt, P1, defPlt#Th, real, params)
   37 & }//
   38 & 
   39 & macro plotMPI(Th, uPrivate, Pk, def, K, params)
   40 & if(!NoGraphicWindow || usedARGV("-fglut") != -1) {
   41 & IFMACRO(!meshN)
   42 &     NewMacro meshN()mesh EndMacro
ENDIFMACRO
IFMACRO(!def)
   43 &     NewMacro def(i)i EndMacro
ENDIFMACRO
    meshN ThCurrent = Th;
   44 &     fespace XhPlotPrivate(ThCurrent, Pk);
   45 &     XhPlotPrivate<K> def(uSend);
   46 &     if(ThCurrent.nt)
   47 &         def(uSend) = uPrivate;
   48 &     if(mpirank == 0) {
   49 &         meshN[int] meshTab(mpisize);
   50 &         XhPlotPrivate<K>[int] def(uTab)(mpisize);
   51 &         if(ThCurrent.nt)
   52 &             uTab[0][] = uSend[];
   53 &         meshTab[0] = ThCurrent;
   54 &         mpiRequest[int] rq(mpisize - 1);
   55 &         for(int i = 1; i < mpisize; ++i)
   56 &             Irecv(processor(i, mpiCommWorld, rq[i - 1]), meshTab[i]);
   57 &         mpiWaitAll(rq);
   58 &         for(int i = 1; i < mpisize; ++i) {
   59 &             ThCurrent = meshTab[i];
   60 &             if(ThCurrent.nt)
   61 &                 Irecv(processor(i, mpiCommWorld, rq[i - 1]), uTab[i][]);
   62 &         }
   63 &         mpiWaitAll(rq);
   64 &         plot(def(uTab), params);
   65 &     }
   66 &     else {
   67 &         mpiRequest[int] rq(2);
   68 &         Isend(processor(0, rq[0]), ThCurrent);
   69 &         if(ThCurrent.nt)
   70 &             Isend(processor(0, rq[1]), uSend[]);
   71 &         mpiWaitAll(rq);
   72 &     }
   73 & }// EOM

   74 & macro partitionPrivate(meshName, borderName, globalName, PhGlobalPrivate, VhGlobalPrivate, part, rank, size, s, overlap, level, prolongation, D, P, intersection, comm, fakeInterface, PkPart, defPart, initPart, bs) {
   75 &     int backupSM = searchMethod;
   76 &     searchMethod = 1;
   77 &     assert(level >= 1);
   78 & IFMACRO(!privateCreatePartition)
   79 & IFMACRO(!privateCreateMat)
   80 &     intersection.resize(1);
   81 &     intersection[0].resize(0);
   82 &     PhGlobalPrivate supp;
   83 &     VhGlobalPrivate suppSmooth;
   84 &     {
   85 &         int constant = rank;
   86 &         for[i, value : supp[]] value = abs(part[][i] - constant) < 0.1;
   87 &         AddLayers(globalName, supp[], 2 * overlap, suppSmooth[]);
   88 &         int[int] n2o;
   89 &         meshN neighbors;
   90 &         bool connected = false;
   91 &         for[i, value : suppSmooth[]] if(abs(value - 0.5) < 0.5) connected = true;
   92 &         if(!connected)
   93 &             n2o.resize(0);
   94 &         else
            neighbors = trunc(globalName, suppSmooth > 0.001 && suppSmooth < 0.999, new2old = n2o);
   95 &         int[int] partOverlap(n2o.n);
   96 &         for[i, value : n2o] partOverlap[i] = part[][value];
   97 &         Unique(partOverlap, intersection[0], remove = constant);
   98 &         if(s > 1 && level <= 1) {
   99 &             globalName = trunc(globalName, suppSmooth > 0.001, split = s);
  100 &             supp = abs(part - constant) < 0.1;
  101 &             suppSmooth = 0;
  102 &             AddLayers(globalName, supp[], 2 * overlap, suppSmooth[]);
  103 &         }
  104 &     }
  105 &     int[int] n2oGlobalPrivate, n2oNeighbor;
  106 & IFMACRO(!privateDmesh#CartesianPartitioning)
  107 &     globalName = trunc(globalName, suppSmooth > 0.001, label = 9999, new2old = n2oGlobalPrivate);
  108 & ENDIFMACRO
    real eps = globalName.measure;
  109 &     real[int] epsTab(intersection[0].n);
  110 &     mpiRequest[int] rq(2 * intersection[0].n);
  111 &     if(mpiSize(comm) == size) {
  112 &         for(int j = 0; j < intersection[0].n; ++j)
  113 &             Irecv(processor(intersection[0][j], comm, rq[j]), epsTab[j]);
  114 &         for(int j = 0; j < intersection[0].n; ++j)
  115 &             Isend(processor(intersection[0][j], comm, rq[intersection[0].n + j]), eps);
  116 &     }
  117 &     else
        epsTab = 1.0e+30;
  118 &     suppSmooth = suppSmooth;
  119 & IFMACRO(!privateDmesh#N2O)
  120 &     meshName[level - 1] = trunc(globalName, suppSmooth > 0.501, label = fakeInterface, new2old = n2oNeighbor);
  121 & IFMACRO(privateDmesh#CartesianPartitioning)
  122 &     real[int] bb(2 * dimension);
  123 &     boundingbox(meshName[level - 1], bb);
  124 &     meshName[level - 1] = trunc(globalName, x > bb[0] && x < bb[1] && y > bb[2] && y < bb[3]
  125 & IFMACRO(dimension,3)
  126 &                                                                                              && z > bb[4] && z < bb[5]
  127 & ENDIFMACRO
                                                                                                                      , label = fakeInterface);
  128 &     globalName = meshName[level - 1];
  129 &     n2oNeighbor = 0:globalName.nt - 1;
  130 & ENDIFMACRO
ENDIFMACRO
IFMACRO(privateDmesh#N2O)
  131 &     meshName[level - 1] = trunc(globalName, suppSmooth > 0.501, label = fakeInterface, new2old = privateDmesh#N2O);
  132 & IFMACRO(privateDmesh#CartesianPartitioning)
  133 &     real[int] bb(2 * dimension);
  134 &     boundingbox(meshName[level - 1], bb);
  135 &     meshName[level - 1] = trunc(globalName, x > bb[0] && x < bb[1] && y > bb[2] && y < bb[3]
  136 & IFMACRO(dimension,3)
  137 &                                                                                              && z > bb[4] && z < bb[5]
  138 & ENDIFMACRO
                                                                                                                      , label = fakeInterface, new2old = privateDmesh#N2O);
  139 &     globalName = meshName[level - 1];
  140 &     n2oNeighbor = 0:globalName.nt - 1;
  141 & ENDIFMACRO
IFMACRO(!privateDmesh#CartesianPartitioning)
  142 &     {
  143 &         int[int] backup = privateDmesh#N2O;
  144 &         int[int] new = n2oGlobalPrivate(privateDmesh#N2O);
  145 &         privateDmesh#N2O.resize(new.n);
  146 &         privateDmesh#N2O = new;
  147 &         n2oNeighbor.resize(backup.n);
  148 &         n2oNeighbor = backup;
  149 &     }
  150 & ENDIFMACRO
ENDIFMACRO
    if(level > 1) {
  151 &         prolongation.resize(level - 1);
  152 &         if(s > 1) {
  153 &             meshN globalNameRefined = globalName;
  154 &             for(int i = level - 1; i > 0; --i) {
  155 &                 globalNameRefined = trunc(globalNameRefined, 1, split = s);
  156 &                 meshName[i - 1] = trunc(globalNameRefined, suppSmooth > 0.501, label = fakeInterface);
  157 &                 fespace WhLocalRefinedPrivate(meshName[i - 1], P);
  158 &                 fespace WhLocalCoarsePrivate(meshName[i], P);
  159 &                 prolongation[i - 1] = interpolate(WhLocalRefinedPrivate, WhLocalCoarsePrivate);
  160 &             }
  161 &         }
  162 &         else
            for(int i = level - 1; i > 0; --i)
  163 &                 meshName[i - 1] = meshName[i];
  164 &     }
  165 &     if(!removeZeros && (fakeInterface != -111111 || overlap != 1)) {
  166 &         if(suppSmooth[].min < 0.501) {
  167 &             supp = supp;
  168 &             borderName[level - 1] = trunc(globalName, (suppSmooth > (overlap - 0.999) / real(2 * overlap)) && (suppSmooth < 0.501), label = (abs(fakeInterface) + 1) * 100);
  169 &             if(s > 1)
  170 &                 for(int i = level - 2; i >= 0; --i) {
  171 &                     borderName[i] = trunc(borderName[i + 1], 1, split = s, label = (abs(fakeInterface) + 1) * 100);
  172 &                     meshN tempRefined = meshName[i] + borderName[i];
  173 &                     fespace PhRefinedPrivate(tempRefined, P0);
  174 &                     PhRefinedPrivate suppRefined = supp;
  175 &                     fespace VhBorderRefinedPrivate(borderName[i], P1);
  176 &                     VhBorderRefinedPrivate suppBorder = suppRefined;
  177 &                     borderName[i] = trunc(borderName[i], suppBorder > 0.01);
  178 &                 }
  179 &             else
                for(int i = level - 2; i >= 0; --i)
  180 &                     borderName[i] = borderName[i + 1];
  181 &         }
  182 &     }
  183 &     fespace VhLocalPrivate(meshName[level - 1], P1);
  184 & IFMACRO(!privateDmesh#meshName)
  185 & NewMacro privateDmesh#meshName#intersectionDef()partitionIntersectionTab EndMacro
    real[int][int] partitionIntersectionTab(1 + intersection[0].n);
  186 &     privateDmesh#meshName#intersectionDef[0].resize(intersection[0].n);
  187 & ENDIFMACRO
IFMACRO(privateBuildDmesh)
  188 &     privateDmesh#meshName#intersectionDef.resize(1 + intersection[0].n);
  189 &     privateDmesh#meshName#intersectionDef[0].resize(intersection[0].n);
  190 & ENDIFMACRO
    VhLocalPrivate khi = max(2 * suppSmooth - 1.0, 0.0);
  191 &     VhLocalPrivate sum;
  192 &     sum[] = khi[];
  193 &     VhGlobalPrivate phi;
  194 &     if(n2oGlobalPrivate.n == globalName.nt && s == 1) {
  195 &         real[int] restrictionPart(n2oGlobalPrivate.n);
  196 &         restrictionPart = part[](n2oGlobalPrivate);
  197 &         part = 0.0;
  198 &         part[] = restrictionPart;
  199 &     }
  200 &     else
        part = part;
  201 &     n2oGlobalPrivate.resize(0);
  202 &     int numberIntersection = 0;
  203 &     {
  204 &         int[int] restriction = restrict(VhLocalPrivate, VhGlobalPrivate, n2oNeighbor);
  205 &         n2oNeighbor.resize(0);
  206 &         mpiWaitAll(rq);
  207 &         for(int i = 0; i < intersection[0].n; ++i) {
  208 &             PhGlobalPrivate suppPartition = abs(part - intersection[0][i]) < 0.1;
  209 &             AddLayers(globalName, suppPartition[], overlap, phi[]);
  210 &             if(min(eps, epsTab[i]) > 0.0) {
  211 &                 if(intN(globalName, qforder = 2)(phi) / min(eps, epsTab[i]) > 1.0e-10) {
  212 &                     privateDmesh#meshName#intersectionDef[1 + numberIntersection].resize(restriction.n);
  213 &                     privateDmesh#meshName#intersectionDef[1 + numberIntersection] = phi[](restriction);
  214 &                     if(!trueRestrict)
  215 &                         sum[] += privateDmesh#meshName#intersectionDef[1 + numberIntersection];
  216 &                     intersection[0][numberIntersection++] = intersection[0][i];
  217 &                 }
  218 &             }
  219 &         }
  220 &     }
  221 &     if(numberIntersection != intersection[0].n) {
  222 &         intersection[0].resize(numberIntersection);
  223 &         privateDmesh#meshName#intersectionDef.resize(1 + numberIntersection);
  224 &     }
  225 &     intersection.resize(1 + level * numberIntersection);
  226 & ENDIFMACRO
IFMACRO(privateCreateMat)
  227 &     assert(level == 1);
  228 &     int numberIntersection = privateDmesh#meshName#intersectionDef.n - 1;
  229 &     intersection.resize(1 + level * numberIntersection);
  230 &     intersection[0].resize(numberIntersection);
  231 &     intersection[0] = lround(privateDmesh#meshName#intersectionDef[0]);
  232 &     fespace VhLocalPrivate(meshName[level - 1], P1);
  233 & IFMACRO(privateDmesh#N2O)
  234 & IFMACRO(privateDmesh#Original)
  235 & IFMACRO(privateDmesh#Restriction)
  236 &     {
  237 &         fespace WhLocalPrivate(meshName[level - 1], P);
  238 &         fespace WhOriginalPrivate(privateDmesh#Original, P);
  239 &         privateDmesh#Restriction.resize(WhOriginalPrivate.ndof);
  240 &         privateDmesh#Restriction = restrict(WhLocalPrivate, WhOriginalPrivate, privateDmesh#N2O);
  241 &     }
  242 & ENDIFMACRO
ENDIFMACRO
ENDIFMACRO
ENDIFMACRO
IFMACRO(privateBuildDmesh)
  243 &     privateDmesh#meshName#intersectionDef[0].resize(numberIntersection);
  244 &     for[i, value : intersection[0]] privateDmesh#meshName#intersectionDef[0][i] = value;
  245 & ENDIFMACRO
    meshN[int] meshIntersection(numberIntersection);
  246 & IFMACRO(!privateCreateMat)
  247 &     int[int][int] n2oIntersection(0);
  248 &     if(trueRestrict && mpiSize(comm) == size && removeZeros)
  249 &         n2oIntersection.resize(numberIntersection);
  250 & ENDIFMACRO
    for(int j = 0; j < (s == 1 ? 1 : level); ++j) {
  251 &         for(int i = 0; i < numberIntersection; ++i) {
  252 &             int[int] n2o;
  253 &             VhLocalPrivate partitionIntersection;
  254 &             partitionIntersection[] = privateDmesh#meshName#intersectionDef[1 + i];
  255 &             meshIntersection[i] = trunc(meshName[j], partitionIntersection > 1.0e-6, new2old = n2o, label = 9999);
  256 & IFMACRO(privateDmesh#CartesianPartitioning)
  257 &             real[int] bb(2 * dimension);
  258 &             boundingbox(meshIntersection[i], bb);
  259 &             meshIntersection[i] = trunc(meshName[j], x > bb[0] && x < bb[1] && y > bb[2] && y < bb[3]
  260 & IFMACRO(dimension,3)
  261 &                                                                                                       && z > bb[4] && z < bb[5]
  262 & ENDIFMACRO
                                                                                                                               , new2old = n2o, label = 9999);
  263 & ENDIFMACRO
IFMACRO(!privateCreateMat)
  264 &             if(j == 0 && trueRestrict && mpiSize(comm) == size && removeZeros) {
  265 &                 n2oIntersection[i].resize(n2o.n);
  266 &                 n2oIntersection[i] = n2o;
  267 &             }
  268 &             if(!removeZeros)
  269 & ENDIFMACRO
            {
  270 & IFMACRO(vectorialfe)
  271 &                 fespace singleComponentWhPrivate(meshName[j], vectorialfe);
  272 &                 fespace WhIntersectionPrivate(meshIntersection[i], vectorialfe);
  273 & ENDIFMACRO
IFMACRO(!vectorialfe)
  274 &                 fespace singleComponentWhPrivate(meshName[j], P);
  275 &                 fespace WhIntersectionPrivate(meshIntersection[i], P);
  276 & ENDIFMACRO
                intersection[1 + i + j * numberIntersection] = restrict(WhIntersectionPrivate, singleComponentWhPrivate, n2o);
  277 &             }
  278 &         }
  279 &     }
  280 & IFMACRO(!privateCreateMat)
  281 &     if(s == 1 && level > 1 && !removeZeros)
  282 &         for(int j = 1; j < level; ++j)
  283 &             for(int i = 0; i < numberIntersection; ++i) {
  284 &                 intersection[1 + i + j * numberIntersection].resize(intersection[1 + i].n);
  285 &                 intersection[1 + i + j * numberIntersection] = intersection[1 + i];
  286 &             }
  287 &     for(int i = 0; i < level - 1; ++i) {
  288 &         fespace VhRefinedPrivate(meshName[i], P1);
  289 &         fespace PhRefinedPrivate(meshName[i], P0);
  290 &         PhRefinedPrivate partRefined = part;
  291 &         PhRefinedPrivate supp = abs(partRefined - rank) < 0.1;
  292 &         varf vSupp(uPrivate, vPrivate) = intN(meshName[i], qforder = 1)(supp * vPrivate);
  293 &         VhRefinedPrivate khiL;
  294 &         khiL[] = vSupp(0, VhRefinedPrivate);
  295 &         khiL = khiL > 0.0;
  296 &         VhRefinedPrivate sum = khiL;
  297 &         for(int j = 0; j < numberIntersection; ++j) {
  298 &             supp = abs(partRefined - intersection[0][j]) < 0.1;
  299 &             VhRefinedPrivate phiL;
  300 &             phiL[] = vSupp(0, VhRefinedPrivate);
  301 &             phiL = phiL > 0.0;
  302 &             sum[] += phiL[];
  303 &         }
  304 &         khiL[] ./= sum[];
  305 &         fespace WhRefinedPrivate(meshName[i], PkPart);
  306 &         WhRefinedPrivate defPart(func2vec);
  307 &         defPart(func2vec) = initPart(khiL);
  308 &         D[i].resize(WhRefinedPrivate.ndof);
  309 &         D[i] = func2vec[];
  310 &     }
  311 &     if(!trueRestrict)
  312 &         khi[] ./= sum[];
  313 &     else {
  314 &         khi = abs(part - rank) < 0.1;
  315 &         VhLocalPrivate sigma = part;
  316 &         for(int i = 0; i < numberIntersection; ++i) {
  317 &             if(rank < intersection[0][i]) {
  318 &                 for[j, value : khi[]] {
  319 &                     if(value > 0.9 && abs(sigma[][j] - intersection[0][i]) < 0.1)
  320 &                         value = 0.0;
  321 &                 }
  322 &             }
  323 &         }
  324 &     }
  325 &     if(trueRestrict && mpiSize(comm) == size && removeZeros) {
  326 &         assert(level == 1);
  327 &         meshN ThIntersection;
  328 &         mpiRequest[int] rq(2 * numberIntersection);
  329 &         int[int] skip(0);
  330 &         {
  331 &             fespace PhIntersectionPrivate(ThIntersection, P0);
  332 &             PhIntersectionPrivate[int] recv(numberIntersection);
  333 &             PhIntersectionPrivate[int] send(numberIntersection);
  334 &             for(int i = 0; i < numberIntersection; ++i) {
  335 &                 ThIntersection = meshIntersection[i];
  336 &                 Irecv(processor(intersection[0][i], comm, rq[i]), recv[i][]);
  337 &                 send[i] = khi;
  338 &                 Isend(processor(intersection[0][i], comm, rq[numberIntersection + i]), send[i][]);
  339 &             }
  340 &             real[int] tmpRemove(meshName[0].nt);
  341 &             int[int] n2oRemove;
  342 & IFMACRO(!privateDmesh#N2O)
  343 &             meshName[0] = trunc(meshName[0], khi > 1.0e-6, label = 9999, new2old = n2oRemove);
  344 & ENDIFMACRO
IFMACRO(privateDmesh#N2O)
  345 &             {
  346 &                 int[int] n2oFilter;
  347 &                 meshName[0] = trunc(meshName[0], khi > 1.0e-6, label = 9999, new2old = n2oRemove);
  348 &                 n2oFilter.resize(n2oRemove.n);
  349 &                 n2oFilter = privateDmesh#N2O(n2oRemove);
  350 &                 privateDmesh#N2O.resize(n2oFilter.n);
  351 &                 privateDmesh#N2O = n2oFilter;
  352 &             }
  353 & ENDIFMACRO
            khi = khi;
  354 &             fespace PhLocalPrivate(meshName[0], P0);
  355 &             for(int k = 0; k < 2 * numberIntersection; ++k) {
  356 &                 int i = mpiWaitAny(rq);
  357 &                 if(i < numberIntersection) {
  358 &                     ThIntersection = meshIntersection[i];
  359 &                     PhIntersectionPrivate intersection = send[i] > 1.0e-6 && recv[i] > 1.0e-6;
  360 &                     if(intersection[].l2 > 1.0e-6) {
  361 &                         tmpRemove = 0.0;
  362 &                         tmpRemove(n2oIntersection[i]) = intersection[];
  363 &                         PhLocalPrivate afterTrunc;
  364 &                         afterTrunc[] = tmpRemove(n2oRemove);
  365 &                         meshIntersection[i] = trunc(meshName[0], afterTrunc > 1.0e-6, label = 9999, new2old = n2oIntersection[i]);
  366 &                     }
  367 &                     else {
  368 &                         skip.resize(skip.n + 1);
  369 &                         skip[skip.n - 1] = i;
  370 &                     }
  371 &                 }
  372 &             }
  373 &         }
  374 &         skip.sort;
  375 &         real[int][int] recv(numberIntersection);
  376 &         real[int][int] send(numberIntersection);
  377 &         int j = 0;
  378 &         for(int i = 0; i < numberIntersection; ++i) {
  379 &             bool skipped = false;
  380 &             if(j < skip.n) {
  381 &                 if(skip[j] == i) {
  382 &                     ++j;
  383 &                     skipped = true;
  384 &                 }
  385 &             }
  386 &             if(!skipped) {
  387 &                 recv[i].resize(meshIntersection[i].nv);
  388 &                 Irecv(processor(intersection[0][i], comm, rq[i]), recv[i]);
  389 &                 fespace VhIntersectionPrivate(meshIntersection[i], P1);
  390 &                 int[int] restriction = restrict(VhIntersectionPrivate, VhLocalPrivate, n2oIntersection[i]);
  391 &                 send[i].resize(meshIntersection[i].nv);
  392 &                 send[i] = khi[](restriction);
  393 &                 Isend(processor(intersection[0][i], comm, rq[numberIntersection + i]), send[i]);
  394 &             }
  395 &         }
  396 &         mpiWaitAll(rq);
  397 &         intersection.resize(1 + numberIntersection - skip.n);
  398 &         j = 0;
  399 &         for(int i = 0; i < numberIntersection; ++i) {
  400 &             bool skipped = false;
  401 &             if(j < skip.n) {
  402 &                 if(skip[j] == i) {
  403 &                     ++j;
  404 &                     skipped = true;
  405 &                 }
  406 &             }
  407 &             if(!skipped) {
  408 & IFMACRO(vectorialfe)
  409 &                 fespace singleComponentWhPrivate(meshName[0], vectorialfe);
  410 &                 fespace WhIntersectionPrivate(meshIntersection[i], vectorialfe);
  411 & ENDIFMACRO
IFMACRO(!vectorialfe)
  412 &                 fespace singleComponentWhPrivate(meshName[0], P);
  413 &                 fespace WhIntersectionPrivate(meshIntersection[i], P);
  414 & ENDIFMACRO
                intersection[1 + i - j] = restrict(WhIntersectionPrivate, singleComponentWhPrivate, n2oIntersection[i]);
  415 &                 fespace VhIntersectionPrivate(meshIntersection[i], P1);
  416 &                 int[int] restriction = restrict(VhIntersectionPrivate, VhLocalPrivate, n2oIntersection[i]);
  417 &                 privateDmesh#meshName#intersectionDef[1 + i - j].resize(VhLocalPrivate.ndof);
  418 &                 privateDmesh#meshName#intersectionDef[1 + i - j] = 0.0;
  419 &                 privateDmesh#meshName#intersectionDef[1 + i - j](restriction) = recv[i];
  420 &                 intersection[0][i - j] = intersection[0][i];
  421 &             }
  422 &         }
  423 &         numberIntersection -= skip.n;
  424 &         intersection[0].resize(numberIntersection);
  425 &         privateDmesh#meshName#intersectionDef.resize(1 + numberIntersection);
  426 &         privateDmesh#meshName#intersectionDef[0].resize(numberIntersection);
  427 &         for[i, value : intersection[0]] privateDmesh#meshName#intersectionDef[0][i] = value;
  428 &         if(fakeInterface != -111111 || overlap != 1) {
  429 &             PhGlobalPrivate suppPartition = khi > 0.1;
  430 &             AddLayers(globalName, suppPartition[], 1, phi[]);
  431 &             borderName[0] = trunc(globalName, phi > 0.001 && phi < 0.501, label = (abs(fakeInterface) + 1) * 100);
  432 &         }
  433 &     }
  434 & ENDIFMACRO
IFMACRO(vectorialfe)
  435 &     if(bs > 1)
  436 &         for(int i = 0; i < intersection.n - 1; ++i) {
  437 &             int n = intersection[1 + i].n;
  438 &             intersection[1 + i].resize(n * bs);
  439 &             for(int j = n - 1; j != -1; --j)
  440 &                 for(int k = bs - 1; k != -1; --k)
  441 &                     intersection[1 + i][j * bs + k] = intersection[1 + i][j] * bs + k;
  442 &         }
  443 & ENDIFMACRO
ENDIFMACRO
IFMACRO(privateCreatePartition)
  444 &     fespace VhLocalPrivate(meshName[level - 1], P1);
  445 & IFMACRO(!privateCreateMat)
  446 &     VhLocalPrivate khi;
  447 & ENDIFMACRO
ENDIFMACRO
IFMACRO(privateCreateMat)
  448 &     VhLocalPrivate khi;
  449 &     khi[] = privateDmesh#meshName#khiDef[0];
  450 & ENDIFMACRO
    fespace WhPartPrivate(meshName[level - 1], PkPart);
  451 &     WhPartPrivate defPart(func2vec);
  452 &     D[level - 1].resize(WhPartPrivate.ndof);
  453 &     if((WhPartPrivate.ndof % meshName[level - 1].nt) == 0 && WhPartPrivate.ndof != meshName[level - 1].nv) {
  454 &         int constant = rank;
  455 & IFMACRO(privateCreateMat)
  456 &         fespace PhLocalPrivate(meshName[level - 1], P0);
  457 &         PhLocalPrivate partLocal;
  458 &         partLocal[] = privateDmesh#meshName#khiDef[1];
  459 &         defPart(func2vec) = initPart(abs(partLocal - constant) < 0.1);
  460 & ENDIFMACRO
IFMACRO(!privateCreateMat)
  461 &         defPart(func2vec) = initPart(abs(part - constant) < 0.1);
  462 & ENDIFMACRO
    }
  463 &     else if(WhPartPrivate.ndof == meshName[level - 1].nv && (WhPartPrivate.ndof % meshName[level - 1].nt) != 0)
  464 &         func2vec[] = khi[];
  465 &     else
        defPart(func2vec) = initPart(khi);
  466 &     D[level - 1] = func2vec[];
  467 & IFMACRO(privateDmesh#PostProcessD)
  468 &     privateDmesh#PostProcessD(D[level - 1]);
  469 & ENDIFMACRO
IFMACRO(!privateCreatePartition)
  470 & IFMACRO(!privateCreateMat)
  471 & IFMACRO(privateBuildDmesh)
  472 &     fespace PhLocalPrivate(meshName[level - 1], P0);
  473 &     PhLocalPrivate partLocal;
  474 &     partLocal = part;
  475 &     privateDmesh#meshName#khiDef[1].resize(partLocal[].n);
  476 &     privateDmesh#meshName#khiDef[1] = partLocal[];
  477 & ENDIFMACRO
ENDIFMACRO
ENDIFMACRO
    searchMethod = backupSM;
  478 & }// EOM

  479 & macro saveDmesh(ThName, name)
  480 & IFMACRO(privateDmesh#ThName)
  481 & {
  482 & IFMACRO(!ThName#Comm)
  483 & NewMacro ThName#Comm()mpiCommWorld EndMacro
ENDIFMACRO
IFMACRO(dimension,3)
  484 & savemesh(ThName, name + "_" + mpiRank(ThName#Comm) + "_" + mpiSize(ThName#Comm) + ".meshb");
  485 & ENDIFMACRO
IFMACRO(dimension,2)
  486 & savemesh(ThName, name + "_" + mpiRank(ThName#Comm) + "_" + mpiSize(ThName#Comm) + ".msh");
  487 & ENDIFMACRO
ofstream khi(name + "_" + mpiRank(ThName#Comm) + "_" + mpiSize(ThName#Comm) + ".khi");
  488 & khi << privateDmesh#ThName#khi << endl;
  489 & khi << privateDmesh#ThName#intersection << endl;
  490 & IFMACRO(ThName#N2O)
  491 & khi << ThName#N2O << endl;
  492 & ENDIFMACRO
}
  493 & ENDIFMACRO
IFMACRO(!privateDmesh#ThName)
  494 & assert(0);
  495 & ENDIFMACRO
EndMacro

  496 & macro loadDmesh(ThName, name)
  497 & IFMACRO(!privateDmesh#ThName)
  498 & NewMacro privateDmesh#ThName()privateDmesh#ThName EndMacro
NewMacro privateDmesh#ThName#khi()privateDmesh#ThName#khiDef EndMacro
NewMacro privateDmesh#ThName#intersection()privateDmesh#ThName#intersectionDef EndMacro
real[int][int] privateDmesh#ThName#khi(2);
  499 & real[int][int] privateDmesh#ThName#intersection;
  500 & ENDIFMACRO
{
  501 & IFMACRO(!ThName#Comm)
  502 & NewMacro ThName#Comm()mpiCommWorld EndMacro
ENDIFMACRO
IFMACRO(dimension,3)
  503 & ThName = readmesh3(name + "_" + mpiRank(ThName#Comm) + "_" + mpiSize(ThName#Comm) + ".meshb");
  504 & ENDIFMACRO
IFMACRO(dimension,2)
  505 & ThName = readmesh(name + "_" + mpiRank(ThName#Comm) + "_" + mpiSize(ThName#Comm) + ".msh");
  506 & ENDIFMACRO
privateDmesh#ThName#khi.resize(2);
  507 & privateDmesh#ThName#khi[0].resize(ThName.nv);
  508 & privateDmesh#ThName#khi[1].resize(ThName.nt);
  509 & if(mpiSize(ThName#Comm) > 1) {
  510 &     ifstream khi(name + "_" + mpiRank(ThName#Comm) + "_" + mpiSize(ThName#Comm) + ".khi");
  511 &     int m;
  512 &     khi >> m;
  513 &     assert(m == 2);
  514 &     khi >> privateDmesh#ThName#khi[0];
  515 &     khi >> privateDmesh#ThName#khi[1];
  516 &     khi >> m;
  517 &     privateDmesh#ThName#intersection.resize(m);
  518 &     for(int j = 0; j < m; ++j) {
  519 &         int n;
  520 &         khi >> n;
  521 &         privateDmesh#ThName#intersection[j].resize(n);
  522 &         for[i, value : privateDmesh#ThName#intersection[j]]
  523 &             khi >> value;
  524 &     }
  525 & IFMACRO(ThName#N2O)
  526 &     ThName#N2O.resize(ThName.nt);
  527 &     khi >> ThName#N2O;
  528 & ENDIFMACRO
}
  529 & else {
  530 &     privateDmesh#ThName#khi[0] = 1.0;
  531 &     privateDmesh#ThName#khi[1] = 1.0;
  532 & IFMACRO(ThName#N2O)
  533 &     ThName#N2O.resize(ThName.nt);
  534 &     ThName#N2O = 0:ThName.nt - 1;
  535 & ENDIFMACRO
}
  536 & }
  537 & EndMacro

  538 & macro buildDmesh(ThName)
  539 & IFMACRO(!privateDmesh#ThName)
  540 & NewMacro privateDmesh#ThName()privateDmesh#ThName EndMacro
NewMacro privateDmesh#ThName#khi()privateDmesh#ThName#khiDef EndMacro
NewMacro privateDmesh#ThName#intersection()privateDmesh#ThName#intersectionDef EndMacro
real[int][int] privateDmesh#ThName#khi(2);
  541 & real[int][int] privateDmesh#ThName#intersection;
  542 & ENDIFMACRO
{
  543 & IFMACRO(!meshN)
  544 & IFMACRO(dimension,3)
  545 & NewMacro meshN()mesh3 EndMacro     /* three-dimensional problem             */
  546 & NewMacro intN()int3d EndMacro      /* three-dimensional integral            */
  547 & ENDIFMACRO
IFMACRO(dimension,3S)
  548 & NewMacro meshN()meshS EndMacro     /* three-dimensional surface problem     */
  549 & NewMacro intN()int2d EndMacro      /* two-dimensional integral              */
  550 & ENDIFMACRO
IFMACRO(dimension,3L)
  551 & NewMacro meshN()meshL EndMacro     /* three-dimensional line problem        */
  552 & NewMacro intN()int1d EndMacro      /* one-dimensional integral              */
  553 & ENDIFMACRO
IFMACRO(!meshN)
  554 & NewMacro meshN()mesh EndMacro      /* two-dimensional problem               */
  555 & NewMacro intN()int2d EndMacro      /* two-dimensional integral              */
  556 & ENDIFMACRO
ENDIFMACRO
IFMACRO(!ThName#Comm)
  557 & NewMacro ThName#Comm()mpiCommWorld EndMacro
ENDIFMACRO
NewMacro privateBuildDmesh()1 EndMacro
int[int][int] intersection;
  558 & NewMacro privateDmesh#ThTab()privateDmesh#ThName EndMacro
NewMacro privateDmesh#ThTab#khi()privateDmesh#ThName#khiDef EndMacro
NewMacro privateDmesh#ThTab#intersection()privateDmesh#ThName#intersectionDef EndMacro
IFMACRO(ThName#N2O)
  559 & NewMacro privateDmesh#N2O()ThName#N2O EndMacro
IFMACRO(ThName#RefinementFactor)
  560 & exit(10); /* not currently implemented */
  561 & ENDIFMACRO
ENDIFMACRO
IFMACRO(ThName#UserPartitioning)
  562 & IFMACRO(ThName#RefinementFactor)
  563 & exit(11); /* not currently implemented */
  564 & ENDIFMACRO
buildWithPartitioning(ThName, ThName#UserPartitioning, 1, intersection, privateDmesh#ThName#khi[0], P1, ThName#Comm);
  565 & ENDIFMACRO
IFMACRO(ThName#Periodicity)
  566 & IFMACRO(ThName#RefinementFactor)
  567 & exit(12); /* not currently implemented */
  568 & ENDIFMACRO
buildPeriodic(ThName, 1, intersection, privateDmesh#ThName#khi[0], P1, ThName#Comm, ThName#Periodicity);
  569 & ENDIFMACRO
IFMACRO(!ThName#UserPartitioning)
  570 & IFMACRO(!ThName#Periodicity)
  571 & IFMACRO(ThName#CartesianPartitioning)
  572 & IFMACRO(!dimension)
  573 & NewMacro dimension()2 EndMacro
ENDIFMACRO
NewMacro privateDmesh#CartesianPartitioning() EndMacro
IFMACRO(ThName#RefinementFactor)
  574 & exit(13); /* not currently implemented */
  575 & ENDIFMACRO
IFMACRO(removeZeros,true)
  576 & exit(103); /* not currently implemented */
  577 & ENDIFMACRO
IFMACRO(trueRestrict,true)
  578 & exit(103); /* not currently implemented */
  579 & ENDIFMACRO
ENDIFMACRO
IFMACRO(!ThName#RefinementFactor)
  580 & int privateS = 1;
  581 & ENDIFMACRO
IFMACRO(ThName#RefinementFactor)
  582 & int privateS = ThName#RefinementFactor;
  583 & ENDIFMACRO
IFMACRO(ThName#Overlap)
  584 & meshN privateBorder;
  585 & buildOverlap(ThName, privateBorder, -111111, privateS, ThName#Overlap, intersection, privateDmesh#ThName#khi[0], P1, ThName#Comm, false);
  586 & ENDIFMACRO
IFMACRO(!ThName#Overlap)
  587 & build(ThName, privateS, intersection, privateDmesh#ThName#khi[0], P1, ThName#Comm);
  588 & ENDIFMACRO
ENDIFMACRO
ENDIFMACRO
}
  589 & EndMacro

  590 & macro reconstructDmesh(ThName)
  591 & IFMACRO(!privateDmesh#ThName)
  592 & NewMacro privateDmesh#ThName()privateDmesh#ThName EndMacro
NewMacro privateDmesh#ThName#khi()privateDmesh#ThName#khiDef EndMacro
NewMacro privateDmesh#ThName#intersection()privateDmesh#ThName#intersectionDef EndMacro
real[int][int] privateDmesh#ThName#khi(2);
  593 & real[int][int] privateDmesh#ThName#intersection;
  594 & ENDIFMACRO
IFMACRO(!ThName#Comm)
  595 & NewMacro ThName#Comm()mpiCommWorld EndMacro
ENDIFMACRO
if(ThName#Comm) {
  596 & IFMACRO(!dimension)
  597 &     NewMacro dimension()2 EndMacro
ENDIFMACRO
IFMACRO(!meshN)
  598 &     NewMacro meshN()mesh EndMacro
    NewMacro intN()int2d EndMacro
ENDIFMACRO
    int[int] neighbors;
  599 &     {
  600 &         real[int] bb(2 * dimension);
  601 &         boundingbox(ThName, bb);
  602 &         real[int] bbAll(2 * dimension * mpiSize(ThName#Comm));
  603 &         mpiAllgather(bb, bbAll, ThName#Comm);
  604 &         real hmax;
  605 &         {
  606 &             real tmp = ThName.hmax;
  607 &             mpiAllReduce(tmp, hmax, ThName#Comm, mpiMAX);
  608 &         }
  609 &         int between = 0;
  610 &         int size = mpiSize(ThName#Comm);
  611 &         int rank = mpiRank(ThName#Comm);
  612 &         for(int i = 0; i < size; ++i) {
  613 &             if(i != rank &&
  614 & IFMACRO(dimension,2)
  615 &             !(bbAll[1 + 4 * i] < bb[0] - hmax
              || bbAll[0 + 4 * i] > bb[1] + hmax
              || bbAll[3 + 4 * i] < bb[2] - hmax
              || bbAll[2 + 4 * i] > bb[3] + hmax)
  616 & ENDIFMACRO
IFMACRO(dimension,3)
  617 &             !(bbAll[1 + 6 * i] < bb[0] - hmax
              || bbAll[0 + 6 * i] > bb[1] + hmax
              || bbAll[3 + 6 * i] < bb[2] - hmax
              || bbAll[2 + 6 * i] > bb[3] + hmax
              || bbAll[5 + 6 * i] < bb[4] - hmax
              || bbAll[4 + 6 * i] > bb[5] + hmax)
  618 & ENDIFMACRO
                                                 ) {
  619 &                 neighbors.resize(neighbors.n + 1);
  620 &                 neighbors[neighbors.n - 1] = i;
  621 &             }
  622 &         }
  623 &     }
  624 &     reconstructDmeshWithNeighbors(ThName, neighbors)
  625 & }
  626 & EndMacro
macro reconstructDmeshWithNeighbors(ThName, neighborsName)
  627 & IFMACRO(!privateDmesh#ThName)
  628 & NewMacro privateDmesh#ThName()privateDmesh#ThName EndMacro
NewMacro privateDmesh#ThName#khi()privateDmesh#ThName#khiDef EndMacro
NewMacro privateDmesh#ThName#intersection()privateDmesh#ThName#intersectionDef EndMacro
real[int][int] privateDmesh#ThName#khi(2);
  629 & real[int][int] privateDmesh#ThName#intersection;
  630 & ENDIFMACRO
{
  631 & IFMACRO(!ThName#Comm)
  632 &     NewMacro ThName#Comm()mpiCommWorld EndMacro
ENDIFMACRO
    real[int] part;
  633 &     {
  634 &         if(verbosity > 0)
  635 &             mpiBarrier(ThName#Comm);
  636 &         real timerReconstruction = mpiWtime();
  637 &         varf vG(uPrivate, vPrivate) = on(labels(ThName), uPrivate = 1.0);
  638 &         fespace VhGammaPrivate(ThName, P1);
  639 &         VhGammaPrivate gamma;
  640 &         gamma[] = vG(0, VhGammaPrivate, tgv = -1);
  641 &         meshN[int] ThTab(neighborsName.n + 2);
  642 &         neighborsName.sort;
  643 &         int between = 0;
  644 &         int rank = mpiRank(ThName#Comm);
  645 &         for(int i = 0; i < neighborsName.n; ++i)
  646 &             if(neighborsName[i] > rank) {
  647 &                 between = i;
  648 &                 break;
  649 &             }
  650 &         if(neighborsName.n)
  651 &             if(neighborsName[neighborsName.n - 1] < rank)
  652 &                 between = neighborsName.n;
  653 &         mpiRequest[int] rqRecv(neighborsName.n);
  654 &         for[i, value : neighborsName]
  655 &             Irecv(processor(value, ThName#Comm, rqRecv[i]), ThTab[i + (i >= between)]);
  656 & IFMACRO(!ThName#Overlap)
  657 &         ThTab[between] = trunc(ThName, gamma > 0.01, label = -111112);
  658 & ENDIFMACRO
IFMACRO(ThName#Overlap)
  659 &         ThTab[between] = ThName;
  660 & ENDIFMACRO
        mpiRequest[int] rqSend(neighborsName.n);
  661 &         for[i, value : neighborsName]
  662 & IFMACRO(!ThName#Overlap)
  663 &             Isend(processor(value, ThName#Comm, rqSend[i]), ThTab[between]);
  664 & ENDIFMACRO
IFMACRO(ThName#Overlap)
  665 &             Isend(processor(value, ThName#Comm, rqSend[i]), ThName);
  666 & ENDIFMACRO
IFMACRO(!ThName#Overlap)
  667 &         ThTab[neighborsName.n + 1] = trunc(ThName, gamma < 0.01, label = -111112);
  668 & ENDIFMACRO
        mpiWaitAll(rqRecv);
  669 & IFMACRO(dimension,3)
  670 &         ThName = gluemesh(ThTab);
  671 &         ThName = change(ThName, rmlfaces = -111112);
  672 & ENDIFMACRO
IFMACRO(dimension,2)
  673 &         ThName = gluemesh(ThTab, labtodel = -111112);
  674 & ENDIFMACRO
        part.resize(ThName.nt);
  675 &         int m = 0;
  676 &         for(int i = 0; i < between; ++i) {
  677 &             part(m:m + ThTab[i].nt - 1) = neighborsName[i];
  678 &             m += ThTab[i].nt;
  679 &         }
  680 &         part(m:m + ThTab[between].nt - 1) = rank;
  681 &         m += ThTab[between].nt;
  682 &         for(int i = between; i < neighborsName.n; ++i) {
  683 &             part(m:m + ThTab[i + 1].nt - 1) = neighborsName[i];
  684 &             m += ThTab[i + 1].nt;
  685 &         }
  686 &         if(m != ThName.nt)
  687 &             part(m:ThName.nt - 1) = rank;
  688 &         mpiWaitAll(rqSend);
  689 &         if(verbosity > 0) {
  690 &             mpiBarrier(ThName#Comm);
  691 &             if(mpiRank(ThName#Comm) == 0)
  692 &                 cout.scientific << " --- distributed mesh reconstructed (in " << mpiWtime() - timerReconstruction << ")" << endl;
  693 &         }
  694 &     }
  695 &     NewMacro privateBuildDmesh()1 EndMacro
    NewMacro privateReconstructDmesh()1 EndMacro
    int[int][int] intersection;
  696 &     NewMacro privateDmesh#ThTab()privateDmesh#ThName EndMacro
    NewMacro privateDmesh#ThTab#khi()privateDmesh#ThName#khiDef EndMacro
    NewMacro privateDmesh#ThTab#intersection()privateDmesh#ThName#intersectionDef EndMacro
IFMACRO(ThName#N2O)
  697 &     NewMacro privateDmesh#N2O()ThName#N2O EndMacro
ENDIFMACRO
IFMACRO(ThName#Overlap)
  698 &     meshN ThBorder;
  699 &     buildOverlapWithPartitioning(ThName, ThBorder, part, -111111, 1, ThName#Overlap, intersection, privateDmesh#ThName#khi[0], P1, ThName#Comm, false);
  700 & ENDIFMACRO
IFMACRO(!ThName#Overlap)
  701 &     buildWithPartitioning(ThName, part, 1, intersection, privateDmesh#ThName#khi[0], P1, ThName#Comm);
  702 & ENDIFMACRO
}
  703 & EndMacro
macro initializeDmesh(NewName)
  704 & IFMACRO(!privateDmesh#NewName)
  705 & NewMacro privateDmesh#NewName()privateDmesh#NewName EndMacro
NewMacro privateDmesh#NewName#khi()privateDmesh#NewName#khiDef EndMacro
NewMacro privateDmesh#NewName#intersection()privateDmesh#NewName#intersectionDef EndMacro
real[int][int] privateDmesh#NewName#khi(2);
  706 & real[int][int] privateDmesh#NewName#intersection;
  707 & ENDIFMACRO
EndMacro
macro copyDmesh(OldName, NewName)
  708 & DmeshInitialize(NewName)
  709 & IFMACRO(privateDmesh#OldName)
  710 & NewName = OldName;
  711 & privateDmesh#NewName#khi[0].resize(privateDmesh#OldName#khi[0].n);
  712 & privateDmesh#NewName#khi[0] = privateDmesh#OldName#khi[0];
  713 & privateDmesh#NewName#khi[1].resize(privateDmesh#OldName#khi[1].n);
  714 & privateDmesh#NewName#khi[1] = privateDmesh#OldName#khi[1];
  715 & privateDmesh#NewName#intersection.resize(privateDmesh#OldName#intersection.n);
  716 & for(int i = 0; i < privateDmesh#NewName#intersection.n; ++i) {
  717 &     privateDmesh#NewName#intersection[i].resize(privateDmesh#OldName#intersection[i].n);
  718 &     privateDmesh#NewName#intersection[i] = privateDmesh#OldName#intersection[i];
  719 & }
  720 & ENDIFMACRO
EndMacro
macro createMat(ThName, MatName, PkName)
  721 & IFMACRO(privateDmesh#ThName)
  722 & {
  723 & IFMACRO(!meshN)
  724 & IFMACRO(dimension,3)
  725 & NewMacro meshN()mesh3 EndMacro     /* three-dimensional problem             */
  726 & NewMacro intN()int3d EndMacro      /* three-dimensional integral            */
  727 & ENDIFMACRO
IFMACRO(dimension,3S)
  728 & NewMacro meshN()meshS EndMacro     /* three-dimensional surface problem     */
  729 & NewMacro intN()int2d EndMacro      /* two-dimensional integral              */
  730 & ENDIFMACRO
IFMACRO(dimension,3L)
  731 & NewMacro meshN()meshL EndMacro     /* three-dimensional line problem        */
  732 & NewMacro intN()int1d EndMacro      /* one-dimensional integral              */
  733 & ENDIFMACRO
IFMACRO(!meshN)
  734 & NewMacro meshN()mesh EndMacro      /* two-dimensional problem               */
  735 & NewMacro intN()int2d EndMacro      /* two-dimensional integral              */
  736 & ENDIFMACRO
ENDIFMACRO
IFMACRO(!ThName#Comm)
  737 & NewMacro ThName#Comm()mpiCommWorld EndMacro
ENDIFMACRO
IFMACRO(!privateCreateMatCheckDmesh)
  738 & if(ThName.nv != privateDmesh#ThName#khi[0].n || (privateDmesh#ThName#khi[1].n && ThName.nt != privateDmesh#ThName#khi[1].n)) {
  739 &     DmeshCreate(ThName)
  740 & }
  741 & ENDIFMACRO
NewMacro privateCreateMat()1 EndMacro
int[int][int] intersection;
  742 & real[int][int] DTab(1);
  743 & meshN[int] ThTab(1);
  744 & ThTab[0] = ThName;
  745 & NewMacro privateDmesh#ThTab()privateDmesh#ThName EndMacro
NewMacro privateDmesh#ThTab#khi()privateDmesh#ThName#khiDef EndMacro
NewMacro privateDmesh#ThTab#intersection()privateDmesh#ThName#intersectionDef EndMacro
IFMACRO(!def)
  746 & NewMacro def(i)i EndMacro
ENDIFMACRO
IFMACRO(!init)
  747 & NewMacro init(i)i EndMacro
ENDIFMACRO
if(mpiSize(ThName#Comm) > 1) {
  748 & IFMACRO(ThName#N2O)
  749 & IFMACRO(ThName#Original)
  750 & IFMACRO(ThName#Restriction)
  751 &     NewMacro privateDmesh#N2O()ThName#N2O EndMacro
    NewMacro privateDmesh#Original()ThName#Original EndMacro
    NewMacro privateDmesh#Restriction()ThName#Restriction EndMacro
ENDIFMACRO
ENDIFMACRO
ENDIFMACRO
IFMACRO(!ThName#PkPart)
  752 &     NewMacro ThName#PkPart()PkName EndMacro
ENDIFMACRO
IFMACRO(ThName#CartesianPartitioning)
  753 &     NewMacro privateDmesh#CartesianPartitioning() EndMacro
IFMACRO(!dimension)
  754 &     NewMacro dimension()2 EndMacro
ENDIFMACRO
ENDIFMACRO
IFMACRO(ThName#PostProcessD)
  755 &     NewMacro privateDmesh#PostProcessD(arg)ThName#PostProcessD(arg) EndMacro
IFMACRO(removeZeros,true)
  756 &     exit(105); /* not currently implemented */
  757 & ENDIFMACRO
IFMACRO(trueRestrict,true)
  758 &     exit(105); /* not currently implemented */
  759 & ENDIFMACRO
ENDIFMACRO
    partitionPrivate(ThTab, privateCreateMat, privateCreateMat, privateCreateMat, privateCreateMat, privateCreateMat, mpiRank(ThName#Comm), mpiSize(ThName#Comm), 1, 1, 1, privateCreateMat, DTab, PkName, intersection, ThName#Comm, -111111, ThName#PkPart, def, init, 1)
  760 & }
  761 & else {
  762 &     fespace WhGlobalPrivate(ThName, PkName);
  763 &     DTab[0].resize(WhGlobalPrivate.ndof);
  764 &     DTab[0] = 1;
  765 &     intersection.resize(0);
  766 & IFMACRO(ThName#N2O)
  767 & IFMACRO(ThName#Original)
  768 & IFMACRO(ThName#Restriction)
  769 &     ThName#Restriction.resize(WhGlobalPrivate.ndof);
  770 &     ThName#Restriction = 0:WhGlobalPrivate.ndof - 1;
  771 & ENDIFMACRO
ENDIFMACRO
ENDIFMACRO
}
  772 & IFMACRO(!privateCreatePartition)
  773 & constructor(MatName, DTab[0].n, intersection, DTab[0], communicator = ThName#Comm);
  774 & ENDIFMACRO
IFMACRO(privateCreatePartition)
  775 & privateCreatePartition.resize(DTab[0].n);
  776 & privateCreatePartition = DTab[0];
  777 & ENDIFMACRO
}
  778 & ENDIFMACRO
IFMACRO(!privateDmesh#ThName)
  779 & DmeshCreate(ThName)
  780 & {
  781 & IFMACRO(!meshN)
  782 & IFMACRO(dimension,3)
  783 &     NewMacro meshN()mesh3 EndMacro     /* three-dimensional problem             */
  784 &     NewMacro intN()int3d EndMacro      /* three-dimensional integral            */
  785 & ENDIFMACRO
IFMACRO(dimension,3S)
  786 &     NewMacro meshN()meshS EndMacro     /* three-dimensional surface problem     */
  787 &     NewMacro intN()int2d EndMacro      /* two-dimensional integral              */
  788 & ENDIFMACRO
IFMACRO(dimension,3L)
  789 &     NewMacro meshN()meshL EndMacro     /* three-dimensional line problem        */
  790 &     NewMacro intN()int1d EndMacro      /* one-dimensional integral              */
  791 & ENDIFMACRO
IFMACRO(!meshN)
  792 &     NewMacro meshN()mesh EndMacro      /* two-dimensional problem               */
  793 &     NewMacro intN()int2d EndMacro      /* two-dimensional integral              */
  794 & ENDIFMACRO
ENDIFMACRO
    NewMacro privateCreateMatCheckDmesh()1 EndMacro
    MatCreate(ThName, MatName, PkName)
  795 & }
  796 & ENDIFMACRO
EndMacro

  797 & macro createPartition(ThName, PartName, PkName)
  798 & IFMACRO(!privateDmesh#ThName)
  799 & DmeshCreate(ThName)
  800 & ENDIFMACRO
{
  801 &     NewMacro privateCreateMatCheckDmesh()1 EndMacro
    NewMacro privateCreatePartition()PartName EndMacro
    MatCreate(ThName, privateCreatePartition, PkName)
  802 & }
  803 & EndMacro

  804 & macro buildOverlapEdgePeriodicRecursive(Th, ThBorder, fakeInterface, s, overlap, level, prolongation, intersection, DTab, P, comm, excluded, PkPart, defPart, initPart, labPeriodic, userPartitioning, bs) {
  805 & IFMACRO(!def)
  806 &     NewMacro def(i)i EndMacro
ENDIFMACRO
IFMACRO(!init)
  807 &     NewMacro init(i)i EndMacro
ENDIFMACRO
    Th.resize(level);
  808 &     ThBorder.resize(level);
  809 &     prolongation.resize(level - 1);
  810 &     real timerPartition = mpiWtime();
  811 &     if(mpiSize(comm) > 1 && !excluded) {
  812 &         meshN ThGlobal = Th[level - 1];
  813 &         fespace PhGlobalPrivate(ThGlobal, P0);
  814 &         fespace VhGlobalPrivate(ThGlobal, P1);
  815 &         PhGlobalPrivate partGlobal;
  816 & IFMACRO(!privateReconstructDmesh)
  817 & IFMACRO(privateDmesh#CartesianPartitioning)
  818 &         {
  819 &             real[int] bb(2 * dimension);
  820 &             boundingbox(ThGlobal, bb);
  821 &             PhGlobalPrivate xx = x / (bb[1] - bb[0]), yy = y / (bb[3] - bb[2])
  822 & IFMACRO(dimension,2)
  823 &                                                                               ;
  824 &             int i = int(sqrt(mpiSize(comm)));
  825 &             while(mpiSize(comm) % i != 0)
  826 &                 --i;
  827 &             int j = mpiSize(comm) / i;
  828 &             partGlobal = int(j * xx) + int(i * yy) * j;
  829 & ENDIFMACRO
IFMACRO(dimension,3)
  830 &                                                                               , zz = z / (bb[5] - bb[4]);
  831 &             i = int(mpiSize(comm)^(0.333333333333333));
  832 &             while(mpiSize(comm) % i != 0)
  833 &                 --i;
  834 &             real p = mpiSize(comm) / i;
  835 &             j = int(sqrt(p));
  836 &             while(p % j != 0)
  837 &                 --j;
  838 &             real k = int(p / j);
  839 &             partGlobal = int(i * zz) * k * j + int(j * yy) * k + int(k * xx);
  840 & ENDIFMACRO
        }
  841 & ENDIFMACRO
IFMACRO(!privateDmesh#CartesianPartitioning)
  842 &         if(userPartitioning.n != PhGlobalPrivate.ndof || labPeriodic.n > 0) {
  843 &             timerPartition = mpiWtime();
  844 &             meshN ThGlobalPeriodic;
  845 &             if(labPeriodic.n > 0) {
  846 &                 VhGlobalPrivate marker;
  847 &                 for(int i = 0; i < labPeriodic.n; ++i) {
  848 &                     varf vMarker(uPrivate, vPrivate) = on(labPeriodic[i], uPrivate = 1.0);
  849 &                     marker[] += vMarker(0, VhGlobalPrivate, tgv = -1);
  850 &                 }
  851 &                 PhGlobalPrivate partPeriodic = marker > 0.1;
  852 &                 while(1) {
  853 &                     AddLayers(ThGlobal, partPeriodic[], 1 + overlap, marker[]);
  854 &                     partPeriodic = marker > 0.001;
  855 &                     ThGlobalPeriodic = trunc(ThGlobal, partPeriodic < 0.999);
  856 &                     if(ThGlobal.nt / real(ThGlobalPeriodic.nt) > mpisize / real(mpisize - 1))
  857 &                         break;
  858 &                 }
  859 &             }
  860 &             if(mpiRank(comm) == 0) {
  861 &                 if(verbosity > 0)
  862 &                     cout.scientific << " --- global mesh of " << ThGlobal.nt << " elements (prior to refinement) partitioned with " << Stringification(partitioner);
  863 &                 if(labPeriodic.n > 0) {
  864 &                     fespace PhPeriodicPrivate(ThGlobalPeriodic, P0);
  865 &                     PhPeriodicPrivate partPeriodic;
  866 &                     if(mpiSize(comm) > 2) {
  867 &                         partitionerSeq(partPeriodic[], ThGlobalPeriodic, mpiSize(comm) - 1);
  868 &                         partPeriodic[] += 1.0;
  869 &                     }
  870 &                     else
                        partPeriodic[] = 1.0;
  871 &                     partGlobal = partPeriodic;
  872 &                 }
  873 &                 else {
  874 &                     partitionerSeq(partGlobal[], ThGlobal, mpiSize(comm));
  875 &                 }
  876 &             }
  877 &             if(labPeriodic.n > 0 && Stringification(partitioner) != "metis" && Stringification(partitioner) != "scotch") {
  878 &                 fespace PhPeriodicPrivate(ThGlobalPeriodic, P0);
  879 &                 PhPeriodicPrivate partPeriodic;
  880 &                 if(mpiSize(comm) > 2) {
  881 &                     partitionerPar(partPeriodic[], ThGlobalPeriodic, comm, mpiSize(comm) - 1);
  882 &                     partPeriodic[] += 1.0;
  883 &                 }
  884 &                 else
                    partPeriodic[] = 1.0;
  885 &                 partGlobal = partPeriodic;
  886 &             }
  887 &             else
                partitionerPar(partGlobal[], ThGlobal, comm, mpiSize(comm));
  888 &             if(mpiRank(comm) == 0 && verbosity > 0)
  889 &                 cout.scientific << " (in " << mpiWtime() - timerPartition << ")" << endl;
  890 &             timerPartition = mpiWtime();
  891 &         }
  892 &         else {
  893 &             partGlobal[] = userPartitioning;
  894 &         }
  895 & ENDIFMACRO
ENDIFMACRO
IFMACRO(privateReconstructDmesh)
  896 &         partGlobal[] = userPartitioning;
  897 & ENDIFMACRO
IFMACRO(!trueRestrict)
  898 &         bool trueRestrict = usedARGV("-true_restrict") != -1;
  899 & ENDIFMACRO
IFMACRO(!removeZeros)
  900 &         bool removeZeros = trueRestrict && overlap == 1 && usedARGV("-remove_zeros") != -1;
  901 & ENDIFMACRO
        if(verbosity > 0) {
  902 &             mpiBarrier(comm);
  903 &             timerPartition = mpiWtime();
  904 &         }
  905 & IFMACRO(privateBuildDmesh)
  906 &         NewMacro defP1(i)i EndMacro
        NewMacro initP1(i)i EndMacro
        partitionPrivate(Th, ThBorder, ThGlobal, PhGlobalPrivate, VhGlobalPrivate, partGlobal, mpiRank(comm), mpiSize(comm), s, overlap, level, prolongation, DTab, P, intersection, comm, fakeInterface, PkPart, defP1, initP1, bs)
  907 & ENDIFMACRO
IFMACRO(!privateBuildDmesh)
  908 &         partitionPrivate(Th, ThBorder, ThGlobal, PhGlobalPrivate, VhGlobalPrivate, partGlobal, mpiRank(comm), mpiSize(comm), s, overlap, level, prolongation, DTab, P, intersection, comm, fakeInterface, PkPart, defPart, initPart, bs)
  909 & ENDIFMACRO
    }
  910 &     else if(mpiSize(comm) == 1) {
  911 &         for(int i = level - 1; i > 0; --i) {
  912 &             Th[i - 1] = trunc(Th[i], 1, split = s);
  913 &             fespace WhLocalRefinedPrivate(Th[i - 1], P);
  914 &             fespace WhLocalCoarsePrivate(Th[i], P);
  915 &             prolongation[i - 1] = interpolate(WhLocalRefinedPrivate, WhLocalCoarsePrivate);
  916 &             DTab[i].resize(WhLocalCoarsePrivate.ndof);
  917 &             DTab[i] = 1.0;
  918 &         }
  919 &         if(level == 1) {
  920 & IFMACRO(privateBuildDmesh)
  921 & IFMACRO(privateDmesh#N2O)
  922 &             if(s > 1)
  923 &                 Th[0] = trunc(Th[0], 1, split = s, new2old = privateDmesh#N2O);
  924 &             else {
  925 &                 privateDmesh#N2O.resize(Th[0].nt);
  926 &                 privateDmesh#N2O = 0:Th[0].nt-1;
  927 &             }
  928 & ENDIFMACRO
IFMACRO(!privateDmesh#N2O)
  929 &             if(s > 1)
  930 &                 Th[0] = trunc(Th[0], 1, split = s);
  931 & ENDIFMACRO
ENDIFMACRO
IFMACRO(!privateBuildDmesh)
  932 &             if(s > 1)
  933 &                 Th[0] = trunc(Th[0], 1, split = s);
  934 & ENDIFMACRO
        }
  935 &         fespace WhLocalPrivate(Th[0], P);
  936 &         DTab[0].resize(WhLocalPrivate.ndof);
  937 &         DTab[0] = 1.0;
  938 &     }
  939 &     if(verbosity > 0) {
  940 &         mpiBarrier(comm);
  941 &         if(mpiRank(comm) == 0)
  942 &             cout.scientific << " --- partition of unity built (in " << mpiWtime() - timerPartition << ")" << endl;
  943 &     }
  944 & }// EOM

  945 & macro buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, PkPart, defPart, initPart, labPeriodic, userPartitioning, bs) {
  946 &     meshN[int] ThTab(1);
  947 &     meshN[int] ThBorderTab(1);
  948 &     real[int][int] DTab(1);
  949 &     ThTab[0] = Th;
  950 &     matrix[int] prolongation(0);
  951 &     buildOverlapEdgePeriodicRecursive(ThTab, ThBorderTab, fakeInterface, s, overlap, 1, prolongation, intersection, DTab, P, comm, excluded, PkPart, defPart, initPart, labPeriodic, userPartitioning, bs)
  952 &     Th = ThTab[0];
  953 &     ThBorder = ThBorderTab[0];
  954 &     D.resize(DTab[0].n);
  955 &     D = DTab[0];
  956 & }// EOM

  957 & IFMACRO(vectorialfe)
  958 & macro buildOverlapEdgeRecursive(Th, ThBorder, fakeInterface, s, overlap, level, prolongation, intersection, D, P, comm, excluded, PkPart, defPart, initPart, bs) {
  959 &     int[int] emptyArray(0);
  960 &     real[int] emptyRealArray(0);
  961 &     buildOverlapEdgePeriodicRecursive(Th, ThBorder, fakeInterface, s, overlap, level, prolongation, intersection, D, P, comm, excluded, PkPart, defPart, initPart, emptyArray, emptyRealArray, bs)
  962 & }// EOM
macro buildOverlapEdge(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, PkPart, defPart, initPart, bs) {
  963 &     int[int] emptyArray(0);
  964 &     real[int] emptyRealArray(0);
  965 &     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, PkPart, defPart, initPart, emptyArray, emptyRealArray, bs)
  966 & }// EOM
macro buildOverlapEdgeWithPartitioning(Th, ThBorder, part, fakeInterface, s, overlap, intersection, D, P, comm, excluded, PkPart, defPart, initPart, bs) {
  967 &     int[int] emptyArray(0);
  968 &     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, PkPart, defPart, initPart, emptyArray, part, bs)
  969 & }// EOM
macro buildOverlapWithPartitioning(Th, ThBorder, part, fakeInterface, s, overlap, intersection, D, P, comm, excluded, bs) {
  970 &     int[int] emptyArray(0);
  971 &     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, emptyArray, part, bs)
  972 & }// EOM
macro buildOverlap(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, bs) {
  973 &     int[int] emptyArray(0);
  974 &     real[int] emptyRealArray(0);
  975 &     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, emptyArray, emptyRealArray, bs)
  976 & }// EOM
macro buildOverlapPeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, labPeriodic, bs) {
  977 &     real[int] emptyArray(0);
  978 &     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, labPeriodic, emptyArray, bs)
  979 & }// EOM
macro buildEdgeWithPartitioning(Th, part, s, intersection, D, P, comm, PkPart, defPart, initPart, bs) {
  980 &     int[int] emptyArray(0);
  981 &     meshN ThBorder;
  982 &     int fakeInterface = -111111;
  983 &     int overlap = 1;
  984 &     bool excluded = false;
  985 &     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, intersection, D, P, comm, excluded, PkPart, defPart, initPart, emptyArray, part, bs)
  986 & }// EOM
macro buildWithPartitioning(Th, part, s, intersection, D, P, comm, bs) {
  987 &     int[int] emptyArray(0);
  988 &     meshN ThBorder;
  989 &     int fakeInterface = -111111;
  990 &     int overlap = 1;
  991 &     bool excluded = false;
  992 &     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, emptyArray, part, bs)
  993 & }// EOM
macro build(Th, s, intersection, D, P, comm, bs) {
  994 &     int[int] emptyArray(0);
  995 &     real[int] emptyRealArray(0);
  996 &     meshN ThBorder;
  997 &     int fakeInterface = -111111;
  998 &     int overlap = 1;
  999 &     bool excluded = false;
 1000 &     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, emptyArray, emptyRealArray, bs)
 1001 & }// EOM
macro buildPeriodic(Th, s, intersection, D, P, comm, labPeriodic, bs) {
 1002 &     int[int] emptyArray(0);
 1003 &     real[int] emptyRealArray(0);
 1004 &     meshN ThBorder;
 1005 &     int fakeInterface = -111111;
 1006 &     int overlap = 1;
 1007 &     bool excluded = false;
 1008 &     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, labPeriodic, emptyRealArray, bs)
 1009 & }// EOM
macro buildMinimalist(Th, intersection, D, P, bs) {
 1010 &     int[int] emptyArray(0);
 1011 &     real[int] emptyRealArray(0);
 1012 &     meshN ThBorder;
 1013 &     int fakeInterface = -111111;
 1014 &     int overlap = 1;
 1015 &     bool excluded = false;
 1016 &     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, 1, overlap, intersection, D, P, mpiCommWorld, excluded, P, def, init, emptyArray, emptyRealArray, bs)
 1017 & }// EOM
macro buildRecursive(Th, s, level, prolongation, intersectionMat, DTab, P, comm, bsMat) {
 1018 &     int[int] emptyArray(0);
 1019 &     real[int] emptyRealArray(0);
 1020 &     meshN[int] ThBorderTab(level);
 1021 &     DTab.resize(level);
 1022 &     buildOverlapEdgePeriodicRecursive(Th, ThBorderTab, -111111, s, 1, level, prolongation, intersectionMat, DTab, P, comm, false, P, def, init, emptyArray, emptyRealArray, bsMat)
 1023 & }// EOM
macro buildMatRecursive(Th, s, nlevel, prolongation, A, P, comm, bsMat) {
 1024 &     int[int] emptyArray(0);
 1025 &     real[int] emptyRealArray(0);
 1026 &     meshN[int] ThBorderTab(nlevel);
 1027 &     int[int][int] intersectionMat;
 1028 &     real[int][int] DTab(nlevel);
 1029 &     buildOverlapEdgePeriodicRecursive(Th, ThBorderTab, -111111, s, 1, nlevel, prolongation, intersectionMat, DTab, P, comm, false, P, def, init, emptyArray, emptyRealArray, bsMat)
 1030 &     for(int i = 0; i < nlevel; ++i)
 1031 &         constructor(A[i], DTab[i].n, intersectionMat, DTab[i], bs = bsMat, communicator = comm, level = i);
 1032 & }// EOM
macro buildMatEdgeRecursive(Th, s, nlevel, prolongation, A, P, comm, PkPart, defPart, initPart, bsMat) {
 1033 &     int[int] emptyArray(0);
 1034 &     real[int] emptyRealArray(0);
 1035 &     meshN[int] ThBorderTab(nlevel);
 1036 &     int[int][int] intersectionMat;
 1037 &     real[int][int] DTab(nlevel);
 1038 &     buildOverlapEdgePeriodicRecursive(Th, ThBorderTab, -111111, s, 1, nlevel, prolongation, intersectionMat, DTab, P, comm, false, PkPart, defPart, initPart, emptyArray, emptyRealArray, bsMat)
 1039 &     for(int i = 0; i < nlevel; ++i)
 1040 &         constructor(A[i], DTab[i].n, intersectionMat, DTab[i], bs = bsMat, communicator = comm, level = i);
 1041 & }// EOM
macro buildMatEdgeRecursiveWithPartitioning(Th, part, s, nlevel, prolongation, A, P, comm, PkPart, defPart, initPart, bsMat) {
 1042 &     int[int] emptyArray(0);
 1043 &     meshN[int] ThBorderTab(nlevel);
 1044 &     int[int][int] intersectionMat;
 1045 &     real[int][int] DTab(nlevel);
 1046 &     buildOverlapEdgePeriodicRecursive(Th, ThBorderTab, -111111, s, 1, nlevel, prolongation, intersectionMat, DTab, P, comm, false, PkPart, defPart, initPart, emptyArray, part, bsMat)
 1047 &     for(int i = 0; i < nlevel; ++i)
 1048 &         constructor(A[i], DTab[i].n, intersectionMat, DTab[i], bs = bsMat, communicator = comm, level = i);
 1049 & }// EOM
macro buildMatEdgeWithPartitioning(Th, part, s, A, P, comm, PkPart, defPart, initPart, bsMat) {
 1050 &     real[int] DMat;
 1051 &     int[int][int] intersectionMat;
 1052 &     buildEdgeWithPartitioning(Th, part, s, intersectionMat, DMat, P, comm, PkPart, defPart, initPart, bsMat)
 1053 &     constructor(A, DMat.n, intersectionMat, DMat, bs = bsMat, communicator = comm);
 1054 & }// EOM
macro buildMatWithPartitioning(Th, part, s, A, P, comm, bsMat) {
 1055 &     real[int] DMat;
 1056 &     int[int][int] intersectionMat;
 1057 &     buildWithPartitioning(Th, part, s, intersectionMat, DMat, P, comm, bsMat)
 1058 &     constructor(A, DMat.n, intersectionMat, DMat, bs = bsMat, communicator = comm);
 1059 & }// EOM
macro buildMat(Th, s, A, P, comm, bsMat) {
 1060 &     real[int] DMat;
 1061 &     int[int][int] intersectionMat;
 1062 &     build(Th, s, intersectionMat, DMat, P, comm, bsMat)
 1063 &     constructor(A, DMat.n, intersectionMat, DMat, bs = bsMat, communicator = comm);
 1064 & }// EOM
macro buildMatPeriodic(Th, s, A, P, comm, labPeriodic, bsMat) {
 1065 &     real[int] DMat;
 1066 &     int[int][int] intersectionMat;
 1067 &     buildPeriodic(Th, s, intersectionMat, DMat, P, comm, labPeriodic, bsMat)
 1068 &     constructor(A, DMat.n, intersectionMat, DMat, bs = bsMat, communicator = comm);
 1069 & }// EOM
macro buildMatMinimalist(Th, A, P, bsMat) {
 1070 &     real[int] DMat;
 1071 &     int[int][int] intersectionMat;
 1072 &     buildMinimalist(Th, intersectionMat, DMat, P, bsMat)
 1073 &     constructor(A, DMat.n, intersectionMat, DMat, bs = bsMat, communicator = comm);
 1074 & }// EOM
ENDIFMACRO
IFMACRO(!vectorialfe)
 1075 & macro buildOverlapEdgeRecursive(Th, ThBorder, fakeInterface, s, overlap, level, prolongation, intersection, D, P, comm, excluded, PkPart, defPart, initPart) {
 1076 &     int[int] emptyArray(0);
 1077 &     real[int] emptyRealArray(0);
 1078 &     buildOverlapEdgePeriodicRecursive(Th, ThBorder, fakeInterface, s, overlap, level, prolongation, intersection, D, P, comm, excluded, PkPart, defPart, initPart, emptyArray, emptyRealArray, 1)
 1079 & }// EOM
macro buildOverlapEdge(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, PkPart, defPart, initPart) {
 1080 &     int[int] emptyArray(0);
 1081 &     real[int] emptyRealArray(0);
 1082 &     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, PkPart, defPart, initPart, emptyArray, emptyRealArray, 1)
 1083 & }// EOM
macro buildOverlapEdgeWithPartitioning(Th, ThBorder, part, fakeInterface, s, overlap, intersection, D, P, comm, excluded, PkPart, defPart, initPart) {
 1084 &     int[int] emptyArray(0);
 1085 &     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, PkPart, defPart, initPart, emptyArray, part, 1)
 1086 & }// EOM
macro buildOverlapWithPartitioning(Th, ThBorder, part, fakeInterface, s, overlap, intersection, D, P, comm, excluded) {
 1087 &     int[int] emptyArray(0);
 1088 &     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, emptyArray, part, 1)
 1089 & }// EOM
macro buildOverlap(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded) {
 1090 &     int[int] emptyArray(0);
 1091 &     real[int] emptyRealArray(0);
 1092 &     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, emptyArray, emptyRealArray, 1)
 1093 & }// EOM
macro buildOverlapPeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, labPeriodic) {
 1094 &     real[int] emptyArray(0);
 1095 &     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, labPeriodic, emptyArray, 1)
 1096 & }// EOM
macro buildEdgeWithPartitioning(Th, part, s, intersection, D, P, comm, PkPart, defPart, initPart) {
 1097 &     int[int] emptyArray(0);
 1098 &     meshN ThBorder;
 1099 &     int fakeInterface = -111111;
 1100 &     int overlap = 1;
 1101 &     bool excluded = false;
 1102 &     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, PkPart, defPart, initPart, emptyArray, part, 1)
 1103 & }// EOM
macro buildWithPartitioning(Th, part, s, intersection, D, P, comm) {
 1104 &     int[int] emptyArray(0);
 1105 &     meshN ThBorder;
 1106 &     int fakeInterface = -111111;
 1107 &     int overlap = 1;
 1108 &     bool excluded = false;
 1109 &     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, emptyArray, part, 1)
 1110 & }// EOM
macro build(Th, s, intersection, D, P, comm) {
 1111 &     int[int] emptyArray(0);
 1112 &     real[int] emptyRealArray(0);
 1113 &     meshN ThBorder;
 1114 &     int fakeInterface = -111111;
 1115 &     int overlap = 1;
 1116 &     bool excluded = false;
 1117 &     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, emptyArray, emptyRealArray, 1)
 1118 & }// EOM
macro buildPeriodic(Th, s, intersection, D, P, comm, labPeriodic) {
 1119 &     int[int] emptyArray(0);
 1120 &     real[int] emptyRealArray(0);
 1121 &     meshN ThBorder;
 1122 &     int fakeInterface = -111111;
 1123 &     int overlap = 1;
 1124 &     bool excluded = false;
 1125 &     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, labPeriodic, emptyRealArray, 1)
 1126 & }// EOM
macro buildMinimalist(Th, intersection, D, P) {
 1127 &     int[int] emptyArray(0);
 1128 &     real[int] emptyRealArray(0);
 1129 &     meshN ThBorder;
 1130 &     int fakeInterface = -111111;
 1131 &     int overlap = 1;
 1132 &     bool excluded = false;
 1133 &     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, 1, overlap, intersection, D, P, mpiCommWorld, excluded, P, def, init, emptyArray, emptyRealArray, 1)
 1134 & }// EOM
macro buildRecursive(Th, s, level, prolongation, intersectionMat, DTab, P, comm) {
 1135 &     int[int] emptyArray(0);
 1136 &     real[int] emptyRealArray(0);
 1137 &     meshN[int] ThBorderTab(level);
 1138 &     DTab.resize(level);
 1139 &     buildOverlapEdgePeriodicRecursive(Th, ThBorderTab, -111111, s, 1, level, prolongation, intersectionMat, DTab, P, comm, false, P, def, init, emptyArray, emptyRealArray, 1)
 1140 & }// EOM
macro buildMatRecursive(Th, s, nlevel, prolongation, A, P, comm) {
 1141 &     int[int] emptyArray(0);
 1142 &     real[int] emptyRealArray(0);
 1143 &     meshN[int] ThBorderTab(nlevel);
 1144 &     int[int][int] intersectionMat;
 1145 &     real[int][int] DTab(nlevel);
 1146 &     buildOverlapEdgePeriodicRecursive(Th, ThBorderTab, -111111, s, 1, nlevel, prolongation, intersectionMat, DTab, P, comm, false, P, def, init, emptyArray, emptyRealArray, 1)
 1147 &     for(int i = 0; i < nlevel; ++i)
 1148 &         constructor(A[i], DTab[i].n, intersectionMat, DTab[i], communicator = comm, level = i);
 1149 & }// EOM
macro buildMatEdgeRecursive(Th, s, nlevel, prolongation, A, P, comm, PkPart, defPart, initPart) {
 1150 &     int[int] emptyArray(0);
 1151 &     real[int] emptyRealArray(0);
 1152 &     meshN[int] ThBorderTab(nlevel);
 1153 &     int[int][int] intersectionMat;
 1154 &     real[int][int] DTab(nlevel);
 1155 &     buildOverlapEdgePeriodicRecursive(Th, ThBorderTab, -111111, s, 1, nlevel, prolongation, intersectionMat, DTab, P, comm, false, PkPart, defPart, initPart, emptyArray, emptyRealArray, 1)
 1156 &     for(int i = 0; i < nlevel; ++i)
 1157 &         constructor(A[i], DTab[i].n, intersectionMat, DTab[i], communicator = comm, level = i);
 1158 & }// EOM
macro buildMatEdgeRecursiveWithPartitioning(Th, part, s, nlevel, prolongation, A, P, comm, PkPart, defPart, initPart) {
 1159 &     int[int] emptyArray(0);
 1160 &     meshN[int] ThBorderTab(nlevel);
 1161 &     int[int][int] intersectionMat;
 1162 &     real[int][int] DTab(nlevel);
 1163 &     buildOverlapEdgePeriodicRecursive(Th, ThBorderTab, -111111, s, 1, nlevel, prolongation, intersectionMat, DTab, P, comm, false, PkPart, defPart, initPart, emptyArray, part, 1)
 1164 &     for(int i = 0; i < nlevel; ++i)
 1165 &         constructor(A[i], DTab[i].n, intersectionMat, DTab[i], communicator = comm, level = i);
 1166 & }// EOM
macro buildMatEdgeWithPartitioning(Th, part, s, A, P, comm, PkPart, defPart, initPart) {
 1167 &     real[int] DMat;
 1168 &     int[int][int] intersectionMat;
 1169 &     buildEdgeWithPartitioning(Th, part, s, intersectionMat, DMat, P, comm, PkPart, defPart, initPart)
 1170 &     constructor(A, DMat.n, intersectionMat, DMat, communicator = comm);
 1171 & }// EOM
macro buildMatWithPartitioning(Th, part, s, A, P, comm) {
 1172 &     real[int] DMat;
 1173 &     int[int][int] intersectionMat;
 1174 &     buildWithPartitioning(Th, part, s, intersectionMat, DMat, P, comm)
 1175 &     constructor(A, DMat.n, intersectionMat, DMat, communicator = comm);
 1176 & }// EOM
macro buildMat(Th, s, A, P, comm) {
 1177 &     real[int] DMat;
 1178 &     int[int][int] intersectionMat;
 1179 &     build(Th, s, intersectionMat, DMat, P, comm)
 1180 &     constructor(A, DMat.n, intersectionMat, DMat, communicator = comm);
 1181 & }// EOM
macro buildMatPeriodic(Th, s, A, P, comm, labPeriodic) {
 1182 &     real[int] DMat;
 1183 &     int[int][int] intersectionMat;
 1184 &     buildPeriodic(Th, s, intersectionMat, DMat, P, comm, labPeriodic)
 1185 &     constructor(A, DMat.n, intersectionMat, DMat, communicator = comm);
 1186 & }// EOM
macro buildMatMinimalist(Th, A, P) {
 1187 &     real[int] DMat;
 1188 &     int[int][int] intersectionMat;
 1189 &     buildMinimalist(Th, intersectionMat, DMat, P)
 1190 &     constructor(A, DMat.n, intersectionMat, DMat);
 1191 & }// EOM
ENDIFMACRO

 1192 & macro convectParallel(ThName, uVel, dt, uKhi, safety)
 1193 & IFMACRO(privateDmesh#ThName)
 1194 & {
 1195 & IFMACRO(!ThName#Comm)
 1196 & NewMacro ThName#Comm()mpiCommWorld EndMacro
ENDIFMACRO
IFMACRO(!ThName#VelocityPk)
 1197 & func ThSinglePk = P1;
 1198 & ENDIFMACRO
IFMACRO(ThName#VelocityPk)
 1199 & func ThSinglePk = ThName#VelocityPk;
 1200 & ENDIFMACRO
if(verbosity >= 0)
 1201 &     mpiBarrier(ThName#Comm);
 1202 & real timerConvect = mpiWtime();
 1203 & if(mpiSize(ThName#Comm) == 1) {
 1204 &     uKhi = convect(uVel, dt, uKhi);
 1205 & }
 1206 & else {
 1207 &     int backupSM = searchMethod;
 1208 &     searchMethod = 0;
 1209 &     real[int] bb(2 * dimension);
 1210 &     boundingbox(ThName, bb);
 1211 &     bb(0) -= safety * ThName.hmax;
 1212 &     bb(1) += safety * ThName.hmax;
 1213 &     bb(2) -= safety * ThName.hmax;
 1214 &     bb(3) += safety * ThName.hmax;
 1215 & IFMACRO(dimension,3)
 1216 &     bb(4) -= safety * ThName.hmax;
 1217 &     bb(5) += safety * ThName.hmax;
 1218 & ENDIFMACRO
    int size = mpiSize(ThName#Comm);
 1219 &     real[int] bbAll(2 * dimension * size);
 1220 &     mpiAllgather(bb, bbAll, ThName#Comm);
 1221 &     int[int] rankExchange(0);
 1222 &     for(int i = 0; i < size; ++i) {
 1223 & IFMACRO(dimension,2)
 1224 &         if(!(bbAll[1 + 4 * i] < bb[0]
 1225 &           || bbAll[0 + 4 * i] > bb[1]
 1226 &           || bbAll[3 + 4 * i] < bb[2]
 1227 &           || bbAll[2 + 4 * i] > bb[3]))
 1228 & ENDIFMACRO
IFMACRO(dimension,3)
 1229 &         if(!(bbAll[1 + 6 * i] < bb[0]
 1230 &           || bbAll[0 + 6 * i] > bb[1]
 1231 &           || bbAll[3 + 6 * i] < bb[2]
 1232 &           || bbAll[2 + 6 * i] > bb[3]
 1233 &           || bbAll[5 + 6 * i] < bb[4]
 1234 &           || bbAll[4 + 6 * i] > bb[5]))
 1235 & ENDIFMACRO
                                                    {
 1236 &             rankExchange.resize(rankExchange.n + 1);
 1237 &             rankExchange[rankExchange.n - 1] = i;
 1238 &         }
 1239 &     }
 1240 &     real[int] D, backupRegion(ThName.nt);
 1241 & IFMACRO(dimension,2)
 1242 &     func PkVel = [ThSinglePk, ThSinglePk];
 1243 & ENDIFMACRO
IFMACRO(dimension,3)
 1244 &     func PkVel = [ThSinglePk, ThSinglePk, ThSinglePk];
 1245 & ENDIFMACRO
    fespace VhVelPrivate(ThName, PkVel);
 1246 &     fespace VhKhiPrivate(ThName, ThSinglePk);
 1247 &     real[int] buffer(VhVelPrivate.ndof + VhKhiPrivate.ndof);
 1248 &     {
 1249 &         VhVelPrivate defVel(uVelLocal) = uVel;
 1250 &         fespace VhKhiP1(ThName, P1);
 1251 &         VhKhiP1 khiP1;
 1252 &         khiP1[] = privateDmesh#ThName#khiDef[0];
 1253 &         VhKhiPrivate khi;
 1254 &         if(khi[].n != khiP1[].n)
 1255 &             khi = khiP1;
 1256 &         else
            khi[] = khiP1[];
 1257 &         for[i, value : uVelLocal[]] value *= khi[][i / dimension];
 1258 &         buffer(0:VhVelPrivate.ndof - 1) = uVelLocal[];
 1259 &         buffer(VhVelPrivate.ndof:VhVelPrivate.ndof + VhKhiPrivate.ndof - 1) = khi[];
 1260 &         if(khi[].n != uKhi[].n) {
 1261 &             khi = uKhi;
 1262 &             buffer(VhVelPrivate.ndof:VhVelPrivate.ndof + VhKhiPrivate.ndof - 1) .*= khi[];
 1263 &         }
 1264 &         else
            buffer(VhVelPrivate.ndof:VhVelPrivate.ndof + VhKhiPrivate.ndof - 1) .*= uKhi[];
 1265 &     }
 1266 &     fespace PhPartPrivate(ThName, P0);
 1267 &     {
 1268 &         PhPartPrivate backup = region;
 1269 &         backupRegion = backup[];
 1270 &         ThName = change(ThName, fregion = privateDmesh#ThName#khiDef[1][nuTriangle]);
 1271 &     }
 1272 &     meshN[int] recvTh(rankExchange.n);
 1273 &     meshN[int] sendTh(rankExchange.n);
 1274 &     real[int][int] exchangeU(rankExchange.n + rankExchange.n);
 1275 &     mpiRequest[int] rqSendTh(rankExchange.n);
 1276 &     mpiRequest[int] rqSendU(rankExchange.n);
 1277 &     mpiRequest[int] rqRecvTh(rankExchange.n);
 1278 &     mpiRequest[int] rqRecvU(rankExchange.n);
 1279 &     for[i, value : rankExchange]
 1280 &         Irecv(processor(value, rqRecvTh[i]), recvTh[i]);
 1281 &     for[i, value : rankExchange] {
 1282 &         PhPartPrivate part;
 1283 & IFMACRO(dimension,2)
 1284 &         part = (bbAll[0 + 4 * value] < x
 1285 &              && bbAll[1 + 4 * value] > x
 1286 &              && bbAll[2 + 4 * value] < y
 1287 &              && bbAll[3 + 4 * value] > y) ? 1.0 : 0.0;
 1288 & ENDIFMACRO
IFMACRO(dimension,3)
 1289 &         part = (bbAll[0 + 6 * value] < x
 1290 &              && bbAll[1 + 6 * value] > x
 1291 &              && bbAll[2 + 6 * value] < y
 1292 &              && bbAll[3 + 6 * value] > y
 1293 &              && bbAll[4 + 6 * value] < z
 1294 &              && bbAll[5 + 6 * value] > z) ? 1.0 : 0.0;
 1295 & ENDIFMACRO
        if(part[].linfty > 1.0e-2) {
 1296 &             int[int] n2o;
 1297 &             sendTh[i] = trunc(ThName, part > 1.0e-2, new2old = n2o);
 1298 &             fespace VhRestrictionPrivate(sendTh[i], ThSinglePk);
 1299 &             int[int] map;
 1300 &             map = restrict(VhRestrictionPrivate, VhKhiPrivate, n2o);
 1301 &             exchangeU[rankExchange.n + i].resize(VhRestrictionPrivate.ndof * (dimension + 1));
 1302 &             for[j, w : map] {
 1303 &                 exchangeU[rankExchange.n + i][dimension * j] = buffer[dimension * w];
 1304 &                 exchangeU[rankExchange.n + i][dimension * j + 1] = buffer[dimension * w + 1];
 1305 & IFMACRO(dimension,3)
 1306 &                 exchangeU[rankExchange.n + i][dimension * j + 2] = buffer[dimension * w + 2];
 1307 & ENDIFMACRO
                exchangeU[rankExchange.n + i][VhRestrictionPrivate.ndof * dimension + j] = buffer[VhKhiPrivate.ndof * dimension + w];
 1308 &             }
 1309 &             Isend(processor(value, rqSendTh[i]), sendTh[i]);
 1310 &             Isend(processor(value, rqSendU[i]), exchangeU[rankExchange.n + i]);
 1311 &         }
 1312 &         else
            Isend(processor(value, rqSendTh[i]), sendTh[i]);
 1313 &     }
 1314 &     meshN gluedExchange;
 1315 &     {
 1316 &         meshN[int] toGlue(rankExchange.n);
 1317 &         int j = 0;
 1318 &         for[i, value : rankExchange] {
 1319 &             int index = mpiWaitAny(rqRecvTh);
 1320 &             if(recvTh[index].nt) {
 1321 &                 fespace VhRestrictionPrivate(recvTh[index], ThSinglePk);
 1322 &                 exchangeU[index].resize(VhRestrictionPrivate.ndof * (dimension + 1));
 1323 &                 Irecv(processor(rankExchange[index], rqRecvU[index]), exchangeU[index]);
 1324 &                 fespace PhRestrictionPrivate(recvTh[index], P0);
 1325 &                 PhRestrictionPrivate ind = abs(region - rankExchange[index]) < 1.0e-2 ? 1.0 : 0.0;
 1326 &                 if(abs(ind[].max - 1.0) < 1.0e-2) {
 1327 &                     toGlue[j] = trunc(recvTh[index], ind > 1.0e-2);
 1328 &                     ++j;
 1329 &                 }
 1330 &             }
 1331 &         }
 1332 &         toGlue.resize(j);
 1333 &         gluedExchange = gluemesh(toGlue);
 1334 &     }
 1335 &     meshN interpolateExchange;
 1336 &     fespace VhVelExchangePrivate(gluedExchange, PkVel);
 1337 &     fespace VhKhiExchangePrivate(gluedExchange, ThSinglePk);
 1338 &     VhVelExchangePrivate defVel(uVelExchange);
 1339 &     VhKhiExchangePrivate uKhiExchange;
 1340 &     for[i, value : rankExchange] {
 1341 &         int index = mpiWaitAny(rqRecvU);
 1342 &         if(index != mpiUndefined) {
 1343 &             if(recvTh[index].nt) {
 1344 &                 fespace VhRestrictionPrivate(recvTh[index], ThSinglePk);
 1345 &                 matrix R = interpolate(VhRestrictionPrivate, VhKhiExchangePrivate);
 1346 &                 if(R.nnz != R.n) {
 1347 &                     R.thresholding(1.0e-2);
 1348 &                     assert(R.nnz == R.n);
 1349 &                 }
 1350 &                 for[i, j, value : R] {
 1351 &                     uVelExchange[][dimension * j] += exchangeU[index][dimension * i];
 1352 &                     uVelExchange[][dimension * j + 1] += exchangeU[index][dimension * i + 1];
 1353 & IFMACRO(dimension,3)
 1354 &                     uVelExchange[][dimension * j + 2] += exchangeU[index][dimension * i + 2];
 1355 & ENDIFMACRO
                    uKhiExchange[][j] += exchangeU[index][dimension * VhRestrictionPrivate.ndof + i];
 1356 &                 }
 1357 &             }
 1358 &         }
 1359 &     }
 1360 &     searchMethod = backupSM;
 1361 &     fespace VhPhiExchangePrivate(gluedExchange, P0);
 1362 &     fespace VhKhiExchangeP1(gluedExchange, P1);
 1363 &     int rank = mpiRank(ThName#Comm);
 1364 &     VhPhiExchangePrivate phi = abs(region - rank) < 1.0e-2 ? 1.0 : 0.0;
 1365 &     VhKhiExchangeP1 khi;
 1366 &     AddLayers(gluedExchange, phi[], safety, khi[]);
 1367 &     int[int] n2o;
 1368 &     meshN gluedExchangeSafety = trunc(gluedExchange, abs(khi) > 0.1, new2old = n2o);
 1369 &     fespace VhVelExchangeSafetyPrivate(gluedExchangeSafety, PkVel);
 1370 &     fespace VhKhiExchangeSafetyPrivate(gluedExchangeSafety, ThSinglePk);
 1371 &     int[int] map = restrict(VhKhiExchangeSafetyPrivate, VhKhiExchangePrivate, n2o);
 1372 &     VhVelExchangeSafetyPrivate defVel(uVelExchangeSafety);
 1373 &     VhKhiExchangeSafetyPrivate uKhiExchangeSafety;
 1374 &     uKhiExchangeSafety[] = uKhiExchange[](map);
 1375 &     for[j, w : map] {
 1376 &         uVelExchangeSafety[][dimension * j] = uVelExchange[][dimension * w];
 1377 &         uVelExchangeSafety[][dimension * j + 1] = uVelExchange[][dimension * w + 1];
 1378 & IFMACRO(dimension,3)
 1379 &         uVelExchangeSafety[][dimension * j + 2] = uVelExchange[][dimension * w + 2];
 1380 & ENDIFMACRO
    }
 1381 &     uKhiExchangeSafety = convect(defVel(uVelExchangeSafety), dt, uKhiExchangeSafety);
 1382 &     uKhi = uKhiExchangeSafety;
 1383 &     ThName = change(ThName, fregion = backupRegion[nuTriangle]);
 1384 &     mpiWaitAll(rqSendTh);
 1385 &     mpiWaitAll(rqSendU);
 1386 & }
 1387 & if(verbosity > 0) {
 1388 &     mpiBarrier(ThName#Comm);
 1389 &     if(mpiRank(ThName#Comm) == 0)
 1390 &         cout.scientific << " --- distributed solution convected (in " << mpiWtime() - timerConvect << ")" << endl;
 1391 & }
 1392 & }
 1393 & ENDIFMACRO
// EOM

 1394 & macro transferBase(ThName, Pk, uA, ThNew, PkNew, uANew, P)
 1395 & IFMACRO(privateDmesh#ThName)
 1396 & {
 1397 & IFMACRO(!ThName#Comm)
 1398 & NewMacro ThName#Comm()mpiCommWorld EndMacro
ENDIFMACRO
if(verbosity > 0)
 1399 &     mpiBarrier(ThName#Comm);
 1400 & real timerTransfer = mpiWtime();
 1401 & IFMACRO(!def)
 1402 & NewMacro def(i)i EndMacro
ENDIFMACRO
if(mpiSize(ThName#Comm) == 1) {
 1403 & IFMACRO(!transfer#Q)
 1404 &     def(uANew) = def(uA);
 1405 & ENDIFMACRO
IFMACRO(transfer#Q)
 1406 &     fespace VhLocalOldPrivate(ThName, Pk);
 1407 &     fespace VhLocalNewPrivate(ThNew, PkNew);
 1408 &     matrix loc = interpolate(VhLocalNewPrivate, VhLocalOldPrivate);
 1409 &     matrix<PetscScalar> locPetscScalar = loc;
 1410 &     constructor(P, uANew, uA, locPetscScalar);
 1411 & ENDIFMACRO
}
 1412 & else {
 1413 &     int backupSM = searchMethod;
 1414 &     searchMethod = 0;
 1415 &     fespace VhLocalOldPrivate(ThName, Pk);
 1416 &     fespace VhLocalNewPrivate(ThNew, PkNew);
 1417 & IFMACRO(!transfer#Q)
 1418 &     assert(uA[].n == VhLocalOldPrivate.ndof);
 1419 &     assert(uANew[].n == VhLocalNewPrivate.ndof);
 1420 & ENDIFMACRO
IFMACRO(!dimension)
 1421 & NewMacro dimension()2 EndMacro
ENDIFMACRO
IFMACRO(!meshN)
 1422 & NewMacro meshN()mesh EndMacro
ENDIFMACRO
IFMACRO(!ThName#NestedIn#ThNew)
 1423 &     real[int] bb(4 * dimension);
 1424 &     {
 1425 &         real[int] tmp(2 * dimension);
 1426 &         boundingbox(ThName, tmp);
 1427 &         bb(0:2 * dimension - 1) = tmp;
 1428 &         boundingbox(ThNew, tmp);
 1429 &         bb(2 * dimension:4 * dimension - 1) = tmp;
 1430 &         bb(0) -= max(ThName.hmax, ThNew.hmax);
 1431 &         bb(1) += max(ThName.hmax, ThNew.hmax);
 1432 &         bb(2) -= max(ThName.hmax, ThNew.hmax);
 1433 &         bb(3) += max(ThName.hmax, ThNew.hmax);
 1434 &         bb(4) -= max(ThName.hmax, ThNew.hmax);
 1435 &         bb(5) += max(ThName.hmax, ThNew.hmax);
 1436 &         bb(6) -= max(ThName.hmax, ThNew.hmax);
 1437 &         bb(7) += max(ThName.hmax, ThNew.hmax);
 1438 & IFMACRO(dimension,3)
 1439 &         bb(8) -= max(ThName.hmax, ThNew.hmax);
 1440 &         bb(9) += max(ThName.hmax, ThNew.hmax);
 1441 &         bb(10) -= max(ThName.hmax, ThNew.hmax);
 1442 &         bb(11) += max(ThName.hmax, ThNew.hmax);
 1443 & ENDIFMACRO
    }
 1444 &     int size = mpiSize(ThName#Comm);
 1445 &     real[int] bbAll(4 * dimension * size);
 1446 &     mpiAllgather(bb, bbAll, ThName#Comm);
 1447 &     int[int] rankSend(0);
 1448 &     int[int] rankRecv(0);
 1449 &     for(int i = 0; i < size; ++i) {
 1450 & IFMACRO(dimension,2)
 1451 &         if(!(bbAll[1 + 8 * i] < bb[4]
 1452 &           || bbAll[0 + 8 * i] > bb[5]
 1453 &           || bbAll[3 + 8 * i] < bb[6]
 1454 &           || bbAll[2 + 8 * i] > bb[7]))
 1455 & ENDIFMACRO
IFMACRO(dimension,3)
 1456 &         if(!(bbAll[1 + 12 * i] < bb[6]
 1457 &           || bbAll[0 + 12 * i] > bb[7]
 1458 &           || bbAll[3 + 12 * i] < bb[8]
 1459 &           || bbAll[2 + 12 * i] > bb[9]
 1460 &           || bbAll[5 + 12 * i] < bb[10]
 1461 &           || bbAll[4 + 12 * i] > bb[11]))
 1462 & ENDIFMACRO
                                                    {
 1463 &             rankRecv.resize(rankRecv.n + 1);
 1464 &             rankRecv[rankRecv.n - 1] = i;
 1465 &         }
 1466 & IFMACRO(dimension,2)
 1467 &         if(!(bbAll[5 + 8 * i] < bb[0]
 1468 &           || bbAll[4 + 8 * i] > bb[1]
 1469 &           || bbAll[7 + 8 * i] < bb[2]
 1470 &           || bbAll[6 + 8 * i] > bb[3]))
 1471 & ENDIFMACRO
IFMACRO(dimension,3)
 1472 &         if(!(bbAll[7 + 12 * i] < bb[0]
 1473 &           || bbAll[6 + 12 * i] > bb[1]
 1474 &           || bbAll[9 + 12 * i] < bb[2]
 1475 &           || bbAll[8 + 12 * i] > bb[3]
 1476 &           || bbAll[11 + 12 * i] < bb[4]
 1477 &           || bbAll[10 + 12 * i] > bb[5]))
 1478 & ENDIFMACRO
                                                    {
 1479 &             rankSend.resize(rankSend.n + 1);
 1480 &             rankSend[rankSend.n - 1] = i;
 1481 &         }
 1482 &     }
 1483 &     real[int] D, backupRegion(ThName.nt);
 1484 &     VhLocalOldPrivate<PetscScalar> def(scaledU);
 1485 & IFMACRO(!transfer#Q)
 1486 &     createPartition(ThName, D, Pk)
 1487 &     scaledU[] = uA[];
 1488 & ENDIFMACRO
IFMACRO(transfer#Q)
 1489 &     GlobalNumbering(uA, scaledU[]);
 1490 &     D.resize(scaledU[].n);
 1491 &     D = uA.D;
 1492 & ENDIFMACRO
    for[i, value : D] scaledU[][i] *= value;
 1493 &     fespace PhPartPrivate(ThName, P0);
 1494 &     {
 1495 &         PhPartPrivate backup = region;
 1496 &         backupRegion = backup[];
 1497 &         int[int] newRegion(ThName.nt);
 1498 &         int rank = mpiRank(ThName#Comm);
 1499 &         for[i, value : privateDmesh#ThName#khiDef[1]] newRegion[i] = abs(value - rank) < 1.0e-2;
 1500 &         ThName = change(ThName, fregion = newRegion[nuTriangle]);
 1501 &     }
 1502 &     meshN[int] recvTh(rankRecv.n);
 1503 &     meshN[int] sendTh(rankSend.n);
 1504 &     PetscScalar[int][int] exchangeU(rankSend.n + rankRecv.n);
 1505 &     mpiRequest[int] rqSendTh(rankSend.n);
 1506 &     mpiRequest[int] rqSendU(rankSend.n);
 1507 &     mpiRequest[int] rqRecvTh(rankRecv.n);
 1508 &     mpiRequest[int] rqRecvU(rankRecv.n);
 1509 &     for[i, value : rankRecv]
 1510 &         Irecv(processor(value, rqRecvTh[i]), recvTh[i]);
 1511 &     for[i, value : rankSend] {
 1512 &         PhPartPrivate part;
 1513 & IFMACRO(dimension,2)
 1514 &         part = (bbAll[4 + 8 * value] < x
 1515 &              && bbAll[5 + 8 * value] > x
 1516 &              && bbAll[6 + 8 * value] < y
 1517 &              && bbAll[7 + 8 * value] > y) ? 1.0 : 0.0;
 1518 & ENDIFMACRO
IFMACRO(dimension,3)
 1519 &         part = (bbAll[6 + 12 * value] < x
 1520 &              && bbAll[7 + 12 * value] > x
 1521 &              && bbAll[8 + 12 * value] < y
 1522 &              && bbAll[9 + 12 * value] > y
 1523 &              && bbAll[10 + 12 * value] < z
 1524 &              && bbAll[11 + 12 * value] > z) ? 1.0 : 0.0;
 1525 & ENDIFMACRO
        if(part[].linfty > 1.0e-2) {
 1526 &             int[int] n2o;
 1527 &             sendTh[i] = trunc(ThName, part > 1.0e-2, new2old = n2o);
 1528 &             fespace VhRestrictionPrivate(sendTh[i], Pk);
 1529 &             int[int] map = restrict(VhRestrictionPrivate, VhLocalOldPrivate, n2o);
 1530 &             exchangeU[rankRecv.n + i].resize(VhRestrictionPrivate.ndof);
 1531 &             exchangeU[rankRecv.n + i] = scaledU[](map);
 1532 &             Isend(processor(value, rqSendTh[i]), sendTh[i]);
 1533 &             Isend(processor(value, rqSendU[i]), exchangeU[rankRecv.n + i]);
 1534 &         }
 1535 &         else
            Isend(processor(value, rqSendTh[i]), sendTh[i]);
 1536 &     }
 1537 &     meshN gluedExchange;
 1538 &     {
 1539 &         meshN[int] toGlue(rankRecv.n);
 1540 &         int j = 0;
 1541 &         for[i, value : rankRecv] {
 1542 &             int index = mpiWaitAny(rqRecvTh);
 1543 &             if(recvTh[index].nt) {
 1544 &                 fespace VhRestrictionPrivate(recvTh[index], Pk);
 1545 &                 exchangeU[index].resize(VhRestrictionPrivate.ndof);
 1546 &                 Irecv(processor(rankRecv[index], rqRecvU[index]), exchangeU[index]);
 1547 &                 fespace PhRestrictionPrivate(recvTh[index], P0);
 1548 &                 PhRestrictionPrivate ind = region;
 1549 &                 if(abs(ind[].max - 1.0) < 1.0e-2) {
 1550 &                     toGlue[j] = trunc(recvTh[index], ind > 1.0e-2);
 1551 &                     ++j;
 1552 &                 }
 1553 &             }
 1554 &         }
 1555 &         toGlue.resize(j);
 1556 &         gluedExchange = gluemesh(toGlue);
 1557 &     }
 1558 &     meshN interpolateExchange;
 1559 &     fespace PhExchangePrivate(gluedExchange, P0);
 1560 &     fespace VhExchangePrivate(gluedExchange, Pk);
 1561 &     VhExchangePrivate<PetscScalar> def(uExchange);
 1562 &     for[i, value : rankRecv] {
 1563 &         int index = mpiWaitAny(rqRecvU);
 1564 &         if(index != mpiUndefined) {
 1565 &             if(recvTh[index].nt) {
 1566 &                 fespace PhRestrictionPrivate(recvTh[index], P0);
 1567 &                 matrix R = interpolate(PhRestrictionPrivate, PhExchangePrivate);
 1568 &                 if(R.nnz != R.n) {
 1569 &                     R.thresholding(1.0e-2);
 1570 &                     assert(R.nnz == R.n);
 1571 &                 }
 1572 &                 int[int] I, J;
 1573 &                 real[int] C;
 1574 &                 [I, J, C] = R;
 1575 &                 fespace VhRestrictionPrivate(recvTh[index], Pk);
 1576 &                 int[int] restriction = restrict(VhRestrictionPrivate, VhExchangePrivate, J);
 1577 &                 uExchange[](restriction) += exchangeU[index];
 1578 &             }
 1579 &         }
 1580 &     }
 1581 &     searchMethod = backupSM;
 1582 & IFMACRO(!transfer#Q)
 1583 &     def(uANew) = def(uExchange);
 1584 & ENDIFMACRO
IFMACRO(transfer#Q)
 1585 &     matrix loc = interpolate(VhLocalNewPrivate, VhExchangePrivate);
 1586 &     matrix<PetscScalar> locPetscScalar = loc;
 1587 &     constructor(P, uANew, uA, locPetscScalar, numbering = uExchange[]);
 1588 & ENDIFMACRO
    ThName = change(ThName, fregion = backupRegion[nuTriangle]);
 1589 &     mpiWaitAll(rqSendTh);
 1590 &     mpiWaitAll(rqSendU);
 1591 & ENDIFMACRO
IFMACRO(ThName#NestedIn#ThNew)
 1592 & IFMACRO(!transfer#Q)
 1593 &     def(uANew) = def(uA);
 1594 &     Mat<PetscScalar> exchange;
 1595 &     createMat(ThNew, exchange, PkNew)
 1596 &     PetscScalar[int] tmp;
 1597 &     ChangeNumbering(exchange, uANew[], tmp);
 1598 &     ChangeNumbering(exchange, uANew[], tmp, inverse = true, exchange = true);
 1599 & ENDIFMACRO
IFMACRO(transfer#Q)
 1600 &     matrix loc = interpolate(VhLocalNewPrivate, VhLocalOldPrivate);
 1601 &     matrix<PetscScalar> locPetscScalar = loc;
 1602 &     constructor(P, uANew, uA, locPetscScalar);
 1603 & ENDIFMACRO
ENDIFMACRO
}
 1604 & if(verbosity > 0) {
 1605 &     mpiBarrier(ThName#Comm);
 1606 &     if(mpiRank(ThName#Comm) == 0)
 1607 &         cout.scientific << " --- distributed solution transferred (in " << mpiWtime() - timerTransfer << ")" << endl;
 1608 & }
 1609 & }
 1610 & ENDIFMACRO
IFMACRO(!privateDmesh#ThName)
 1611 & assert(0);
 1612 & ENDIFMACRO
// EOM

 1613 & macro transferMat(ThName, Pk, A, ThNew, PkNew, ANew, P) {
 1614 & NewMacro transfer#Q() EndMacro
transferBase(ThName, Pk, A, ThNew, PkNew, ANew, P)
 1615 & }// EOM

 1616 & macro transfer(ThName, Pk, uPrivate, ThNew, PkNew, uNew) {
 1617 & transferBase(ThName, Pk, uPrivate, ThNew, PkNew, uNew, 1)
 1618 & }// EOM

 1619 & macro createParMmgCommunicators(ThName, ThParMmgName, ThN2O, ThCommunicators) {
 1620 & IFMACRO(!privateDmesh#ThName)
 1621 & assert(0);
 1622 & ENDIFMACRO
    Mat<PetscScalar> A;
 1623 &     createMat(ThName, A, P1);
 1624 &     real[int] D(ThName.nt);
 1625 &     createPartition(ThName, D, P0);
 1626 &     fespace PhPrivate(ThName, P0);
 1627 &     PhPrivate d;
 1628 &     d[] = D;
 1629 &     ThParMmgName = trunc(ThName, abs(d) > 1.0e-2, label = -111111, new2old = ThN2O);
 1630 &     fespace VhWithoutOverlapPrivate(ThParMmgName, P1);
 1631 &     varf vG(uPrivate, vPrivate) = on(-111111, uPrivate = 1.0);
 1632 &     real[int] gamma(ThParMmgName.nv);
 1633 &     gamma = vG(0, VhWithoutOverlapPrivate, tgv = -1);
 1634 &     fespace VhWithOverlapPrivate(ThName, P1);
 1635 &     int[int] restriction = restrict(VhWithoutOverlapPrivate, VhWithOverlapPrivate, ThN2O);
 1636 &     ParMmgCommunicators(A, gamma, restriction, ThCommunicators);
 1637 & }// EOM

 1638 & macro gatherDmesh(ThName, comm, ThGatherName) {
 1639 & IFMACRO(!privateDmesh#ThName)
 1640 & assert(0);
 1641 & ENDIFMACRO
IFMACRO(!ThName#Comm)
 1642 & NewMacro ThName#Comm()mpiCommWorld EndMacro
ENDIFMACRO
IFMACRO(!ThGatherName#Comm)
 1643 & NewMacro ThGatherName#Comm()mpiCommWorld EndMacro
ENDIFMACRO
IFMACRO(!meshN)
 1644 & NewMacro meshN()mesh EndMacro
ENDIFMACRO
    if(verbosity > 0 && ThName#Comm)
 1645 &         mpiBarrier(ThName#Comm);
 1646 &     real timerGather = mpiWtime();
 1647 &     int size;
 1648 &     if(ThGatherName#Comm)
 1649 &         size = mpiSize(comm);
 1650 &     else
        size = 0;
 1651 &     int reduce;
 1652 &     mpiAllReduce(size, reduce, ThName#Comm, mpiSUM);
 1653 &     assert(reduce == mpiSize(ThName#Comm));
 1654 &     meshN ThNoOverlap;
 1655 &     if(mpiSize(ThName#Comm) == 1)
 1656 &         ThNoOverlap = ThName;
 1657 &     else
        ThNoOverlap = trunc(ThName, abs(privateDmesh#ThName#khiDef[1][nuTriangle] - mpiRank(ThName#Comm)) < 1.0e-2, label = -111112);
 1658 &     if(ThGatherName#Comm) {
 1659 &         meshN[int] recvTh(size);
 1660 &         mpiRequest[int] rqRecv(size - 1);
 1661 &         for(int i = 1; i < size; ++i)
 1662 &             Irecv(processor(i, comm, rqRecv[i - 1]), recvTh[i]);
 1663 &         recvTh[0] = ThNoOverlap;
 1664 &         mpiWaitAll(rqRecv);
 1665 &         ThGatherName = gluemesh(recvTh);
 1666 &     }
 1667 &     else {
 1668 &         mpiRequest rqSend;
 1669 &         Isend(processor(0, comm, rqSend), ThNoOverlap);
 1670 &         mpiWait(rqSend);
 1671 &     }
 1672 &     if(verbosity > 0 && ThName#Comm) {
 1673 &         mpiBarrier(ThName#Comm);
 1674 &         if(mpiRank(ThName#Comm) == 0)
 1675 &             cout.scientific << " --- distributed mesh gathered (in " << mpiWtime() - timerGather << ")" << endl;
 1676 &     }
 1677 & }
 1678 & reconstructDmesh(ThGatherName)// EOM

 1679 & macro scatterDmesh(ThName, comm, ThScatterName) {
 1680 & IFMACRO(!privateDmesh#ThName)
 1681 & assert(0);
 1682 & ENDIFMACRO
IFMACRO(!ThName#Comm)
 1683 & NewMacro ThName#Comm()mpiCommWorld EndMacro
ENDIFMACRO
IFMACRO(!ThScatterName#Comm)
 1684 & NewMacro ThScatterName#Comm()mpiCommWorld EndMacro
ENDIFMACRO
IFMACRO(!meshN)
 1685 & NewMacro meshN()mesh EndMacro
ENDIFMACRO
    if(verbosity > 0 && ThScatterName#Comm)
 1686 &         mpiBarrier(ThScatterName#Comm);
 1687 &     real timerScatter = mpiWtime();
 1688 &     int size;
 1689 &     if(ThName#Comm) {
 1690 &         size = mpiSize(comm);
 1691 &     }
 1692 &     else
        size = 0;
 1693 &     int reduce;
 1694 &     mpiAllReduce(size, reduce, ThScatterName#Comm, mpiSUM);
 1695 &     assert(reduce == mpiSize(ThScatterName#Comm));
 1696 &     if(ThName#Comm) {
 1697 &         meshN ThNoOverlap;
 1698 &         if(mpiSize(ThName#Comm) == 1 || (privateDmesh#ThName#intersectionDef.n == 0 && privateDmesh#ThName#khiDef[0].n == 0 && privateDmesh#ThName#khiDef[1].n == 0))
 1699 &             ThNoOverlap = ThName;
 1700 &         else
            ThNoOverlap = trunc(ThName, abs(privateDmesh#ThName#khiDef[1][nuTriangle] - mpiRank(ThName#Comm)) < 1.0e-2, label = -111112);
 1701 &         fespace PhPartPrivate(ThNoOverlap, P0);
 1702 &         PhPartPrivate part;
 1703 &         partitionerSeq(part[], ThNoOverlap, mpiSize(comm));
 1704 &         partitionerPar(part[], ThNoOverlap, mpiCommSelf, mpiSize(comm));
 1705 &         meshN[int] sendTh(mpiSize(comm) - 1);
 1706 &         mpiRequest[int] rqSend(mpiSize(comm) - 1);
 1707 &         for(int i = 1; i < mpiSize(comm); ++i) {
 1708 &             sendTh[i - 1] = trunc(ThNoOverlap, abs(part - i) < 1.0e-2, label = -111112);
 1709 &             Isend(processor(i, comm, rqSend[i - 1]), sendTh[i - 1]);
 1710 &         }
 1711 &         ThScatterName = trunc(ThNoOverlap, abs(part) < 1.0e-2, label = -111112);
 1712 &         mpiWaitAll(rqSend);
 1713 &     }
 1714 &     else if(ThScatterName#Comm) {
 1715 &         mpiRequest rqRecv;
 1716 &         Irecv(processor(0, comm, rqRecv), ThScatterName);
 1717 &         mpiWait(rqRecv);
 1718 &     }
 1719 &     if(verbosity > 0 && ThScatterName#Comm) {
 1720 &         mpiBarrier(ThScatterName#Comm);
 1721 &         if(mpiRank(ThScatterName#Comm) == 0)
 1722 &             cout.scientific << " --- distributed mesh scattered (in " << mpiWtime() - timerScatter << ")" << endl;
 1723 &     }
 1724 & }
 1725 & reconstructDmesh(ThScatterName)// EOM

 1726 & macro gatherSolution(ThName, comm, ThGatherName, Pk, uPrivate, uNew) {
 1727 & IFMACRO(!privateDmesh#ThName)
 1728 & assert(0);
 1729 & ENDIFMACRO
IFMACRO(!privateDmesh#ThGatherName)
 1730 & assert(0);
 1731 & ENDIFMACRO
IFMACRO(!ThName#Comm)
 1732 & NewMacro ThName#Comm()mpiCommWorld EndMacro
ENDIFMACRO
IFMACRO(!ThGatherName#Comm)
 1733 & NewMacro ThGatherName#Comm()mpiCommWorld EndMacro
ENDIFMACRO
IFMACRO(!meshN)
 1734 & NewMacro meshN()mesh EndMacro
ENDIFMACRO
IFMACRO(!intN)
 1735 & NewMacro intN()int2d EndMacro
ENDIFMACRO
    if(verbosity > 0 && ThName#Comm)
 1736 &         mpiBarrier(ThName#Comm);
 1737 &     real timerGather = mpiWtime();
 1738 & IFMACRO(with,PETSc)
 1739 &     PetscScalar[int] vPrivate(uPrivate[]);
 1740 &     {
 1741 &         Mat<PetscScalar> gather;
 1742 &         createMat(ThName, gather, Pk)
 1743 &         PetscScalar[int] trash;
 1744 &         ChangeNumbering(gather, vPrivate, trash);
 1745 &         ChangeNumbering(gather, vPrivate, trash, inverse = true, exchange = false);
 1746 &     }
 1747 & ENDIFMACRO
    if(ThGatherName#Comm) {
 1748 &         meshN[int] recvTh(mpiSize(comm) - 1);
 1749 &         PetscScalar[int][int] recvU(mpiSize(comm) - 1);
 1750 &         mpiRequest[int] rqRecvTh(mpiSize(comm) - 1);
 1751 &         mpiRequest[int] rqRecvU(mpiSize(comm) - 1);
 1752 &         for(int i = 0; i < mpiSize(comm) - 1; ++i)
 1753 &             Irecv(processor(i + 1, comm, rqRecvTh[i]), recvTh[i]);
 1754 &         for(int i = 0; i < mpiSize(comm) - 1; ++i) {
 1755 &             int index = mpiWaitAny(rqRecvTh);
 1756 &             fespace VhRecvPrivate(recvTh[index], Pk);
 1757 &             recvU[index].resize(VhRecvPrivate.ndof);
 1758 &             Irecv(processor(index + 1, comm, rqRecvU[index]), recvU[index]);
 1759 &         }
 1760 &         fespace VhGlobalGatherPrivate(ThGatherName, Pk);
 1761 & IFMACRO(!with)
 1762 &         PetscScalar[int] visited(VhGlobalGatherPrivate.ndof);
 1763 &         visited = 1.0;
 1764 & ENDIFMACRO
        {
 1765 &             fespace VhRestrictionPrivate(ThName, Pk);
 1766 &             matrix R = interpolate(VhRestrictionPrivate, VhGlobalGatherPrivate);
 1767 & IFMACRO(with,PETSc)
 1768 &             uNew[] += R' * vPrivate;
 1769 & ENDIFMACRO
IFMACRO(!with)
 1770 &             PetscScalar[int] buffer = R' * uPrivate[];
 1771 &             buffer .*= visited;
 1772 &             PetscScalar[int] ones(VhRestrictionPrivate.ndof);
 1773 &             ones = -1.0;
 1774 &             visited += R' * ones;
 1775 &             for[j, value : visited] value = max(abs(value), 0.0);
 1776 &             uNew[] += buffer;
 1777 & ENDIFMACRO
        }
 1778 &         for(int i = 0; i < mpiSize(comm) - 1; ++i) {
 1779 &             int index = mpiWaitAny(rqRecvU);
 1780 &             fespace VhRestrictionPrivate(recvTh[index], Pk);
 1781 &             matrix R = interpolate(VhRestrictionPrivate, VhGlobalGatherPrivate);
 1782 & IFMACRO(with,PETSc)
 1783 &             uNew[] += R' * recvU[index];
 1784 & ENDIFMACRO
IFMACRO(!with)
 1785 &             PetscScalar[int] buffer = R' * recvU[index];
 1786 &             buffer .*= visited;
 1787 &             PetscScalar[int] ones(VhRestrictionPrivate.ndof);
 1788 &             ones = -1.0;
 1789 &             visited += R' * ones;
 1790 &             for[j, value : visited] value = max(abs(value), 0.0);
 1791 &             uNew[] += buffer;
 1792 & ENDIFMACRO
        }
 1793 & IFMACRO(with,PETSc)
 1794 &         Mat<PetscScalar> gather;
 1795 &         createMat(ThGatherName, gather, Pk)
 1796 &         exchange(gather, uNew[], scaled = false);
 1797 & ENDIFMACRO
    }
 1798 &     else {
 1799 &         mpiRequest[int] rqSend(2);
 1800 &         Isend(processor(0, comm, rqSend[0]), ThName);
 1801 &         fespace VhLocalGatherPrivate(ThName, Pk);
 1802 &         assert(uPrivate[].n == VhLocalGatherPrivate.ndof);
 1803 & IFMACRO(with,PETSc)
 1804 &         Isend(processor(0, comm, rqSend[1]), vPrivate);
 1805 & ENDIFMACRO
IFMACRO(!with)
 1806 &         Isend(processor(0, comm, rqSend[1]), uPrivate[]);
 1807 & ENDIFMACRO
        mpiWaitAll(rqSend);
 1808 &     }
 1809 &     if(verbosity > 0 && ThName#Comm) {
 1810 &         mpiBarrier(ThName#Comm);
 1811 &         if(mpiRank(ThName#Comm) == 0)
 1812 &             cout.scientific << " --- distributed solution gathered (in " << mpiWtime() - timerGather << ")" << endl;
 1813 &     }
 1814 & }// EOM

 1815 & macro scatterSolution(ThName, comm, ThScatterName, Pk, uPrivate, uNew) {
 1816 & IFMACRO(!privateDmesh#ThName)
 1817 & assert(0);
 1818 & ENDIFMACRO
IFMACRO(!privateDmesh#ThScatterName)
 1819 & assert(0);
 1820 & ENDIFMACRO
IFMACRO(!def)
 1821 & NewMacro def(i)i EndMacro
ENDIFMACRO
IFMACRO(!ThName#Comm)
 1822 & NewMacro ThName#Comm()mpiCommWorld EndMacro
ENDIFMACRO
IFMACRO(!ThScatterName#Comm)
 1823 & NewMacro ThScatterName#Comm()mpiCommWorld EndMacro
ENDIFMACRO
IFMACRO(!meshN)
 1824 & NewMacro meshN()mesh EndMacro
ENDIFMACRO
    if(verbosity > 0 && ThScatterName#Comm)
 1825 &         mpiBarrier(ThScatterName#Comm);
 1826 &     real timerScatter = mpiWtime();
 1827 &     if(mpiRank(comm) == 0) {
 1828 &         broadcast(processor(0, comm), ThName);
 1829 &         broadcast(processor(0, comm), uPrivate[]);
 1830 &         def(uNew) = def(uPrivate);
 1831 &     }
 1832 &     else {
 1833 &         meshN ThGlobalScatter;
 1834 &         broadcast(processor(0, comm), ThGlobalScatter);
 1835 &         fespace VhGlobalScatterPrivate(ThGlobalScatter, Pk);
 1836 &         VhGlobalScatterPrivate<PetscScalar> def(uGlobalScatter);
 1837 &         broadcast(processor(0, comm), uGlobalScatter[]);
 1838 &         def(uNew) = def(uGlobalScatter);
 1839 &     }
 1840 &     if(verbosity > 0 && ThScatterName#Comm) {
 1841 &         mpiBarrier(ThScatterName#Comm);
 1842 &         if(mpiRank(ThScatterName#Comm) == 0)
 1843 &             cout.scientific << " --- distributed solution scattered (in " << mpiWtime() - timerScatter << ")" << endl;
 1844 &     }
 1845 & }// EOM

 1846 & macro CoherentGlobalMesh(MatT, MatV, ThName, ThGlobal) {
 1847 & IFMACRO(!ThName#Comm)
 1848 &     NewMacro ThName#Comm()mpiCommWorld EndMacro
ENDIFMACRO
    int[int] numberingT;
 1849 &     int[int] numberingV;
 1850 &     GlobalNumbering(MatT, numberingT);
 1851 &     GlobalNumbering(MatV, numberingV);
 1852 &     fespace VhLocalPrivateT(ThName, P0);
 1853 &     fespace VhGlobalPrivateT(ThGlobal, P0);
 1854 &     fespace VhLocalPrivateV(ThName, P1);
 1855 &     fespace VhGlobalPrivateV(ThGlobal, P1);
 1856 &     PetscScalar[int] numberingScalarT(numberingT.n), globalT, reduceT(ThGlobal.nt);
 1857 &     PetscScalar[int] numberingScalarV(numberingV.n), globalV, reduceV(ThGlobal.nv);
 1858 &     for[i, value : numberingT] numberingScalarT[i] = value;
 1859 &     for[i, value : numberingV] numberingScalarV[i] = value;
 1860 &     ChangeNumbering(MatT, numberingScalarT, globalT);
 1861 &     ChangeNumbering(MatV, numberingScalarV, globalV);
 1862 &     if (ThName.nv) {
 1863 &         ChangeNumbering(MatT, numberingScalarT, globalT, inverse = true);
 1864 &         ChangeNumbering(MatV, numberingScalarV, globalV, inverse = true);
 1865 & IFMACRO(ThName#N2O)
 1866 &         int[int] restrictionT = restrict(VhLocalPrivateT, VhGlobalPrivateT, ThName#N2O);
 1867 &         int[int] restrictionV = restrict(VhLocalPrivateV, VhGlobalPrivateV, ThName#N2O);
 1868 & ENDIFMACRO
IFMACRO(!ThName#N2O)
 1869 &         int[int] restrictionT, restrictionV;
 1870 &         {
 1871 &             fespace PhGlobalPrivate(ThGlobal, P0);
 1872 &             fespace PhLocalPrivate(ThName, P0);
 1873 &             matrix R = interpolate(PhLocalPrivate, PhGlobalPrivate);
 1874 &             int[int] I, J;
 1875 &             real[int] C;
 1876 &             [I, J, C] = R;
 1877 &             restrictionT = restrict(VhLocalPrivateT, VhGlobalPrivateT, J);
 1878 &             restrictionV = restrict(VhLocalPrivateV, VhGlobalPrivateV, J);
 1879 &         }
 1880 & ENDIFMACRO
        for[i, value : restrictionT] reduceT[value] = numberingScalarT[i];
 1881 &         for[i, value : restrictionV] reduceV[value] = numberingScalarV[i];
 1882 &     }
 1883 &     globalT.resize(ThGlobal.nt);
 1884 &     globalV.resize(ThGlobal.nv);
 1885 &     mpiAllReduce(reduceT, globalT, ThName#Comm, mpiSUM);
 1886 &     mpiAllReduce(reduceV, globalV, ThName#Comm, mpiSUM);
 1887 &     int[int] globalIntT(globalT.n);
 1888 &     int[int] globalIntV(globalV.n);
 1889 &     for[i, value : globalT] globalIntT[i] = abs(value);
 1890 &     for[i, value : globalV] globalIntV[i] = abs(value);
 1891 &     ThGlobal = change(ThGlobal, renumt = globalIntT, renumv = globalIntV);
 1892 & }// EOM

 1893 & macro DmeshSave(ThName, name)saveDmesh(ThName, name)// EOM
macro DmeshLoad(ThName, name)loadDmesh(ThName, name)// EOM
macro DmeshCreate(ThName)buildDmesh(ThName)// EOM
macro DmeshReconstruct(ThName)reconstructDmesh(ThName)// EOM
macro DmeshReconstructWithNeighbors(ThName, neighborsName)reconstructDmeshWithNeighbors(ThName, neighborsName)// EOM
macro DmeshInitialize(NewName)initializeDmesh(NewName)// EOM
macro DmeshCopy(OldName, NewName)copyDmesh(OldName, NewName)// EOM
macro DmeshScatter(ThName, comm, ThScatterName)scatterDmesh(ThName, comm, ThScatterName)// EOM
macro DmeshGather(ThName, comm, ThGatherName)gatherDmesh(ThName, comm, ThGatherName)// EOM
macro PartitionCreate(ThName, PartName, PkName)createPartition(ThName, PartName, PkName)// EOM
macro ParMmgCreateCommunicators(ThName, ThParMmgName, ThN2O, ThCommunicators)createParMmgCommunicators(ThName, ThParMmgName, ThN2O, ThCommunicators)// EOM
macro VecScatter(ThName, comm, ThScatterName, Pk, uPrivate, uNew)scatterSolution(ThName, comm, ThScatterName, Pk, uPrivate, uNew)// EOM
macro VecGather(ThName, comm, ThGatherName, Pk, uPrivate, uNew)gatherSolution(ThName, comm, ThGatherName, Pk, uPrivate, uNew)// EOM
macro VecInterpolate(ThName, Pk, uPrivate, ThNew, PkNew, uNew)transfer(ThName, Pk, uPrivate, ThNew, PkNew, uNew)// EOM
macro MatCreate(ThName, MatName, PkName)createMat(ThName, MatName, PkName)// EOM
macro MatInterpolate(ThName, Pk, A, ThNew, PkNew, ANew, P)transferMat(ThName, Pk, A, ThNew, PkNew, ANew, P)// EOM
ENDIFMACRO
    2 @ macro macroDDMidp()1// EOM
    3 @ include "getARGV.idp" // for gestion of FreeFem++ argument and in version 3.10-1 FH
    2 :  // F. Hecht 
    3 :  // Usage:  getARGV(n,defaultvalue) // get the fist used default valeu
    4 :  //  or     getARGV(after,defaultvalue) // get the arg after after 
    5 :  // the type of delfaut value given the return type: int,double, string
    6 :  // Modif version 3.54-2  Jan 2018 (add ones include)
    7 :  IFMACRO(!getARGVidp)
    8 &  macro getARGVidp 1 //
    9 &  
   10 &  
   11 &  func int usedARGV(int n)
   12 & {
   13 &   int k=1,ii=1,kk=1,ret=-1;
   14 &   for(int i=1;i<ARGV.n;++i)
   15 &    {
   16 &    // cout <<i<< " "<< ARGV[i] << " " <<(ARGV[i]=="-v") << " " << kk << "==" 
   17 &    //      << n << " " << ARGV[i].rfind("dp") << " " <<ARGV[i].length-2  << endl;
   18 &         
   19 &        if(ARGV[i]=="-v") i++;
   20 &        else if(ARGV[i]=="-fglut") i++;
   21 &        else if(ARGV[i]=="-ffg") i++;
   22 &        else if(ARGV[i]=="-glut") i++;
   23 &        else if(ARGV[i]=="-f") i++;
   24 &        else if(ARGV[i]=="-nw") ii;
   25 &        else if(ARGV[i]=="-wait") ii;
   26 &        else if(ARGV[i]=="-ne") ii;
   27 &        else if(ARGV[i]=="-cd") ii;
   28 &        //else if(ARGV[i].rfind(".edp")==ARGV[i].length-4 ) ii;
   29 &        else if(i==1) ii;
   30 &        else if(kk++==n) {ret=i;}
   31 &       // else cout << " +++ \n";
   32 &      }
   33 &    //  cout << ret << endl;
   34 &     return ret;
   35 & }
   36 & 
   37 & func int usedARGV(string after)
   38 & {
   39 &   int ret=-1;
   40 &   for(int i=ARGV.n-1;i>=0;--i)        
   41 &        if(ARGV[i]==after) { ret=++i; break;}
   42 &   if(ARGV.n<ret) ret=-1;
   43 &   return ret;
   44 & }
   45 & 
   46 & func int getARGV(int n,int default)
   47 & {
   48 &    int d=default;
   49 &    int k=usedARGV(n);
   50 &    if(k>0) d=strtol(ARGV[k]);
   51 &     return d;
   52 & }
   53 & func real getARGV(int n,real default)
   54 & {
   55 &    real d=default;
   56 &    int k=usedARGV(n);
   57 &    if(k>0) d=strtod(ARGV[k]);
   58 &    return d;
   59 & }
   60 & func string getARGV(int n,string default)
   61 & {
   62 &    string d=default;
   63 &    int k=usedARGV(n);
   64 &    if(k>0) d=ARGV[k];
   65 &     return d;
   66 & }
   67 & 
   68 & func int getARGV(string after,int default)
   69 & {
   70 &    int d=default;
   71 &    int k=usedARGV(after);
   72 &    if(k>0) d=strtol(ARGV[k]);
   73 &     return d;
   74 & }
   75 & func real getARGV(string after,real default)
   76 & {
   77 &    real d=default;
   78 &    int k=usedARGV(after);
   79 &    if(k>0) d=strtod(ARGV[k]);
   80 &    return d;
   81 & }
   82 & func string getARGV(string after,string default)
   83 & {
   84 &    string d=default;
   85 &    int k=usedARGV(after);
   86 &    if(k>0) d=ARGV[k];
   87 &     return d;
   88 & }
   89 & 
   90 & /*
   91 & cout << getARGV(1,100) << endl;
   92 & cout << getARGV(2,200.) << endl;
   93 & cout << getARGV(3,"300.000") << endl;
   94 & cout << getARGV("-n"," xxx") << endl;
   95 & */
   96 & ENDIFMACRO
    4 @ IFMACRO(!partitioner)
    5 & macro partitioner()metis// EOM
ENDIFMACRO
    6 @ IFMACRO(partitioner,metis)
    7 & load "metis"
    8 & macro partitionerSeq(part, Th, size){ if(size <= 1) part = 0; else metisdual(part, Th, size); }// EOM
macro partitionerPar(part, Th, comm, size)broadcast(processor(0, comm), part)// EOM
ENDIFMACRO
    9 @ IFMACRO(partitioner,scotch)
   10 & load "scotch"
   11 & macro partitionerSeq(part, Th, size){ if(size <= 1) part = 0; else scotch(part, Th, size); }// EOM
macro partitionerPar(part, Th, comm, size)broadcast(processor(0, comm), part)// EOM
ENDIFMACRO
   12 @ IFMACRO(partitioner,parmetis)
   13 & load "parmetis"
   14 & macro partitionerSeq(part, Th, size)// EOM
macro partitionerPar(part, Th, comm, size)parmetis(part, Th, size, communicator = comm, worker = getARGV("-parmetis_worker", 1))// EOM
ENDIFMACRO
   13 @ load "parmetis"
   14 @ macro partitionerSeq(part, Th, size) )  // EOM
   15 @ macro partitionerPar(part, Th, comm, size)parmetis(part, Th, size, communicator = comm, worker = getARGV("-parmetis_worker", 1)) )  // EOM
   16 @ 
   15 @ IFMACRO(!partitionerSeq)
   16 & cout << "The macro 'partitioner' must be set to 'metis', 'scotch', or 'parmetis'" << endl;
   17 & exit(1);
   18 & ENDIFMACRO
   19 @ IFMACRO(dimension,2)
   20 & macro meshN()mesh// EOM             // two-dimensional problem
macro intN()int2d// EOM             // two-dimensional integral
macro intN1()int1d// EOM            // one-dimensional integral
macro readmeshN()readmesh// EOM     // two-dimensional problem
macro defVel(uP)[uP, uP#Y]// EOM    // two-dimensional velocity for convect/advect
ENDIFMACRO
   21 @ IFMACRO(dimension,3)
   22 & load "msh3"
   23 & macro meshN()mesh3// EOM            // three-dimensional problem
macro intN()int3d// EOM             // three-dimensional integral
macro intN1()int2d// EOM            // two-dimensional integral
macro readmeshN()readmesh3// EOM    // three-dimensional problem
macro defVel(uP)[uP, uP#Y, uP#Z]// EOM // three-dimensional velocity for convect/advect
ENDIFMACRO
   22 @ load "msh3" (already loaded: msh3)
   23 @ macro meshN()mesh3// EOM            // three-dimensional problem
   24 @ macro intN()int3d// EOM             // three-dimensional integral
   25 @ macro intN1()int2d// EOM            // two-dimensional integral
   26 @ macro readmeshN()readmesh3// EOM    // three-dimensional problem
   27 @ macro defVel(uP)[uP, uP#Y, uP#Z] )  // EOM // three-dimensional velocity for convect/advect
   28 @ 
   24 @ IFMACRO(dimension,3S)
   25 & load "msh3"
   26 & macro meshN()meshS// EOM            // three-dimensional surface problem
macro intN()int2d// EOM             // two-dimensional integral
macro intN1()int1d// EOM            // one-dimensional integral
macro intNxN()int2dx2d// EOM        // two-dimensional integral for BEM
ENDIFMACRO
   27 @ IFMACRO(dimension,3L)
   28 & load "msh3"
   29 & macro meshN()meshL// EOM            // three-dimensional line problem
macro intN()int1d// EOM             // one-dimensional integral
macro intN1()int0d// EOM            // zero-dimensional integral
macro intNxN()int1dx1d// EOM        // one-dimensional integral for BEM
ENDIFMACRO
   30 @ 
   31 @ macro plotDmesh(Th, params)
   32 # if(!NoGraphicWindow || usedARGV("-fglut") != -1) {
   33 #     fespace PhPlotPrivate(Th, P0);
   34 #     PhPlotPrivate plt;
   35 #     if(Th.nt)
   36 #         plt[] = mpirank;
   37 # NewMacro defPlt#Th(uPrivate)uPrivate EndMacro
    plotMPI(Th, plt, P0, defPlt#Th, real, params)
   38 # } )  //
   39 @ 
   40 @ macro plotD(Th, uPrivate, params)
   41 # if(!NoGraphicWindow || usedARGV("-fglut") != -1) {
   42 #     fespace VhPlotPrivate(Th, P1);
   43 #     VhPlotPrivate plt;
   44 #     if(Th.nt)
   45 #         plt = uPrivate;
   46 # NewMacro defPlt#Th(vPrivate)vPrivate EndMacro
    plotMPI(Th, plt, P1, defPlt#Th, real, params)
   47 # } )  //
   48 @ 
   49 @ macro plotMPI(Th, uPrivate, Pk, def, K, params)
   50 # if(!NoGraphicWindow || usedARGV("-fglut") != -1) {
   51 # IFMACRO(!meshN)
   52 #     NewMacro meshN()mesh EndMacro
ENDIFMACRO
IFMACRO(!def)
   53 #     NewMacro def(i)i EndMacro
ENDIFMACRO
    meshN ThCurrent = Th;
   54 #     fespace XhPlotPrivate(ThCurrent, Pk);
   55 #     XhPlotPrivate<K> def(uSend);
   56 #     if(ThCurrent.nt)
   57 #         def(uSend) = uPrivate;
   58 #     if(mpirank == 0) {
   59 #         meshN[int] meshTab(mpisize);
   60 #         XhPlotPrivate<K>[int] def(uTab)(mpisize);
   61 #         if(ThCurrent.nt)
   62 #             uTab[0][] = uSend[];
   63 #         meshTab[0] = ThCurrent;
   64 #         mpiRequest[int] rq(mpisize - 1);
   65 #         for(int i = 1; i < mpisize; ++i)
   66 #             Irecv(processor(i, mpiCommWorld, rq[i - 1]), meshTab[i]);
   67 #         mpiWaitAll(rq);
   68 #         for(int i = 1; i < mpisize; ++i) {
   69 #             ThCurrent = meshTab[i];
   70 #             if(ThCurrent.nt)
   71 #                 Irecv(processor(i, mpiCommWorld, rq[i - 1]), uTab[i][]);
   72 #         }
   73 #         mpiWaitAll(rq);
   74 #         plot(def(uTab), params);
   75 #     }
   76 #     else {
   77 #         mpiRequest[int] rq(2);
   78 #         Isend(processor(0, rq[0]), ThCurrent);
   79 #         if(ThCurrent.nt)
   80 #             Isend(processor(0, rq[1]), uSend[]);
   81 #         mpiWaitAll(rq);
   82 #     }
   83 # } )  // EOM
   84 @ 
   85 @ macro partitionPrivate(meshName, borderName, globalName, PhGlobalPrivate, VhGlobalPrivate, part, rank, size, s, overlap, level, prolongation, D, P, intersection, comm, fakeInterface, PkPart, defPart, initPart, bs) {
   86 #     int backupSM = searchMethod;
   87 #     searchMethod = 1;
   88 #     assert(level >= 1);
   89 # IFMACRO(!privateCreatePartition)
   90 # IFMACRO(!privateCreateMat)
   91 #     intersection.resize(1);
   92 #     intersection[0].resize(0);
   93 #     PhGlobalPrivate supp;
   94 #     VhGlobalPrivate suppSmooth;
   95 #     {
   96 #         int constant = rank;
   97 #         for[i, value : supp[]] value = abs(part[][i] - constant) < 0.1;
   98 #         AddLayers(globalName, supp[], 2 * overlap, suppSmooth[]);
   99 #         int[int] n2o;
  100 #         meshN neighbors;
  101 #         bool connected = false;
  102 #         for[i, value : suppSmooth[]] if(abs(value - 0.5) < 0.5) connected = true;
  103 #         if(!connected)
  104 #             n2o.resize(0);
  105 #         else
            neighbors = trunc(globalName, suppSmooth > 0.001 && suppSmooth < 0.999, new2old = n2o);
  106 #         int[int] partOverlap(n2o.n);
  107 #         for[i, value : n2o] partOverlap[i] = part[][value];
  108 #         Unique(partOverlap, intersection[0], remove = constant);
  109 #         if(s > 1 && level <= 1) {
  110 #             globalName = trunc(globalName, suppSmooth > 0.001, split = s);
  111 #             supp = abs(part - constant) < 0.1;
  112 #             suppSmooth = 0;
  113 #             AddLayers(globalName, supp[], 2 * overlap, suppSmooth[]);
  114 #         }
  115 #     }
  116 #     int[int] n2oGlobalPrivate, n2oNeighbor;
  117 # IFMACRO(!privateDmesh#CartesianPartitioning)
  118 #     globalName = trunc(globalName, suppSmooth > 0.001, label = 9999, new2old = n2oGlobalPrivate);
  119 # ENDIFMACRO
    real eps = globalName.measure;
  120 #     real[int] epsTab(intersection[0].n);
  121 #     mpiRequest[int] rq(2 * intersection[0].n);
  122 #     if(mpiSize(comm) == size) {
  123 #         for(int j = 0; j < intersection[0].n; ++j)
  124 #             Irecv(processor(intersection[0][j], comm, rq[j]), epsTab[j]);
  125 #         for(int j = 0; j < intersection[0].n; ++j)
  126 #             Isend(processor(intersection[0][j], comm, rq[intersection[0].n + j]), eps);
  127 #     }
  128 #     else
        epsTab = 1.0e+30;
  129 #     suppSmooth = suppSmooth;
  130 # IFMACRO(!privateDmesh#N2O)
  131 #     meshName[level - 1] = trunc(globalName, suppSmooth > 0.501, label = fakeInterface, new2old = n2oNeighbor);
  132 # IFMACRO(privateDmesh#CartesianPartitioning)
  133 #     real[int] bb(2 * dimension);
  134 #     boundingbox(meshName[level - 1], bb);
  135 #     meshName[level - 1] = trunc(globalName, x > bb[0] && x < bb[1] && y > bb[2] && y < bb[3]
  136 # IFMACRO(dimension,3)
  137 #                                                                                              && z > bb[4] && z < bb[5]
  138 # ENDIFMACRO
                                                                                                                      , label = fakeInterface);
  139 #     globalName = meshName[level - 1];
  140 #     n2oNeighbor = 0:globalName.nt - 1;
  141 # ENDIFMACRO
ENDIFMACRO
IFMACRO(privateDmesh#N2O)
  142 #     meshName[level - 1] = trunc(globalName, suppSmooth > 0.501, label = fakeInterface, new2old = privateDmesh#N2O);
  143 # IFMACRO(privateDmesh#CartesianPartitioning)
  144 #     real[int] bb(2 * dimension);
  145 #     boundingbox(meshName[level - 1], bb);
  146 #     meshName[level - 1] = trunc(globalName, x > bb[0] && x < bb[1] && y > bb[2] && y < bb[3]
  147 # IFMACRO(dimension,3)
  148 #                                                                                              && z > bb[4] && z < bb[5]
  149 # ENDIFMACRO
                                                                                                                      , label = fakeInterface, new2old = privateDmesh#N2O);
  150 #     globalName = meshName[level - 1];
  151 #     n2oNeighbor = 0:globalName.nt - 1;
  152 # ENDIFMACRO
IFMACRO(!privateDmesh#CartesianPartitioning)
  153 #     {
  154 #         int[int] backup = privateDmesh#N2O;
  155 #         int[int] new = n2oGlobalPrivate(privateDmesh#N2O);
  156 #         privateDmesh#N2O.resize(new.n);
  157 #         privateDmesh#N2O = new;
  158 #         n2oNeighbor.resize(backup.n);
  159 #         n2oNeighbor = backup;
  160 #     }
  161 # ENDIFMACRO
ENDIFMACRO
    if(level > 1) {
  162 #         prolongation.resize(level - 1);
  163 #         if(s > 1) {
  164 #             meshN globalNameRefined = globalName;
  165 #             for(int i = level - 1; i > 0; --i) {
  166 #                 globalNameRefined = trunc(globalNameRefined, 1, split = s);
  167 #                 meshName[i - 1] = trunc(globalNameRefined, suppSmooth > 0.501, label = fakeInterface);
  168 #                 fespace WhLocalRefinedPrivate(meshName[i - 1], P);
  169 #                 fespace WhLocalCoarsePrivate(meshName[i], P);
  170 #                 prolongation[i - 1] = interpolate(WhLocalRefinedPrivate, WhLocalCoarsePrivate);
  171 #             }
  172 #         }
  173 #         else
            for(int i = level - 1; i > 0; --i)
  174 #                 meshName[i - 1] = meshName[i];
  175 #     }
  176 #     if(!removeZeros && (fakeInterface != -111111 || overlap != 1)) {
  177 #         if(suppSmooth[].min < 0.501) {
  178 #             supp = supp;
  179 #             borderName[level - 1] = trunc(globalName, (suppSmooth > (overlap - 0.999) / real(2 * overlap)) && (suppSmooth < 0.501), label = (abs(fakeInterface) + 1) * 100);
  180 #             if(s > 1)
  181 #                 for(int i = level - 2; i >= 0; --i) {
  182 #                     borderName[i] = trunc(borderName[i + 1], 1, split = s, label = (abs(fakeInterface) + 1) * 100);
  183 #                     meshN tempRefined = meshName[i] + borderName[i];
  184 #                     fespace PhRefinedPrivate(tempRefined, P0);
  185 #                     PhRefinedPrivate suppRefined = supp;
  186 #                     fespace VhBorderRefinedPrivate(borderName[i], P1);
  187 #                     VhBorderRefinedPrivate suppBorder = suppRefined;
  188 #                     borderName[i] = trunc(borderName[i], suppBorder > 0.01);
  189 #                 }
  190 #             else
                for(int i = level - 2; i >= 0; --i)
  191 #                     borderName[i] = borderName[i + 1];
  192 #         }
  193 #     }
  194 #     fespace VhLocalPrivate(meshName[level - 1], P1);
  195 # IFMACRO(!privateDmesh#meshName)
  196 # NewMacro privateDmesh#meshName#intersectionDef()partitionIntersectionTab EndMacro
    real[int][int] partitionIntersectionTab(1 + intersection[0].n);
  197 #     privateDmesh#meshName#intersectionDef[0].resize(intersection[0].n);
  198 # ENDIFMACRO
IFMACRO(privateBuildDmesh)
  199 #     privateDmesh#meshName#intersectionDef.resize(1 + intersection[0].n);
  200 #     privateDmesh#meshName#intersectionDef[0].resize(intersection[0].n);
  201 # ENDIFMACRO
    VhLocalPrivate khi = max(2 * suppSmooth - 1.0, 0.0);
  202 #     VhLocalPrivate sum;
  203 #     sum[] = khi[];
  204 #     VhGlobalPrivate phi;
  205 #     if(n2oGlobalPrivate.n == globalName.nt && s == 1) {
  206 #         real[int] restrictionPart(n2oGlobalPrivate.n);
  207 #         restrictionPart = part[](n2oGlobalPrivate);
  208 #         part = 0.0;
  209 #         part[] = restrictionPart;
  210 #     }
  211 #     else
        part = part;
  212 #     n2oGlobalPrivate.resize(0);
  213 #     int numberIntersection = 0;
  214 #     {
  215 #         int[int] restriction = restrict(VhLocalPrivate, VhGlobalPrivate, n2oNeighbor);
  216 #         n2oNeighbor.resize(0);
  217 #         mpiWaitAll(rq);
  218 #         for(int i = 0; i < intersection[0].n; ++i) {
  219 #             PhGlobalPrivate suppPartition = abs(part - intersection[0][i]) < 0.1;
  220 #             AddLayers(globalName, suppPartition[], overlap, phi[]);
  221 #             if(min(eps, epsTab[i]) > 0.0) {
  222 #                 if(intN(globalName, qforder = 2)(phi) / min(eps, epsTab[i]) > 1.0e-10) {
  223 #                     privateDmesh#meshName#intersectionDef[1 + numberIntersection].resize(restriction.n);
  224 #                     privateDmesh#meshName#intersectionDef[1 + numberIntersection] = phi[](restriction);
  225 #                     if(!trueRestrict)
  226 #                         sum[] += privateDmesh#meshName#intersectionDef[1 + numberIntersection];
  227 #                     intersection[0][numberIntersection++] = intersection[0][i];
  228 #                 }
  229 #             }
  230 #         }
  231 #     }
  232 #     if(numberIntersection != intersection[0].n) {
  233 #         intersection[0].resize(numberIntersection);
  234 #         privateDmesh#meshName#intersectionDef.resize(1 + numberIntersection);
  235 #     }
  236 #     intersection.resize(1 + level * numberIntersection);
  237 # ENDIFMACRO
IFMACRO(privateCreateMat)
  238 #     assert(level == 1);
  239 #     int numberIntersection = privateDmesh#meshName#intersectionDef.n - 1;
  240 #     intersection.resize(1 + level * numberIntersection);
  241 #     intersection[0].resize(numberIntersection);
  242 #     intersection[0] = lround(privateDmesh#meshName#intersectionDef[0]);
  243 #     fespace VhLocalPrivate(meshName[level - 1], P1);
  244 # IFMACRO(privateDmesh#N2O)
  245 # IFMACRO(privateDmesh#Original)
  246 # IFMACRO(privateDmesh#Restriction)
  247 #     {
  248 #         fespace WhLocalPrivate(meshName[level - 1], P);
  249 #         fespace WhOriginalPrivate(privateDmesh#Original, P);
  250 #         privateDmesh#Restriction.resize(WhOriginalPrivate.ndof);
  251 #         privateDmesh#Restriction = restrict(WhLocalPrivate, WhOriginalPrivate, privateDmesh#N2O);
  252 #     }
  253 # ENDIFMACRO
ENDIFMACRO
ENDIFMACRO
ENDIFMACRO
IFMACRO(privateBuildDmesh)
  254 #     privateDmesh#meshName#intersectionDef[0].resize(numberIntersection);
  255 #     for[i, value : intersection[0]] privateDmesh#meshName#intersectionDef[0][i] = value;
  256 # ENDIFMACRO
    meshN[int] meshIntersection(numberIntersection);
  257 # IFMACRO(!privateCreateMat)
  258 #     int[int][int] n2oIntersection(0);
  259 #     if(trueRestrict && mpiSize(comm) == size && removeZeros)
  260 #         n2oIntersection.resize(numberIntersection);
  261 # ENDIFMACRO
    for(int j = 0; j < (s == 1 ? 1 : level); ++j) {
  262 #         for(int i = 0; i < numberIntersection; ++i) {
  263 #             int[int] n2o;
  264 #             VhLocalPrivate partitionIntersection;
  265 #             partitionIntersection[] = privateDmesh#meshName#intersectionDef[1 + i];
  266 #             meshIntersection[i] = trunc(meshName[j], partitionIntersection > 1.0e-6, new2old = n2o, label = 9999);
  267 # IFMACRO(privateDmesh#CartesianPartitioning)
  268 #             real[int] bb(2 * dimension);
  269 #             boundingbox(meshIntersection[i], bb);
  270 #             meshIntersection[i] = trunc(meshName[j], x > bb[0] && x < bb[1] && y > bb[2] && y < bb[3]
  271 # IFMACRO(dimension,3)
  272 #                                                                                                       && z > bb[4] && z < bb[5]
  273 # ENDIFMACRO
                                                                                                                               , new2old = n2o, label = 9999);
  274 # ENDIFMACRO
IFMACRO(!privateCreateMat)
  275 #             if(j == 0 && trueRestrict && mpiSize(comm) == size && removeZeros) {
  276 #                 n2oIntersection[i].resize(n2o.n);
  277 #                 n2oIntersection[i] = n2o;
  278 #             }
  279 #             if(!removeZeros)
  280 # ENDIFMACRO
            {
  281 # IFMACRO(vectorialfe)
  282 #                 fespace singleComponentWhPrivate(meshName[j], vectorialfe);
  283 #                 fespace WhIntersectionPrivate(meshIntersection[i], vectorialfe);
  284 # ENDIFMACRO
IFMACRO(!vectorialfe)
  285 #                 fespace singleComponentWhPrivate(meshName[j], P);
  286 #                 fespace WhIntersectionPrivate(meshIntersection[i], P);
  287 # ENDIFMACRO
                intersection[1 + i + j * numberIntersection] = restrict(WhIntersectionPrivate, singleComponentWhPrivate, n2o);
  288 #             }
  289 #         }
  290 #     }
  291 # IFMACRO(!privateCreateMat)
  292 #     if(s == 1 && level > 1 && !removeZeros)
  293 #         for(int j = 1; j < level; ++j)
  294 #             for(int i = 0; i < numberIntersection; ++i) {
  295 #                 intersection[1 + i + j * numberIntersection].resize(intersection[1 + i].n);
  296 #                 intersection[1 + i + j * numberIntersection] = intersection[1 + i];
  297 #             }
  298 #     for(int i = 0; i < level - 1; ++i) {
  299 #         fespace VhRefinedPrivate(meshName[i], P1);
  300 #         fespace PhRefinedPrivate(meshName[i], P0);
  301 #         PhRefinedPrivate partRefined = part;
  302 #         PhRefinedPrivate supp = abs(partRefined - rank) < 0.1;
  303 #         varf vSupp(uPrivate, vPrivate) = intN(meshName[i], qforder = 1)(supp * vPrivate);
  304 #         VhRefinedPrivate khiL;
  305 #         khiL[] = vSupp(0, VhRefinedPrivate);
  306 #         khiL = khiL > 0.0;
  307 #         VhRefinedPrivate sum = khiL;
  308 #         for(int j = 0; j < numberIntersection; ++j) {
  309 #             supp = abs(partRefined - intersection[0][j]) < 0.1;
  310 #             VhRefinedPrivate phiL;
  311 #             phiL[] = vSupp(0, VhRefinedPrivate);
  312 #             phiL = phiL > 0.0;
  313 #             sum[] += phiL[];
  314 #         }
  315 #         khiL[] ./= sum[];
  316 #         fespace WhRefinedPrivate(meshName[i], PkPart);
  317 #         WhRefinedPrivate defPart(func2vec);
  318 #         defPart(func2vec) = initPart(khiL);
  319 #         D[i].resize(WhRefinedPrivate.ndof);
  320 #         D[i] = func2vec[];
  321 #     }
  322 #     if(!trueRestrict)
  323 #         khi[] ./= sum[];
  324 #     else {
  325 #         khi = abs(part - rank) < 0.1;
  326 #         VhLocalPrivate sigma = part;
  327 #         for(int i = 0; i < numberIntersection; ++i) {
  328 #             if(rank < intersection[0][i]) {
  329 #                 for[j, value : khi[]] {
  330 #                     if(value > 0.9 && abs(sigma[][j] - intersection[0][i]) < 0.1)
  331 #                         value = 0.0;
  332 #                 }
  333 #             }
  334 #         }
  335 #     }
  336 #     if(trueRestrict && mpiSize(comm) == size && removeZeros) {
  337 #         assert(level == 1);
  338 #         meshN ThIntersection;
  339 #         mpiRequest[int] rq(2 * numberIntersection);
  340 #         int[int] skip(0);
  341 #         {
  342 #             fespace PhIntersectionPrivate(ThIntersection, P0);
  343 #             PhIntersectionPrivate[int] recv(numberIntersection);
  344 #             PhIntersectionPrivate[int] send(numberIntersection);
  345 #             for(int i = 0; i < numberIntersection; ++i) {
  346 #                 ThIntersection = meshIntersection[i];
  347 #                 Irecv(processor(intersection[0][i], comm, rq[i]), recv[i][]);
  348 #                 send[i] = khi;
  349 #                 Isend(processor(intersection[0][i], comm, rq[numberIntersection + i]), send[i][]);
  350 #             }
  351 #             real[int] tmpRemove(meshName[0].nt);
  352 #             int[int] n2oRemove;
  353 # IFMACRO(!privateDmesh#N2O)
  354 #             meshName[0] = trunc(meshName[0], khi > 1.0e-6, label = 9999, new2old = n2oRemove);
  355 # ENDIFMACRO
IFMACRO(privateDmesh#N2O)
  356 #             {
  357 #                 int[int] n2oFilter;
  358 #                 meshName[0] = trunc(meshName[0], khi > 1.0e-6, label = 9999, new2old = n2oRemove);
  359 #                 n2oFilter.resize(n2oRemove.n);
  360 #                 n2oFilter = privateDmesh#N2O(n2oRemove);
  361 #                 privateDmesh#N2O.resize(n2oFilter.n);
  362 #                 privateDmesh#N2O = n2oFilter;
  363 #             }
  364 # ENDIFMACRO
            khi = khi;
  365 #             fespace PhLocalPrivate(meshName[0], P0);
  366 #             for(int k = 0; k < 2 * numberIntersection; ++k) {
  367 #                 int i = mpiWaitAny(rq);
  368 #                 if(i < numberIntersection) {
  369 #                     ThIntersection = meshIntersection[i];
  370 #                     PhIntersectionPrivate intersection = send[i] > 1.0e-6 && recv[i] > 1.0e-6;
  371 #                     if(intersection[].l2 > 1.0e-6) {
  372 #                         tmpRemove = 0.0;
  373 #                         tmpRemove(n2oIntersection[i]) = intersection[];
  374 #                         PhLocalPrivate afterTrunc;
  375 #                         afterTrunc[] = tmpRemove(n2oRemove);
  376 #                         meshIntersection[i] = trunc(meshName[0], afterTrunc > 1.0e-6, label = 9999, new2old = n2oIntersection[i]);
  377 #                     }
  378 #                     else {
  379 #                         skip.resize(skip.n + 1);
  380 #                         skip[skip.n - 1] = i;
  381 #                     }
  382 #                 }
  383 #             }
  384 #         }
  385 #         skip.sort;
  386 #         real[int][int] recv(numberIntersection);
  387 #         real[int][int] send(numberIntersection);
  388 #         int j = 0;
  389 #         for(int i = 0; i < numberIntersection; ++i) {
  390 #             bool skipped = false;
  391 #             if(j < skip.n) {
  392 #                 if(skip[j] == i) {
  393 #                     ++j;
  394 #                     skipped = true;
  395 #                 }
  396 #             }
  397 #             if(!skipped) {
  398 #                 recv[i].resize(meshIntersection[i].nv);
  399 #                 Irecv(processor(intersection[0][i], comm, rq[i]), recv[i]);
  400 #                 fespace VhIntersectionPrivate(meshIntersection[i], P1);
  401 #                 int[int] restriction = restrict(VhIntersectionPrivate, VhLocalPrivate, n2oIntersection[i]);
  402 #                 send[i].resize(meshIntersection[i].nv);
  403 #                 send[i] = khi[](restriction);
  404 #                 Isend(processor(intersection[0][i], comm, rq[numberIntersection + i]), send[i]);
  405 #             }
  406 #         }
  407 #         mpiWaitAll(rq);
  408 #         intersection.resize(1 + numberIntersection - skip.n);
  409 #         j = 0;
  410 #         for(int i = 0; i < numberIntersection; ++i) {
  411 #             bool skipped = false;
  412 #             if(j < skip.n) {
  413 #                 if(skip[j] == i) {
  414 #                     ++j;
  415 #                     skipped = true;
  416 #                 }
  417 #             }
  418 #             if(!skipped) {
  419 # IFMACRO(vectorialfe)
  420 #                 fespace singleComponentWhPrivate(meshName[0], vectorialfe);
  421 #                 fespace WhIntersectionPrivate(meshIntersection[i], vectorialfe);
  422 # ENDIFMACRO
IFMACRO(!vectorialfe)
  423 #                 fespace singleComponentWhPrivate(meshName[0], P);
  424 #                 fespace WhIntersectionPrivate(meshIntersection[i], P);
  425 # ENDIFMACRO
                intersection[1 + i - j] = restrict(WhIntersectionPrivate, singleComponentWhPrivate, n2oIntersection[i]);
  426 #                 fespace VhIntersectionPrivate(meshIntersection[i], P1);
  427 #                 int[int] restriction = restrict(VhIntersectionPrivate, VhLocalPrivate, n2oIntersection[i]);
  428 #                 privateDmesh#meshName#intersectionDef[1 + i - j].resize(VhLocalPrivate.ndof);
  429 #                 privateDmesh#meshName#intersectionDef[1 + i - j] = 0.0;
  430 #                 privateDmesh#meshName#intersectionDef[1 + i - j](restriction) = recv[i];
  431 #                 intersection[0][i - j] = intersection[0][i];
  432 #             }
  433 #         }
  434 #         numberIntersection -= skip.n;
  435 #         intersection[0].resize(numberIntersection);
  436 #         privateDmesh#meshName#intersectionDef.resize(1 + numberIntersection);
  437 #         privateDmesh#meshName#intersectionDef[0].resize(numberIntersection);
  438 #         for[i, value : intersection[0]] privateDmesh#meshName#intersectionDef[0][i] = value;
  439 #         if(fakeInterface != -111111 || overlap != 1) {
  440 #             PhGlobalPrivate suppPartition = khi > 0.1;
  441 #             AddLayers(globalName, suppPartition[], 1, phi[]);
  442 #             borderName[0] = trunc(globalName, phi > 0.001 && phi < 0.501, label = (abs(fakeInterface) + 1) * 100);
  443 #         }
  444 #     }
  445 # ENDIFMACRO
IFMACRO(vectorialfe)
  446 #     if(bs > 1)
  447 #         for(int i = 0; i < intersection.n - 1; ++i) {
  448 #             int n = intersection[1 + i].n;
  449 #             intersection[1 + i].resize(n * bs);
  450 #             for(int j = n - 1; j != -1; --j)
  451 #                 for(int k = bs - 1; k != -1; --k)
  452 #                     intersection[1 + i][j * bs + k] = intersection[1 + i][j] * bs + k;
  453 #         }
  454 # ENDIFMACRO
ENDIFMACRO
IFMACRO(privateCreatePartition)
  455 #     fespace VhLocalPrivate(meshName[level - 1], P1);
  456 # IFMACRO(!privateCreateMat)
  457 #     VhLocalPrivate khi;
  458 # ENDIFMACRO
ENDIFMACRO
IFMACRO(privateCreateMat)
  459 #     VhLocalPrivate khi;
  460 #     khi[] = privateDmesh#meshName#khiDef[0];
  461 # ENDIFMACRO
    fespace WhPartPrivate(meshName[level - 1], PkPart);
  462 #     WhPartPrivate defPart(func2vec);
  463 #     D[level - 1].resize(WhPartPrivate.ndof);
  464 #     if((WhPartPrivate.ndof % meshName[level - 1].nt) == 0 && WhPartPrivate.ndof != meshName[level - 1].nv) {
  465 #         int constant = rank;
  466 # IFMACRO(privateCreateMat)
  467 #         fespace PhLocalPrivate(meshName[level - 1], P0);
  468 #         PhLocalPrivate partLocal;
  469 #         partLocal[] = privateDmesh#meshName#khiDef[1];
  470 #         defPart(func2vec) = initPart(abs(partLocal - constant) < 0.1);
  471 # ENDIFMACRO
IFMACRO(!privateCreateMat)
  472 #         defPart(func2vec) = initPart(abs(part - constant) < 0.1);
  473 # ENDIFMACRO
    }
  474 #     else if(WhPartPrivate.ndof == meshName[level - 1].nv && (WhPartPrivate.ndof % meshName[level - 1].nt) != 0)
  475 #         func2vec[] = khi[];
  476 #     else
        defPart(func2vec) = initPart(khi);
  477 #     D[level - 1] = func2vec[];
  478 # IFMACRO(privateDmesh#PostProcessD)
  479 #     privateDmesh#PostProcessD(D[level - 1]);
  480 # ENDIFMACRO
IFMACRO(!privateCreatePartition)
  481 # IFMACRO(!privateCreateMat)
  482 # IFMACRO(privateBuildDmesh)
  483 #     fespace PhLocalPrivate(meshName[level - 1], P0);
  484 #     PhLocalPrivate partLocal;
  485 #     partLocal = part;
  486 #     privateDmesh#meshName#khiDef[1].resize(partLocal[].n);
  487 #     privateDmesh#meshName#khiDef[1] = partLocal[];
  488 # ENDIFMACRO
ENDIFMACRO
ENDIFMACRO
    searchMethod = backupSM;
  489 # } )  // EOM
  490 @ 
  491 @ macro saveDmesh(ThName, name)
  492 # IFMACRO(privateDmesh#ThName)
  493 # {
  494 # IFMACRO(!ThName#Comm)
  495 # NewMacro ThName#Comm()mpiCommWorld EndMacro
ENDIFMACRO
IFMACRO(dimension,3)
  496 # savemesh(ThName, name + "_" + mpiRank(ThName#Comm) + "_" + mpiSize(ThName#Comm) + ".meshb");
  497 # ENDIFMACRO
IFMACRO(dimension,2)
  498 # savemesh(ThName, name + "_" + mpiRank(ThName#Comm) + "_" + mpiSize(ThName#Comm) + ".msh");
  499 # ENDIFMACRO
ofstream khi(name + "_" + mpiRank(ThName#Comm) + "_" + mpiSize(ThName#Comm) + ".khi");
  500 # khi << privateDmesh#ThName#khi << endl;
  501 # khi << privateDmesh#ThName#intersection << endl;
  502 # IFMACRO(ThName#N2O)
  503 # khi << ThName#N2O << endl;
  504 # ENDIFMACRO
}
  505 # ENDIFMACRO
IFMACRO(!privateDmesh#ThName)
  506 # assert(0);
  507 # ENDIFMACRO
EndMacro )  
  508 @ 
  509 @ macro loadDmesh(ThName, name)
  510 # IFMACRO(!privateDmesh#ThName)
  511 # NewMacro privateDmesh#ThName()privateDmesh#ThName EndMacro
NewMacro privateDmesh#ThName#khi()privateDmesh#ThName#khiDef EndMacro
NewMacro privateDmesh#ThName#intersection()privateDmesh#ThName#intersectionDef EndMacro
real[int][int] privateDmesh#ThName#khi(2);
  512 # real[int][int] privateDmesh#ThName#intersection;
  513 # ENDIFMACRO
{
  514 # IFMACRO(!ThName#Comm)
  515 # NewMacro ThName#Comm()mpiCommWorld EndMacro
ENDIFMACRO
IFMACRO(dimension,3)
  516 # ThName = readmesh3(name + "_" + mpiRank(ThName#Comm) + "_" + mpiSize(ThName#Comm) + ".meshb");
  517 # ENDIFMACRO
IFMACRO(dimension,2)
  518 # ThName = readmesh(name + "_" + mpiRank(ThName#Comm) + "_" + mpiSize(ThName#Comm) + ".msh");
  519 # ENDIFMACRO
privateDmesh#ThName#khi.resize(2);
  520 # privateDmesh#ThName#khi[0].resize(ThName.nv);
  521 # privateDmesh#ThName#khi[1].resize(ThName.nt);
  522 # if(mpiSize(ThName#Comm) > 1) {
  523 #     ifstream khi(name + "_" + mpiRank(ThName#Comm) + "_" + mpiSize(ThName#Comm) + ".khi");
  524 #     int m;
  525 #     khi >> m;
  526 #     assert(m == 2);
  527 #     khi >> privateDmesh#ThName#khi[0];
  528 #     khi >> privateDmesh#ThName#khi[1];
  529 #     khi >> m;
  530 #     privateDmesh#ThName#intersection.resize(m);
  531 #     for(int j = 0; j < m; ++j) {
  532 #         int n;
  533 #         khi >> n;
  534 #         privateDmesh#ThName#intersection[j].resize(n);
  535 #         for[i, value : privateDmesh#ThName#intersection[j]]
  536 #             khi >> value;
  537 #     }
  538 # IFMACRO(ThName#N2O)
  539 #     ThName#N2O.resize(ThName.nt);
  540 #     khi >> ThName#N2O;
  541 # ENDIFMACRO
}
  542 # else {
  543 #     privateDmesh#ThName#khi[0] = 1.0;
  544 #     privateDmesh#ThName#khi[1] = 1.0;
  545 # IFMACRO(ThName#N2O)
  546 #     ThName#N2O.resize(ThName.nt);
  547 #     ThName#N2O = 0:ThName.nt - 1;
  548 # ENDIFMACRO
}
  549 # }
  550 # EndMacro )  
  551 @ 
  552 @ macro buildDmesh(ThName)
  553 # IFMACRO(!privateDmesh#ThName)
  554 # NewMacro privateDmesh#ThName()privateDmesh#ThName EndMacro
NewMacro privateDmesh#ThName#khi()privateDmesh#ThName#khiDef EndMacro
NewMacro privateDmesh#ThName#intersection()privateDmesh#ThName#intersectionDef EndMacro
real[int][int] privateDmesh#ThName#khi(2);
  555 # real[int][int] privateDmesh#ThName#intersection;
  556 # ENDIFMACRO
{
  557 # IFMACRO(!meshN)
  558 # IFMACRO(dimension,3)
  559 # NewMacro meshN()mesh3 EndMacro     /* three-dimensional problem             */
  560 # NewMacro intN()int3d EndMacro      /* three-dimensional integral            */
  561 # ENDIFMACRO
IFMACRO(dimension,3S)
  562 # NewMacro meshN()meshS EndMacro     /* three-dimensional surface problem     */
  563 # NewMacro intN()int2d EndMacro      /* two-dimensional integral              */
  564 # ENDIFMACRO
IFMACRO(dimension,3L)
  565 # NewMacro meshN()meshL EndMacro     /* three-dimensional line problem        */
  566 # NewMacro intN()int1d EndMacro      /* one-dimensional integral              */
  567 # ENDIFMACRO
IFMACRO(!meshN)
  568 # NewMacro meshN()mesh EndMacro      /* two-dimensional problem               */
  569 # NewMacro intN()int2d EndMacro      /* two-dimensional integral              */
  570 # ENDIFMACRO
ENDIFMACRO
IFMACRO(!ThName#Comm)
  571 # NewMacro ThName#Comm()mpiCommWorld EndMacro
ENDIFMACRO
NewMacro privateBuildDmesh()1 EndMacro
int[int][int] intersection;
  572 # NewMacro privateDmesh#ThTab()privateDmesh#ThName EndMacro
NewMacro privateDmesh#ThTab#khi()privateDmesh#ThName#khiDef EndMacro
NewMacro privateDmesh#ThTab#intersection()privateDmesh#ThName#intersectionDef EndMacro
IFMACRO(ThName#N2O)
  573 # NewMacro privateDmesh#N2O()ThName#N2O EndMacro
IFMACRO(ThName#RefinementFactor)
  574 # exit(10); /* not currently implemented */
  575 # ENDIFMACRO
ENDIFMACRO
IFMACRO(ThName#UserPartitioning)
  576 # IFMACRO(ThName#RefinementFactor)
  577 # exit(11); /* not currently implemented */
  578 # ENDIFMACRO
buildWithPartitioning(ThName, ThName#UserPartitioning, 1, intersection, privateDmesh#ThName#khi[0], P1, ThName#Comm);
  579 # ENDIFMACRO
IFMACRO(ThName#Periodicity)
  580 # IFMACRO(ThName#RefinementFactor)
  581 # exit(12); /* not currently implemented */
  582 # ENDIFMACRO
buildPeriodic(ThName, 1, intersection, privateDmesh#ThName#khi[0], P1, ThName#Comm, ThName#Periodicity);
  583 # ENDIFMACRO
IFMACRO(!ThName#UserPartitioning)
  584 # IFMACRO(!ThName#Periodicity)
  585 # IFMACRO(ThName#CartesianPartitioning)
  586 # IFMACRO(!dimension)
  587 # NewMacro dimension()2 EndMacro
ENDIFMACRO
NewMacro privateDmesh#CartesianPartitioning() EndMacro
IFMACRO(ThName#RefinementFactor)
  588 # exit(13); /* not currently implemented */
  589 # ENDIFMACRO
IFMACRO(removeZeros,true)
  590 # exit(103); /* not currently implemented */
  591 # ENDIFMACRO
IFMACRO(trueRestrict,true)
  592 # exit(103); /* not currently implemented */
  593 # ENDIFMACRO
ENDIFMACRO
IFMACRO(!ThName#RefinementFactor)
  594 # int privateS = 1;
  595 # ENDIFMACRO
IFMACRO(ThName#RefinementFactor)
  596 # int privateS = ThName#RefinementFactor;
  597 # ENDIFMACRO
IFMACRO(ThName#Overlap)
  598 # meshN privateBorder;
  599 # buildOverlap(ThName, privateBorder, -111111, privateS, ThName#Overlap, intersection, privateDmesh#ThName#khi[0], P1, ThName#Comm, false);
  600 # ENDIFMACRO
IFMACRO(!ThName#Overlap)
  601 # build(ThName, privateS, intersection, privateDmesh#ThName#khi[0], P1, ThName#Comm);
  602 # ENDIFMACRO
ENDIFMACRO
ENDIFMACRO
}
  603 # EndMacro )  
  604 @ 
  605 @ macro reconstructDmesh(ThName)
  606 # IFMACRO(!privateDmesh#ThName)
  607 # NewMacro privateDmesh#ThName()privateDmesh#ThName EndMacro
NewMacro privateDmesh#ThName#khi()privateDmesh#ThName#khiDef EndMacro
NewMacro privateDmesh#ThName#intersection()privateDmesh#ThName#intersectionDef EndMacro
real[int][int] privateDmesh#ThName#khi(2);
  608 # real[int][int] privateDmesh#ThName#intersection;
  609 # ENDIFMACRO
IFMACRO(!ThName#Comm)
  610 # NewMacro ThName#Comm()mpiCommWorld EndMacro
ENDIFMACRO
if(ThName#Comm) {
  611 # IFMACRO(!dimension)
  612 #     NewMacro dimension()2 EndMacro
ENDIFMACRO
IFMACRO(!meshN)
  613 #     NewMacro meshN()mesh EndMacro
    NewMacro intN()int2d EndMacro
ENDIFMACRO
    int[int] neighbors;
  614 #     {
  615 #         real[int] bb(2 * dimension);
  616 #         boundingbox(ThName, bb);
  617 #         real[int] bbAll(2 * dimension * mpiSize(ThName#Comm));
  618 #         mpiAllgather(bb, bbAll, ThName#Comm);
  619 #         real hmax;
  620 #         {
  621 #             real tmp = ThName.hmax;
  622 #             mpiAllReduce(tmp, hmax, ThName#Comm, mpiMAX);
  623 #         }
  624 #         int between = 0;
  625 #         int size = mpiSize(ThName#Comm);
  626 #         int rank = mpiRank(ThName#Comm);
  627 #         for(int i = 0; i < size; ++i) {
  628 #             if(i != rank &&
  629 # IFMACRO(dimension,2)
  630 #             !(bbAll[1 + 4 * i] < bb[0] - hmax
              || bbAll[0 + 4 * i] > bb[1] + hmax
              || bbAll[3 + 4 * i] < bb[2] - hmax
              || bbAll[2 + 4 * i] > bb[3] + hmax)
  631 # ENDIFMACRO
IFMACRO(dimension,3)
  632 #             !(bbAll[1 + 6 * i] < bb[0] - hmax
              || bbAll[0 + 6 * i] > bb[1] + hmax
              || bbAll[3 + 6 * i] < bb[2] - hmax
              || bbAll[2 + 6 * i] > bb[3] + hmax
              || bbAll[5 + 6 * i] < bb[4] - hmax
              || bbAll[4 + 6 * i] > bb[5] + hmax)
  633 # ENDIFMACRO
                                                 ) {
  634 #                 neighbors.resize(neighbors.n + 1);
  635 #                 neighbors[neighbors.n - 1] = i;
  636 #             }
  637 #         }
  638 #     }
  639 #     reconstructDmeshWithNeighbors(ThName, neighbors)
  640 # }
  641 # EndMacro )  
  642 @ macro reconstructDmeshWithNeighbors(ThName, neighborsName)
  643 # IFMACRO(!privateDmesh#ThName)
  644 # NewMacro privateDmesh#ThName()privateDmesh#ThName EndMacro
NewMacro privateDmesh#ThName#khi()privateDmesh#ThName#khiDef EndMacro
NewMacro privateDmesh#ThName#intersection()privateDmesh#ThName#intersectionDef EndMacro
real[int][int] privateDmesh#ThName#khi(2);
  645 # real[int][int] privateDmesh#ThName#intersection;
  646 # ENDIFMACRO
{
  647 # IFMACRO(!ThName#Comm)
  648 #     NewMacro ThName#Comm()mpiCommWorld EndMacro
ENDIFMACRO
    real[int] part;
  649 #     {
  650 #         if(verbosity > 0)
  651 #             mpiBarrier(ThName#Comm);
  652 #         real timerReconstruction = mpiWtime();
  653 #         varf vG(uPrivate, vPrivate) = on(labels(ThName), uPrivate = 1.0);
  654 #         fespace VhGammaPrivate(ThName, P1);
  655 #         VhGammaPrivate gamma;
  656 #         gamma[] = vG(0, VhGammaPrivate, tgv = -1);
  657 #         meshN[int] ThTab(neighborsName.n + 2);
  658 #         neighborsName.sort;
  659 #         int between = 0;
  660 #         int rank = mpiRank(ThName#Comm);
  661 #         for(int i = 0; i < neighborsName.n; ++i)
  662 #             if(neighborsName[i] > rank) {
  663 #                 between = i;
  664 #                 break;
  665 #             }
  666 #         if(neighborsName.n)
  667 #             if(neighborsName[neighborsName.n - 1] < rank)
  668 #                 between = neighborsName.n;
  669 #         mpiRequest[int] rqRecv(neighborsName.n);
  670 #         for[i, value : neighborsName]
  671 #             Irecv(processor(value, ThName#Comm, rqRecv[i]), ThTab[i + (i >= between)]);
  672 # IFMACRO(!ThName#Overlap)
  673 #         ThTab[between] = trunc(ThName, gamma > 0.01, label = -111112);
  674 # ENDIFMACRO
IFMACRO(ThName#Overlap)
  675 #         ThTab[between] = ThName;
  676 # ENDIFMACRO
        mpiRequest[int] rqSend(neighborsName.n);
  677 #         for[i, value : neighborsName]
  678 # IFMACRO(!ThName#Overlap)
  679 #             Isend(processor(value, ThName#Comm, rqSend[i]), ThTab[between]);
  680 # ENDIFMACRO
IFMACRO(ThName#Overlap)
  681 #             Isend(processor(value, ThName#Comm, rqSend[i]), ThName);
  682 # ENDIFMACRO
IFMACRO(!ThName#Overlap)
  683 #         ThTab[neighborsName.n + 1] = trunc(ThName, gamma < 0.01, label = -111112);
  684 # ENDIFMACRO
        mpiWaitAll(rqRecv);
  685 # IFMACRO(dimension,3)
  686 #         ThName = gluemesh(ThTab);
  687 #         ThName = change(ThName, rmlfaces = -111112);
  688 # ENDIFMACRO
IFMACRO(dimension,2)
  689 #         ThName = gluemesh(ThTab, labtodel = -111112);
  690 # ENDIFMACRO
        part.resize(ThName.nt);
  691 #         int m = 0;
  692 #         for(int i = 0; i < between; ++i) {
  693 #             part(m:m + ThTab[i].nt - 1) = neighborsName[i];
  694 #             m += ThTab[i].nt;
  695 #         }
  696 #         part(m:m + ThTab[between].nt - 1) = rank;
  697 #         m += ThTab[between].nt;
  698 #         for(int i = between; i < neighborsName.n; ++i) {
  699 #             part(m:m + ThTab[i + 1].nt - 1) = neighborsName[i];
  700 #             m += ThTab[i + 1].nt;
  701 #         }
  702 #         if(m != ThName.nt)
  703 #             part(m:ThName.nt - 1) = rank;
  704 #         mpiWaitAll(rqSend);
  705 #         if(verbosity > 0) {
  706 #             mpiBarrier(ThName#Comm);
  707 #             if(mpiRank(ThName#Comm) == 0)
  708 #                 cout.scientific << " --- distributed mesh reconstructed (in " << mpiWtime() - timerReconstruction << ")" << endl;
  709 #         }
  710 #     }
  711 #     NewMacro privateBuildDmesh()1 EndMacro
    NewMacro privateReconstructDmesh()1 EndMacro
    int[int][int] intersection;
  712 #     NewMacro privateDmesh#ThTab()privateDmesh#ThName EndMacro
    NewMacro privateDmesh#ThTab#khi()privateDmesh#ThName#khiDef EndMacro
    NewMacro privateDmesh#ThTab#intersection()privateDmesh#ThName#intersectionDef EndMacro
IFMACRO(ThName#N2O)
  713 #     NewMacro privateDmesh#N2O()ThName#N2O EndMacro
ENDIFMACRO
IFMACRO(ThName#Overlap)
  714 #     meshN ThBorder;
  715 #     buildOverlapWithPartitioning(ThName, ThBorder, part, -111111, 1, ThName#Overlap, intersection, privateDmesh#ThName#khi[0], P1, ThName#Comm, false);
  716 # ENDIFMACRO
IFMACRO(!ThName#Overlap)
  717 #     buildWithPartitioning(ThName, part, 1, intersection, privateDmesh#ThName#khi[0], P1, ThName#Comm);
  718 # ENDIFMACRO
}
  719 # EndMacro )  
  720 @ macro initializeDmesh(NewName)
  721 # IFMACRO(!privateDmesh#NewName)
  722 # NewMacro privateDmesh#NewName()privateDmesh#NewName EndMacro
NewMacro privateDmesh#NewName#khi()privateDmesh#NewName#khiDef EndMacro
NewMacro privateDmesh#NewName#intersection()privateDmesh#NewName#intersectionDef EndMacro
real[int][int] privateDmesh#NewName#khi(2);
  723 # real[int][int] privateDmesh#NewName#intersection;
  724 # ENDIFMACRO
EndMacro )  
  725 @ macro copyDmesh(OldName, NewName)
  726 # DmeshInitialize(NewName)
  727 # IFMACRO(privateDmesh#OldName)
  728 # NewName = OldName;
  729 # privateDmesh#NewName#khi[0].resize(privateDmesh#OldName#khi[0].n);
  730 # privateDmesh#NewName#khi[0] = privateDmesh#OldName#khi[0];
  731 # privateDmesh#NewName#khi[1].resize(privateDmesh#OldName#khi[1].n);
  732 # privateDmesh#NewName#khi[1] = privateDmesh#OldName#khi[1];
  733 # privateDmesh#NewName#intersection.resize(privateDmesh#OldName#intersection.n);
  734 # for(int i = 0; i < privateDmesh#NewName#intersection.n; ++i) {
  735 #     privateDmesh#NewName#intersection[i].resize(privateDmesh#OldName#intersection[i].n);
  736 #     privateDmesh#NewName#intersection[i] = privateDmesh#OldName#intersection[i];
  737 # }
  738 # ENDIFMACRO
EndMacro )  
  739 @ macro createMat(ThName, MatName, PkName)
  740 # IFMACRO(privateDmesh#ThName)
  741 # {
  742 # IFMACRO(!meshN)
  743 # IFMACRO(dimension,3)
  744 # NewMacro meshN()mesh3 EndMacro     /* three-dimensional problem             */
  745 # NewMacro intN()int3d EndMacro      /* three-dimensional integral            */
  746 # ENDIFMACRO
IFMACRO(dimension,3S)
  747 # NewMacro meshN()meshS EndMacro     /* three-dimensional surface problem     */
  748 # NewMacro intN()int2d EndMacro      /* two-dimensional integral              */
  749 # ENDIFMACRO
IFMACRO(dimension,3L)
  750 # NewMacro meshN()meshL EndMacro     /* three-dimensional line problem        */
  751 # NewMacro intN()int1d EndMacro      /* one-dimensional integral              */
  752 # ENDIFMACRO
IFMACRO(!meshN)
  753 # NewMacro meshN()mesh EndMacro      /* two-dimensional problem               */
  754 # NewMacro intN()int2d EndMacro      /* two-dimensional integral              */
  755 # ENDIFMACRO
ENDIFMACRO
IFMACRO(!ThName#Comm)
  756 # NewMacro ThName#Comm()mpiCommWorld EndMacro
ENDIFMACRO
IFMACRO(!privateCreateMatCheckDmesh)
  757 # if(ThName.nv != privateDmesh#ThName#khi[0].n || (privateDmesh#ThName#khi[1].n && ThName.nt != privateDmesh#ThName#khi[1].n)) {
  758 #     DmeshCreate(ThName)
  759 # }
  760 # ENDIFMACRO
NewMacro privateCreateMat()1 EndMacro
int[int][int] intersection;
  761 # real[int][int] DTab(1);
  762 # meshN[int] ThTab(1);
  763 # ThTab[0] = ThName;
  764 # NewMacro privateDmesh#ThTab()privateDmesh#ThName EndMacro
NewMacro privateDmesh#ThTab#khi()privateDmesh#ThName#khiDef EndMacro
NewMacro privateDmesh#ThTab#intersection()privateDmesh#ThName#intersectionDef EndMacro
IFMACRO(!def)
  765 # NewMacro def(i)i EndMacro
ENDIFMACRO
IFMACRO(!init)
  766 # NewMacro init(i)i EndMacro
ENDIFMACRO
if(mpiSize(ThName#Comm) > 1) {
  767 # IFMACRO(ThName#N2O)
  768 # IFMACRO(ThName#Original)
  769 # IFMACRO(ThName#Restriction)
  770 #     NewMacro privateDmesh#N2O()ThName#N2O EndMacro
    NewMacro privateDmesh#Original()ThName#Original EndMacro
    NewMacro privateDmesh#Restriction()ThName#Restriction EndMacro
ENDIFMACRO
ENDIFMACRO
ENDIFMACRO
IFMACRO(!ThName#PkPart)
  771 #     NewMacro ThName#PkPart()PkName EndMacro
ENDIFMACRO
IFMACRO(ThName#CartesianPartitioning)
  772 #     NewMacro privateDmesh#CartesianPartitioning() EndMacro
IFMACRO(!dimension)
  773 #     NewMacro dimension()2 EndMacro
ENDIFMACRO
ENDIFMACRO
IFMACRO(ThName#PostProcessD)
  774 #     NewMacro privateDmesh#PostProcessD(arg)ThName#PostProcessD(arg) EndMacro
IFMACRO(removeZeros,true)
  775 #     exit(105); /* not currently implemented */
  776 # ENDIFMACRO
IFMACRO(trueRestrict,true)
  777 #     exit(105); /* not currently implemented */
  778 # ENDIFMACRO
ENDIFMACRO
    partitionPrivate(ThTab, privateCreateMat, privateCreateMat, privateCreateMat, privateCreateMat, privateCreateMat, mpiRank(ThName#Comm), mpiSize(ThName#Comm), 1, 1, 1, privateCreateMat, DTab, PkName, intersection, ThName#Comm, -111111, ThName#PkPart, def, init, 1)
  779 # }
  780 # else {
  781 #     fespace WhGlobalPrivate(ThName, PkName);
  782 #     DTab[0].resize(WhGlobalPrivate.ndof);
  783 #     DTab[0] = 1;
  784 #     intersection.resize(0);
  785 # IFMACRO(ThName#N2O)
  786 # IFMACRO(ThName#Original)
  787 # IFMACRO(ThName#Restriction)
  788 #     ThName#Restriction.resize(WhGlobalPrivate.ndof);
  789 #     ThName#Restriction = 0:WhGlobalPrivate.ndof - 1;
  790 # ENDIFMACRO
ENDIFMACRO
ENDIFMACRO
}
  791 # IFMACRO(!privateCreatePartition)
  792 # constructor(MatName, DTab[0].n, intersection, DTab[0], communicator = ThName#Comm);
  793 # ENDIFMACRO
IFMACRO(privateCreatePartition)
  794 # privateCreatePartition.resize(DTab[0].n);
  795 # privateCreatePartition = DTab[0];
  796 # ENDIFMACRO
}
  797 # ENDIFMACRO
IFMACRO(!privateDmesh#ThName)
  798 # DmeshCreate(ThName)
  799 # {
  800 # IFMACRO(!meshN)
  801 # IFMACRO(dimension,3)
  802 #     NewMacro meshN()mesh3 EndMacro     /* three-dimensional problem             */
  803 #     NewMacro intN()int3d EndMacro      /* three-dimensional integral            */
  804 # ENDIFMACRO
IFMACRO(dimension,3S)
  805 #     NewMacro meshN()meshS EndMacro     /* three-dimensional surface problem     */
  806 #     NewMacro intN()int2d EndMacro      /* two-dimensional integral              */
  807 # ENDIFMACRO
IFMACRO(dimension,3L)
  808 #     NewMacro meshN()meshL EndMacro     /* three-dimensional line problem        */
  809 #     NewMacro intN()int1d EndMacro      /* one-dimensional integral              */
  810 # ENDIFMACRO
IFMACRO(!meshN)
  811 #     NewMacro meshN()mesh EndMacro      /* two-dimensional problem               */
  812 #     NewMacro intN()int2d EndMacro      /* two-dimensional integral              */
  813 # ENDIFMACRO
ENDIFMACRO
    NewMacro privateCreateMatCheckDmesh()1 EndMacro
    MatCreate(ThName, MatName, PkName)
  814 # }
  815 # ENDIFMACRO
EndMacro )  
  816 @ 
  817 @ macro createPartition(ThName, PartName, PkName)
  818 # IFMACRO(!privateDmesh#ThName)
  819 # DmeshCreate(ThName)
  820 # ENDIFMACRO
{
  821 #     NewMacro privateCreateMatCheckDmesh()1 EndMacro
    NewMacro privateCreatePartition()PartName EndMacro
    MatCreate(ThName, privateCreatePartition, PkName)
  822 # }
  823 # EndMacro )  
  824 @ 
  825 @ macro buildOverlapEdgePeriodicRecursive(Th, ThBorder, fakeInterface, s, overlap, level, prolongation, intersection, DTab, P, comm, excluded, PkPart, defPart, initPart, labPeriodic, userPartitioning, bs) {
  826 # IFMACRO(!def)
  827 #     NewMacro def(i)i EndMacro
ENDIFMACRO
IFMACRO(!init)
  828 #     NewMacro init(i)i EndMacro
ENDIFMACRO
    Th.resize(level);
  829 #     ThBorder.resize(level);
  830 #     prolongation.resize(level - 1);
  831 #     real timerPartition = mpiWtime();
  832 #     if(mpiSize(comm) > 1 && !excluded) {
  833 #         meshN ThGlobal = Th[level - 1];
  834 #         fespace PhGlobalPrivate(ThGlobal, P0);
  835 #         fespace VhGlobalPrivate(ThGlobal, P1);
  836 #         PhGlobalPrivate partGlobal;
  837 # IFMACRO(!privateReconstructDmesh)
  838 # IFMACRO(privateDmesh#CartesianPartitioning)
  839 #         {
  840 #             real[int] bb(2 * dimension);
  841 #             boundingbox(ThGlobal, bb);
  842 #             PhGlobalPrivate xx = x / (bb[1] - bb[0]), yy = y / (bb[3] - bb[2])
  843 # IFMACRO(dimension,2)
  844 #                                                                               ;
  845 #             int i = int(sqrt(mpiSize(comm)));
  846 #             while(mpiSize(comm) % i != 0)
  847 #                 --i;
  848 #             int j = mpiSize(comm) / i;
  849 #             partGlobal = int(j * xx) + int(i * yy) * j;
  850 # ENDIFMACRO
IFMACRO(dimension,3)
  851 #                                                                               , zz = z / (bb[5] - bb[4]);
  852 #             i = int(mpiSize(comm)^(0.333333333333333));
  853 #             while(mpiSize(comm) % i != 0)
  854 #                 --i;
  855 #             real p = mpiSize(comm) / i;
  856 #             j = int(sqrt(p));
  857 #             while(p % j != 0)
  858 #                 --j;
  859 #             real k = int(p / j);
  860 #             partGlobal = int(i * zz) * k * j + int(j * yy) * k + int(k * xx);
  861 # ENDIFMACRO
        }
  862 # ENDIFMACRO
IFMACRO(!privateDmesh#CartesianPartitioning)
  863 #         if(userPartitioning.n != PhGlobalPrivate.ndof || labPeriodic.n > 0) {
  864 #             timerPartition = mpiWtime();
  865 #             meshN ThGlobalPeriodic;
  866 #             if(labPeriodic.n > 0) {
  867 #                 VhGlobalPrivate marker;
  868 #                 for(int i = 0; i < labPeriodic.n; ++i) {
  869 #                     varf vMarker(uPrivate, vPrivate) = on(labPeriodic[i], uPrivate = 1.0);
  870 #                     marker[] += vMarker(0, VhGlobalPrivate, tgv = -1);
  871 #                 }
  872 #                 PhGlobalPrivate partPeriodic = marker > 0.1;
  873 #                 while(1) {
  874 #                     AddLayers(ThGlobal, partPeriodic[], 1 + overlap, marker[]);
  875 #                     partPeriodic = marker > 0.001;
  876 #                     ThGlobalPeriodic = trunc(ThGlobal, partPeriodic < 0.999);
  877 #                     if(ThGlobal.nt / real(ThGlobalPeriodic.nt) > mpisize / real(mpisize - 1))
  878 #                         break;
  879 #                 }
  880 #             }
  881 #             if(mpiRank(comm) == 0) {
  882 #                 if(verbosity > 0)
  883 #                     cout.scientific << " --- global mesh of " << ThGlobal.nt << " elements (prior to refinement) partitioned with " << Stringification(partitioner);
  884 #                 if(labPeriodic.n > 0) {
  885 #                     fespace PhPeriodicPrivate(ThGlobalPeriodic, P0);
  886 #                     PhPeriodicPrivate partPeriodic;
  887 #                     if(mpiSize(comm) > 2) {
  888 #                         partitionerSeq(partPeriodic[], ThGlobalPeriodic, mpiSize(comm) - 1);
  889 #                         partPeriodic[] += 1.0;
  890 #                     }
  891 #                     else
                        partPeriodic[] = 1.0;
  892 #                     partGlobal = partPeriodic;
  893 #                 }
  894 #                 else {
  895 #                     partitionerSeq(partGlobal[], ThGlobal, mpiSize(comm));
  896 #                 }
  897 #             }
  898 #             if(labPeriodic.n > 0 && Stringification(partitioner) != "metis" && Stringification(partitioner) != "scotch") {
  899 #                 fespace PhPeriodicPrivate(ThGlobalPeriodic, P0);
  900 #                 PhPeriodicPrivate partPeriodic;
  901 #                 if(mpiSize(comm) > 2) {
  902 #                     partitionerPar(partPeriodic[], ThGlobalPeriodic, comm, mpiSize(comm) - 1);
  903 #                     partPeriodic[] += 1.0;
  904 #                 }
  905 #                 else
                    partPeriodic[] = 1.0;
  906 #                 partGlobal = partPeriodic;
  907 #             }
  908 #             else
                partitionerPar(partGlobal[], ThGlobal, comm, mpiSize(comm));
  909 #             if(mpiRank(comm) == 0 && verbosity > 0)
  910 #                 cout.scientific << " (in " << mpiWtime() - timerPartition << ")" << endl;
  911 #             timerPartition = mpiWtime();
  912 #         }
  913 #         else {
  914 #             partGlobal[] = userPartitioning;
  915 #         }
  916 # ENDIFMACRO
ENDIFMACRO
IFMACRO(privateReconstructDmesh)
  917 #         partGlobal[] = userPartitioning;
  918 # ENDIFMACRO
IFMACRO(!trueRestrict)
  919 #         bool trueRestrict = usedARGV("-true_restrict") != -1;
  920 # ENDIFMACRO
IFMACRO(!removeZeros)
  921 #         bool removeZeros = trueRestrict && overlap == 1 && usedARGV("-remove_zeros") != -1;
  922 # ENDIFMACRO
        if(verbosity > 0) {
  923 #             mpiBarrier(comm);
  924 #             timerPartition = mpiWtime();
  925 #         }
  926 # IFMACRO(privateBuildDmesh)
  927 #         NewMacro defP1(i)i EndMacro
        NewMacro initP1(i)i EndMacro
        partitionPrivate(Th, ThBorder, ThGlobal, PhGlobalPrivate, VhGlobalPrivate, partGlobal, mpiRank(comm), mpiSize(comm), s, overlap, level, prolongation, DTab, P, intersection, comm, fakeInterface, PkPart, defP1, initP1, bs)
  928 # ENDIFMACRO
IFMACRO(!privateBuildDmesh)
  929 #         partitionPrivate(Th, ThBorder, ThGlobal, PhGlobalPrivate, VhGlobalPrivate, partGlobal, mpiRank(comm), mpiSize(comm), s, overlap, level, prolongation, DTab, P, intersection, comm, fakeInterface, PkPart, defPart, initPart, bs)
  930 # ENDIFMACRO
    }
  931 #     else if(mpiSize(comm) == 1) {
  932 #         for(int i = level - 1; i > 0; --i) {
  933 #             Th[i - 1] = trunc(Th[i], 1, split = s);
  934 #             fespace WhLocalRefinedPrivate(Th[i - 1], P);
  935 #             fespace WhLocalCoarsePrivate(Th[i], P);
  936 #             prolongation[i - 1] = interpolate(WhLocalRefinedPrivate, WhLocalCoarsePrivate);
  937 #             DTab[i].resize(WhLocalCoarsePrivate.ndof);
  938 #             DTab[i] = 1.0;
  939 #         }
  940 #         if(level == 1) {
  941 # IFMACRO(privateBuildDmesh)
  942 # IFMACRO(privateDmesh#N2O)
  943 #             if(s > 1)
  944 #                 Th[0] = trunc(Th[0], 1, split = s, new2old = privateDmesh#N2O);
  945 #             else {
  946 #                 privateDmesh#N2O.resize(Th[0].nt);
  947 #                 privateDmesh#N2O = 0:Th[0].nt-1;
  948 #             }
  949 # ENDIFMACRO
IFMACRO(!privateDmesh#N2O)
  950 #             if(s > 1)
  951 #                 Th[0] = trunc(Th[0], 1, split = s);
  952 # ENDIFMACRO
ENDIFMACRO
IFMACRO(!privateBuildDmesh)
  953 #             if(s > 1)
  954 #                 Th[0] = trunc(Th[0], 1, split = s);
  955 # ENDIFMACRO
        }
  956 #         fespace WhLocalPrivate(Th[0], P);
  957 #         DTab[0].resize(WhLocalPrivate.ndof);
  958 #         DTab[0] = 1.0;
  959 #     }
  960 #     if(verbosity > 0) {
  961 #         mpiBarrier(comm);
  962 #         if(mpiRank(comm) == 0)
  963 #             cout.scientific << " --- partition of unity built (in " << mpiWtime() - timerPartition << ")" << endl;
  964 #     }
  965 # } )  // EOM
  966 @ 
  967 @ macro buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, PkPart, defPart, initPart, labPeriodic, userPartitioning, bs) {
  968 #     meshN[int] ThTab(1);
  969 #     meshN[int] ThBorderTab(1);
  970 #     real[int][int] DTab(1);
  971 #     ThTab[0] = Th;
  972 #     matrix[int] prolongation(0);
  973 #     buildOverlapEdgePeriodicRecursive(ThTab, ThBorderTab, fakeInterface, s, overlap, 1, prolongation, intersection, DTab, P, comm, excluded, PkPart, defPart, initPart, labPeriodic, userPartitioning, bs)
  974 #     Th = ThTab[0];
  975 #     ThBorder = ThBorderTab[0];
  976 #     D.resize(DTab[0].n);
  977 #     D = DTab[0];
  978 # } )  // EOM
  979 @ 
  980 @ IFMACRO(vectorialfe)
  981 & macro buildOverlapEdgeRecursive(Th, ThBorder, fakeInterface, s, overlap, level, prolongation, intersection, D, P, comm, excluded, PkPart, defPart, initPart, bs) {
  982 &     int[int] emptyArray(0);
  983 &     real[int] emptyRealArray(0);
  984 &     buildOverlapEdgePeriodicRecursive(Th, ThBorder, fakeInterface, s, overlap, level, prolongation, intersection, D, P, comm, excluded, PkPart, defPart, initPart, emptyArray, emptyRealArray, bs)
  985 & }// EOM
macro buildOverlapEdge(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, PkPart, defPart, initPart, bs) {
  986 &     int[int] emptyArray(0);
  987 &     real[int] emptyRealArray(0);
  988 &     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, PkPart, defPart, initPart, emptyArray, emptyRealArray, bs)
  989 & }// EOM
macro buildOverlapEdgeWithPartitioning(Th, ThBorder, part, fakeInterface, s, overlap, intersection, D, P, comm, excluded, PkPart, defPart, initPart, bs) {
  990 &     int[int] emptyArray(0);
  991 &     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, PkPart, defPart, initPart, emptyArray, part, bs)
  992 & }// EOM
macro buildOverlapWithPartitioning(Th, ThBorder, part, fakeInterface, s, overlap, intersection, D, P, comm, excluded, bs) {
  993 &     int[int] emptyArray(0);
  994 &     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, emptyArray, part, bs)
  995 & }// EOM
macro buildOverlap(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, bs) {
  996 &     int[int] emptyArray(0);
  997 &     real[int] emptyRealArray(0);
  998 &     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, emptyArray, emptyRealArray, bs)
  999 & }// EOM
macro buildOverlapPeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, labPeriodic, bs) {
 1000 &     real[int] emptyArray(0);
 1001 &     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, labPeriodic, emptyArray, bs)
 1002 & }// EOM
macro buildEdgeWithPartitioning(Th, part, s, intersection, D, P, comm, PkPart, defPart, initPart, bs) {
 1003 &     int[int] emptyArray(0);
 1004 &     meshN ThBorder;
 1005 &     int fakeInterface = -111111;
 1006 &     int overlap = 1;
 1007 &     bool excluded = false;
 1008 &     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, intersection, D, P, comm, excluded, PkPart, defPart, initPart, emptyArray, part, bs)
 1009 & }// EOM
macro buildWithPartitioning(Th, part, s, intersection, D, P, comm, bs) {
 1010 &     int[int] emptyArray(0);
 1011 &     meshN ThBorder;
 1012 &     int fakeInterface = -111111;
 1013 &     int overlap = 1;
 1014 &     bool excluded = false;
 1015 &     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, emptyArray, part, bs)
 1016 & }// EOM
macro build(Th, s, intersection, D, P, comm, bs) {
 1017 &     int[int] emptyArray(0);
 1018 &     real[int] emptyRealArray(0);
 1019 &     meshN ThBorder;
 1020 &     int fakeInterface = -111111;
 1021 &     int overlap = 1;
 1022 &     bool excluded = false;
 1023 &     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, emptyArray, emptyRealArray, bs)
 1024 & }// EOM
macro buildPeriodic(Th, s, intersection, D, P, comm, labPeriodic, bs) {
 1025 &     int[int] emptyArray(0);
 1026 &     real[int] emptyRealArray(0);
 1027 &     meshN ThBorder;
 1028 &     int fakeInterface = -111111;
 1029 &     int overlap = 1;
 1030 &     bool excluded = false;
 1031 &     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, labPeriodic, emptyRealArray, bs)
 1032 & }// EOM
macro buildMinimalist(Th, intersection, D, P, bs) {
 1033 &     int[int] emptyArray(0);
 1034 &     real[int] emptyRealArray(0);
 1035 &     meshN ThBorder;
 1036 &     int fakeInterface = -111111;
 1037 &     int overlap = 1;
 1038 &     bool excluded = false;
 1039 &     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, 1, overlap, intersection, D, P, mpiCommWorld, excluded, P, def, init, emptyArray, emptyRealArray, bs)
 1040 & }// EOM
macro buildRecursive(Th, s, level, prolongation, intersectionMat, DTab, P, comm, bsMat) {
 1041 &     int[int] emptyArray(0);
 1042 &     real[int] emptyRealArray(0);
 1043 &     meshN[int] ThBorderTab(level);
 1044 &     DTab.resize(level);
 1045 &     buildOverlapEdgePeriodicRecursive(Th, ThBorderTab, -111111, s, 1, level, prolongation, intersectionMat, DTab, P, comm, false, P, def, init, emptyArray, emptyRealArray, bsMat)
 1046 & }// EOM
macro buildMatRecursive(Th, s, nlevel, prolongation, A, P, comm, bsMat) {
 1047 &     int[int] emptyArray(0);
 1048 &     real[int] emptyRealArray(0);
 1049 &     meshN[int] ThBorderTab(nlevel);
 1050 &     int[int][int] intersectionMat;
 1051 &     real[int][int] DTab(nlevel);
 1052 &     buildOverlapEdgePeriodicRecursive(Th, ThBorderTab, -111111, s, 1, nlevel, prolongation, intersectionMat, DTab, P, comm, false, P, def, init, emptyArray, emptyRealArray, bsMat)
 1053 &     for(int i = 0; i < nlevel; ++i)
 1054 &         constructor(A[i], DTab[i].n, intersectionMat, DTab[i], bs = bsMat, communicator = comm, level = i);
 1055 & }// EOM
macro buildMatEdgeRecursive(Th, s, nlevel, prolongation, A, P, comm, PkPart, defPart, initPart, bsMat) {
 1056 &     int[int] emptyArray(0);
 1057 &     real[int] emptyRealArray(0);
 1058 &     meshN[int] ThBorderTab(nlevel);
 1059 &     int[int][int] intersectionMat;
 1060 &     real[int][int] DTab(nlevel);
 1061 &     buildOverlapEdgePeriodicRecursive(Th, ThBorderTab, -111111, s, 1, nlevel, prolongation, intersectionMat, DTab, P, comm, false, PkPart, defPart, initPart, emptyArray, emptyRealArray, bsMat)
 1062 &     for(int i = 0; i < nlevel; ++i)
 1063 &         constructor(A[i], DTab[i].n, intersectionMat, DTab[i], bs = bsMat, communicator = comm, level = i);
 1064 & }// EOM
macro buildMatEdgeRecursiveWithPartitioning(Th, part, s, nlevel, prolongation, A, P, comm, PkPart, defPart, initPart, bsMat) {
 1065 &     int[int] emptyArray(0);
 1066 &     meshN[int] ThBorderTab(nlevel);
 1067 &     int[int][int] intersectionMat;
 1068 &     real[int][int] DTab(nlevel);
 1069 &     buildOverlapEdgePeriodicRecursive(Th, ThBorderTab, -111111, s, 1, nlevel, prolongation, intersectionMat, DTab, P, comm, false, PkPart, defPart, initPart, emptyArray, part, bsMat)
 1070 &     for(int i = 0; i < nlevel; ++i)
 1071 &         constructor(A[i], DTab[i].n, intersectionMat, DTab[i], bs = bsMat, communicator = comm, level = i);
 1072 & }// EOM
macro buildMatEdgeWithPartitioning(Th, part, s, A, P, comm, PkPart, defPart, initPart, bsMat) {
 1073 &     real[int] DMat;
 1074 &     int[int][int] intersectionMat;
 1075 &     buildEdgeWithPartitioning(Th, part, s, intersectionMat, DMat, P, comm, PkPart, defPart, initPart, bsMat)
 1076 &     constructor(A, DMat.n, intersectionMat, DMat, bs = bsMat, communicator = comm);
 1077 & }// EOM
macro buildMatWithPartitioning(Th, part, s, A, P, comm, bsMat) {
 1078 &     real[int] DMat;
 1079 &     int[int][int] intersectionMat;
 1080 &     buildWithPartitioning(Th, part, s, intersectionMat, DMat, P, comm, bsMat)
 1081 &     constructor(A, DMat.n, intersectionMat, DMat, bs = bsMat, communicator = comm);
 1082 & }// EOM
macro buildMat(Th, s, A, P, comm, bsMat) {
 1083 &     real[int] DMat;
 1084 &     int[int][int] intersectionMat;
 1085 &     build(Th, s, intersectionMat, DMat, P, comm, bsMat)
 1086 &     constructor(A, DMat.n, intersectionMat, DMat, bs = bsMat, communicator = comm);
 1087 & }// EOM
macro buildMatPeriodic(Th, s, A, P, comm, labPeriodic, bsMat) {
 1088 &     real[int] DMat;
 1089 &     int[int][int] intersectionMat;
 1090 &     buildPeriodic(Th, s, intersectionMat, DMat, P, comm, labPeriodic, bsMat)
 1091 &     constructor(A, DMat.n, intersectionMat, DMat, bs = bsMat, communicator = comm);
 1092 & }// EOM
macro buildMatMinimalist(Th, A, P, bsMat) {
 1093 &     real[int] DMat;
 1094 &     int[int][int] intersectionMat;
 1095 &     buildMinimalist(Th, intersectionMat, DMat, P, bsMat)
 1096 &     constructor(A, DMat.n, intersectionMat, DMat, bs = bsMat, communicator = comm);
 1097 & }// EOM
ENDIFMACRO
 1098 @ IFMACRO(!vectorialfe)
 1099 & macro buildOverlapEdgeRecursive(Th, ThBorder, fakeInterface, s, overlap, level, prolongation, intersection, D, P, comm, excluded, PkPart, defPart, initPart) {
 1100 &     int[int] emptyArray(0);
 1101 &     real[int] emptyRealArray(0);
 1102 &     buildOverlapEdgePeriodicRecursive(Th, ThBorder, fakeInterface, s, overlap, level, prolongation, intersection, D, P, comm, excluded, PkPart, defPart, initPart, emptyArray, emptyRealArray, 1)
 1103 & }// EOM
macro buildOverlapEdge(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, PkPart, defPart, initPart) {
 1104 &     int[int] emptyArray(0);
 1105 &     real[int] emptyRealArray(0);
 1106 &     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, PkPart, defPart, initPart, emptyArray, emptyRealArray, 1)
 1107 & }// EOM
macro buildOverlapEdgeWithPartitioning(Th, ThBorder, part, fakeInterface, s, overlap, intersection, D, P, comm, excluded, PkPart, defPart, initPart) {
 1108 &     int[int] emptyArray(0);
 1109 &     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, PkPart, defPart, initPart, emptyArray, part, 1)
 1110 & }// EOM
macro buildOverlapWithPartitioning(Th, ThBorder, part, fakeInterface, s, overlap, intersection, D, P, comm, excluded) {
 1111 &     int[int] emptyArray(0);
 1112 &     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, emptyArray, part, 1)
 1113 & }// EOM
macro buildOverlap(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded) {
 1114 &     int[int] emptyArray(0);
 1115 &     real[int] emptyRealArray(0);
 1116 &     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, emptyArray, emptyRealArray, 1)
 1117 & }// EOM
macro buildOverlapPeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, labPeriodic) {
 1118 &     real[int] emptyArray(0);
 1119 &     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, labPeriodic, emptyArray, 1)
 1120 & }// EOM
macro buildEdgeWithPartitioning(Th, part, s, intersection, D, P, comm, PkPart, defPart, initPart) {
 1121 &     int[int] emptyArray(0);
 1122 &     meshN ThBorder;
 1123 &     int fakeInterface = -111111;
 1124 &     int overlap = 1;
 1125 &     bool excluded = false;
 1126 &     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, PkPart, defPart, initPart, emptyArray, part, 1)
 1127 & }// EOM
macro buildWithPartitioning(Th, part, s, intersection, D, P, comm) {
 1128 &     int[int] emptyArray(0);
 1129 &     meshN ThBorder;
 1130 &     int fakeInterface = -111111;
 1131 &     int overlap = 1;
 1132 &     bool excluded = false;
 1133 &     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, emptyArray, part, 1)
 1134 & }// EOM
macro build(Th, s, intersection, D, P, comm) {
 1135 &     int[int] emptyArray(0);
 1136 &     real[int] emptyRealArray(0);
 1137 &     meshN ThBorder;
 1138 &     int fakeInterface = -111111;
 1139 &     int overlap = 1;
 1140 &     bool excluded = false;
 1141 &     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, emptyArray, emptyRealArray, 1)
 1142 & }// EOM
macro buildPeriodic(Th, s, intersection, D, P, comm, labPeriodic) {
 1143 &     int[int] emptyArray(0);
 1144 &     real[int] emptyRealArray(0);
 1145 &     meshN ThBorder;
 1146 &     int fakeInterface = -111111;
 1147 &     int overlap = 1;
 1148 &     bool excluded = false;
 1149 &     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, labPeriodic, emptyRealArray, 1)
 1150 & }// EOM
macro buildMinimalist(Th, intersection, D, P) {
 1151 &     int[int] emptyArray(0);
 1152 &     real[int] emptyRealArray(0);
 1153 &     meshN ThBorder;
 1154 &     int fakeInterface = -111111;
 1155 &     int overlap = 1;
 1156 &     bool excluded = false;
 1157 &     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, 1, overlap, intersection, D, P, mpiCommWorld, excluded, P, def, init, emptyArray, emptyRealArray, 1)
 1158 & }// EOM
macro buildRecursive(Th, s, level, prolongation, intersectionMat, DTab, P, comm) {
 1159 &     int[int] emptyArray(0);
 1160 &     real[int] emptyRealArray(0);
 1161 &     meshN[int] ThBorderTab(level);
 1162 &     DTab.resize(level);
 1163 &     buildOverlapEdgePeriodicRecursive(Th, ThBorderTab, -111111, s, 1, level, prolongation, intersectionMat, DTab, P, comm, false, P, def, init, emptyArray, emptyRealArray, 1)
 1164 & }// EOM
macro buildMatRecursive(Th, s, nlevel, prolongation, A, P, comm) {
 1165 &     int[int] emptyArray(0);
 1166 &     real[int] emptyRealArray(0);
 1167 &     meshN[int] ThBorderTab(nlevel);
 1168 &     int[int][int] intersectionMat;
 1169 &     real[int][int] DTab(nlevel);
 1170 &     buildOverlapEdgePeriodicRecursive(Th, ThBorderTab, -111111, s, 1, nlevel, prolongation, intersectionMat, DTab, P, comm, false, P, def, init, emptyArray, emptyRealArray, 1)
 1171 &     for(int i = 0; i < nlevel; ++i)
 1172 &         constructor(A[i], DTab[i].n, intersectionMat, DTab[i], communicator = comm, level = i);
 1173 & }// EOM
macro buildMatEdgeRecursive(Th, s, nlevel, prolongation, A, P, comm, PkPart, defPart, initPart) {
 1174 &     int[int] emptyArray(0);
 1175 &     real[int] emptyRealArray(0);
 1176 &     meshN[int] ThBorderTab(nlevel);
 1177 &     int[int][int] intersectionMat;
 1178 &     real[int][int] DTab(nlevel);
 1179 &     buildOverlapEdgePeriodicRecursive(Th, ThBorderTab, -111111, s, 1, nlevel, prolongation, intersectionMat, DTab, P, comm, false, PkPart, defPart, initPart, emptyArray, emptyRealArray, 1)
 1180 &     for(int i = 0; i < nlevel; ++i)
 1181 &         constructor(A[i], DTab[i].n, intersectionMat, DTab[i], communicator = comm, level = i);
 1182 & }// EOM
macro buildMatEdgeRecursiveWithPartitioning(Th, part, s, nlevel, prolongation, A, P, comm, PkPart, defPart, initPart) {
 1183 &     int[int] emptyArray(0);
 1184 &     meshN[int] ThBorderTab(nlevel);
 1185 &     int[int][int] intersectionMat;
 1186 &     real[int][int] DTab(nlevel);
 1187 &     buildOverlapEdgePeriodicRecursive(Th, ThBorderTab, -111111, s, 1, nlevel, prolongation, intersectionMat, DTab, P, comm, false, PkPart, defPart, initPart, emptyArray, part, 1)
 1188 &     for(int i = 0; i < nlevel; ++i)
 1189 &         constructor(A[i], DTab[i].n, intersectionMat, DTab[i], communicator = comm, level = i);
 1190 & }// EOM
macro buildMatEdgeWithPartitioning(Th, part, s, A, P, comm, PkPart, defPart, initPart) {
 1191 &     real[int] DMat;
 1192 &     int[int][int] intersectionMat;
 1193 &     buildEdgeWithPartitioning(Th, part, s, intersectionMat, DMat, P, comm, PkPart, defPart, initPart)
 1194 &     constructor(A, DMat.n, intersectionMat, DMat, communicator = comm);
 1195 & }// EOM
macro buildMatWithPartitioning(Th, part, s, A, P, comm) {
 1196 &     real[int] DMat;
 1197 &     int[int][int] intersectionMat;
 1198 &     buildWithPartitioning(Th, part, s, intersectionMat, DMat, P, comm)
 1199 &     constructor(A, DMat.n, intersectionMat, DMat, communicator = comm);
 1200 & }// EOM
macro buildMat(Th, s, A, P, comm) {
 1201 &     real[int] DMat;
 1202 &     int[int][int] intersectionMat;
 1203 &     build(Th, s, intersectionMat, DMat, P, comm)
 1204 &     constructor(A, DMat.n, intersectionMat, DMat, communicator = comm);
 1205 & }// EOM
macro buildMatPeriodic(Th, s, A, P, comm, labPeriodic) {
 1206 &     real[int] DMat;
 1207 &     int[int][int] intersectionMat;
 1208 &     buildPeriodic(Th, s, intersectionMat, DMat, P, comm, labPeriodic)
 1209 &     constructor(A, DMat.n, intersectionMat, DMat, communicator = comm);
 1210 & }// EOM
macro buildMatMinimalist(Th, A, P) {
 1211 &     real[int] DMat;
 1212 &     int[int][int] intersectionMat;
 1213 &     buildMinimalist(Th, intersectionMat, DMat, P)
 1214 &     constructor(A, DMat.n, intersectionMat, DMat);
 1215 & }// EOM
ENDIFMACRO
 1099 @ macro buildOverlapEdgeRecursive(Th, ThBorder, fakeInterface, s, overlap, level, prolongation, intersection, D, P, comm, excluded, PkPart, defPart, initPart) {
 1100 #     int[int] emptyArray(0);
 1101 #     real[int] emptyRealArray(0);
 1102 #     buildOverlapEdgePeriodicRecursive(Th, ThBorder, fakeInterface, s, overlap, level, prolongation, intersection, D, P, comm, excluded, PkPart, defPart, initPart, emptyArray, emptyRealArray, 1)
 1103 # } )  // EOM
 1104 @ macro buildOverlapEdge(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, PkPart, defPart, initPart) {
 1105 #     int[int] emptyArray(0);
 1106 #     real[int] emptyRealArray(0);
 1107 #     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, PkPart, defPart, initPart, emptyArray, emptyRealArray, 1)
 1108 # } )  // EOM
 1109 @ macro buildOverlapEdgeWithPartitioning(Th, ThBorder, part, fakeInterface, s, overlap, intersection, D, P, comm, excluded, PkPart, defPart, initPart) {
 1110 #     int[int] emptyArray(0);
 1111 #     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, PkPart, defPart, initPart, emptyArray, part, 1)
 1112 # } )  // EOM
 1113 @ macro buildOverlapWithPartitioning(Th, ThBorder, part, fakeInterface, s, overlap, intersection, D, P, comm, excluded) {
 1114 #     int[int] emptyArray(0);
 1115 #     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, emptyArray, part, 1)
 1116 # } )  // EOM
 1117 @ macro buildOverlap(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded) {
 1118 #     int[int] emptyArray(0);
 1119 #     real[int] emptyRealArray(0);
 1120 #     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, emptyArray, emptyRealArray, 1)
 1121 # } )  // EOM
 1122 @ macro buildOverlapPeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, labPeriodic) {
 1123 #     real[int] emptyArray(0);
 1124 #     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, labPeriodic, emptyArray, 1)
 1125 # } )  // EOM
 1126 @ macro buildEdgeWithPartitioning(Th, part, s, intersection, D, P, comm, PkPart, defPart, initPart) {
 1127 #     int[int] emptyArray(0);
 1128 #     meshN ThBorder;
 1129 #     int fakeInterface = -111111;
 1130 #     int overlap = 1;
 1131 #     bool excluded = false;
 1132 #     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, PkPart, defPart, initPart, emptyArray, part, 1)
 1133 # } )  // EOM
 1134 @ macro buildWithPartitioning(Th, part, s, intersection, D, P, comm) {
 1135 #     int[int] emptyArray(0);
 1136 #     meshN ThBorder;
 1137 #     int fakeInterface = -111111;
 1138 #     int overlap = 1;
 1139 #     bool excluded = false;
 1140 #     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, emptyArray, part, 1)
 1141 # } )  // EOM
 1142 @ macro build(Th, s, intersection, D, P, comm) {
 1143 #     int[int] emptyArray(0);
 1144 #     real[int] emptyRealArray(0);
 1145 #     meshN ThBorder;
 1146 #     int fakeInterface = -111111;
 1147 #     int overlap = 1;
 1148 #     bool excluded = false;
 1149 #     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, emptyArray, emptyRealArray, 1)
 1150 # } )  // EOM
 1151 @ macro buildPeriodic(Th, s, intersection, D, P, comm, labPeriodic) {
 1152 #     int[int] emptyArray(0);
 1153 #     real[int] emptyRealArray(0);
 1154 #     meshN ThBorder;
 1155 #     int fakeInterface = -111111;
 1156 #     int overlap = 1;
 1157 #     bool excluded = false;
 1158 #     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, labPeriodic, emptyRealArray, 1)
 1159 # } )  // EOM
 1160 @ macro buildMinimalist(Th, intersection, D, P) {
 1161 #     int[int] emptyArray(0);
 1162 #     real[int] emptyRealArray(0);
 1163 #     meshN ThBorder;
 1164 #     int fakeInterface = -111111;
 1165 #     int overlap = 1;
 1166 #     bool excluded = false;
 1167 #     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, 1, overlap, intersection, D, P, mpiCommWorld, excluded, P, def, init, emptyArray, emptyRealArray, 1)
 1168 # } )  // EOM
 1169 @ macro buildRecursive(Th, s, level, prolongation, intersectionMat, DTab, P, comm) {
 1170 #     int[int] emptyArray(0);
 1171 #     real[int] emptyRealArray(0);
 1172 #     meshN[int] ThBorderTab(level);
 1173 #     DTab.resize(level);
 1174 #     buildOverlapEdgePeriodicRecursive(Th, ThBorderTab, -111111, s, 1, level, prolongation, intersectionMat, DTab, P, comm, false, P, def, init, emptyArray, emptyRealArray, 1)
 1175 # } )  // EOM
 1176 @ macro buildMatRecursive(Th, s, nlevel, prolongation, A, P, comm) {
 1177 #     int[int] emptyArray(0);
 1178 #     real[int] emptyRealArray(0);
 1179 #     meshN[int] ThBorderTab(nlevel);
 1180 #     int[int][int] intersectionMat;
 1181 #     real[int][int] DTab(nlevel);
 1182 #     buildOverlapEdgePeriodicRecursive(Th, ThBorderTab, -111111, s, 1, nlevel, prolongation, intersectionMat, DTab, P, comm, false, P, def, init, emptyArray, emptyRealArray, 1)
 1183 #     for(int i = 0; i < nlevel; ++i)
 1184 #         constructor(A[i], DTab[i].n, intersectionMat, DTab[i], communicator = comm, level = i);
 1185 # } )  // EOM
 1186 @ macro buildMatEdgeRecursive(Th, s, nlevel, prolongation, A, P, comm, PkPart, defPart, initPart) {
 1187 #     int[int] emptyArray(0);
 1188 #     real[int] emptyRealArray(0);
 1189 #     meshN[int] ThBorderTab(nlevel);
 1190 #     int[int][int] intersectionMat;
 1191 #     real[int][int] DTab(nlevel);
 1192 #     buildOverlapEdgePeriodicRecursive(Th, ThBorderTab, -111111, s, 1, nlevel, prolongation, intersectionMat, DTab, P, comm, false, PkPart, defPart, initPart, emptyArray, emptyRealArray, 1)
 1193 #     for(int i = 0; i < nlevel; ++i)
 1194 #         constructor(A[i], DTab[i].n, intersectionMat, DTab[i], communicator = comm, level = i);
 1195 # } )  // EOM
 1196 @ macro buildMatEdgeRecursiveWithPartitioning(Th, part, s, nlevel, prolongation, A, P, comm, PkPart, defPart, initPart) {
 1197 #     int[int] emptyArray(0);
 1198 #     meshN[int] ThBorderTab(nlevel);
 1199 #     int[int][int] intersectionMat;
 1200 #     real[int][int] DTab(nlevel);
 1201 #     buildOverlapEdgePeriodicRecursive(Th, ThBorderTab, -111111, s, 1, nlevel, prolongation, intersectionMat, DTab, P, comm, false, PkPart, defPart, initPart, emptyArray, part, 1)
 1202 #     for(int i = 0; i < nlevel; ++i)
 1203 #         constructor(A[i], DTab[i].n, intersectionMat, DTab[i], communicator = comm, level = i);
 1204 # } )  // EOM
 1205 @ macro buildMatEdgeWithPartitioning(Th, part, s, A, P, comm, PkPart, defPart, initPart) {
 1206 #     real[int] DMat;
 1207 #     int[int][int] intersectionMat;
 1208 #     buildEdgeWithPartitioning(Th, part, s, intersectionMat, DMat, P, comm, PkPart, defPart, initPart)
 1209 #     constructor(A, DMat.n, intersectionMat, DMat, communicator = comm);
 1210 # } )  // EOM
 1211 @ macro buildMatWithPartitioning(Th, part, s, A, P, comm) {
 1212 #     real[int] DMat;
 1213 #     int[int][int] intersectionMat;
 1214 #     buildWithPartitioning(Th, part, s, intersectionMat, DMat, P, comm)
 1215 #     constructor(A, DMat.n, intersectionMat, DMat, communicator = comm);
 1216 # } )  // EOM
 1217 @ macro buildMat(Th, s, A, P, comm) {
 1218 #     real[int] DMat;
 1219 #     int[int][int] intersectionMat;
 1220 #     build(Th, s, intersectionMat, DMat, P, comm)
 1221 #     constructor(A, DMat.n, intersectionMat, DMat, communicator = comm);
 1222 # } )  // EOM
 1223 @ macro buildMatPeriodic(Th, s, A, P, comm, labPeriodic) {
 1224 #     real[int] DMat;
 1225 #     int[int][int] intersectionMat;
 1226 #     buildPeriodic(Th, s, intersectionMat, DMat, P, comm, labPeriodic)
 1227 #     constructor(A, DMat.n, intersectionMat, DMat, communicator = comm);
 1228 # } )  // EOM
 1229 @ macro buildMatMinimalist(Th, A, P) {
 1230 #     real[int] DMat;
 1231 #     int[int][int] intersectionMat;
 1232 #     buildMinimalist(Th, intersectionMat, DMat, P)
 1233 #     constructor(A, DMat.n, intersectionMat, DMat);
 1234 # } )  // EOM
 1235 @ 
 1216 @ 
 1217 @ macro convectParallel(ThName, uVel, dt, uKhi, safety)
 1218 # IFMACRO(privateDmesh#ThName)
 1219 # {
 1220 # IFMACRO(!ThName#Comm)
 1221 # NewMacro ThName#Comm()mpiCommWorld EndMacro
ENDIFMACRO
IFMACRO(!ThName#VelocityPk)
 1222 # func ThSinglePk = P1;
 1223 # ENDIFMACRO
IFMACRO(ThName#VelocityPk)
 1224 # func ThSinglePk = ThName#VelocityPk;
 1225 # ENDIFMACRO
if(verbosity >= 0)
 1226 #     mpiBarrier(ThName#Comm);
 1227 # real timerConvect = mpiWtime();
 1228 # if(mpiSize(ThName#Comm) == 1) {
 1229 #     uKhi = convect(uVel, dt, uKhi);
 1230 # }
 1231 # else {
 1232 #     int backupSM = searchMethod;
 1233 #     searchMethod = 0;
 1234 #     real[int] bb(2 * dimension);
 1235 #     boundingbox(ThName, bb);
 1236 #     bb(0) -= safety * ThName.hmax;
 1237 #     bb(1) += safety * ThName.hmax;
 1238 #     bb(2) -= safety * ThName.hmax;
 1239 #     bb(3) += safety * ThName.hmax;
 1240 # IFMACRO(dimension,3)
 1241 #     bb(4) -= safety * ThName.hmax;
 1242 #     bb(5) += safety * ThName.hmax;
 1243 # ENDIFMACRO
    int size = mpiSize(ThName#Comm);
 1244 #     real[int] bbAll(2 * dimension * size);
 1245 #     mpiAllgather(bb, bbAll, ThName#Comm);
 1246 #     int[int] rankExchange(0);
 1247 #     for(int i = 0; i < size; ++i) {
 1248 # IFMACRO(dimension,2)
 1249 #         if(!(bbAll[1 + 4 * i] < bb[0]
 1250 #           || bbAll[0 + 4 * i] > bb[1]
 1251 #           || bbAll[3 + 4 * i] < bb[2]
 1252 #           || bbAll[2 + 4 * i] > bb[3]))
 1253 # ENDIFMACRO
IFMACRO(dimension,3)
 1254 #         if(!(bbAll[1 + 6 * i] < bb[0]
 1255 #           || bbAll[0 + 6 * i] > bb[1]
 1256 #           || bbAll[3 + 6 * i] < bb[2]
 1257 #           || bbAll[2 + 6 * i] > bb[3]
 1258 #           || bbAll[5 + 6 * i] < bb[4]
 1259 #           || bbAll[4 + 6 * i] > bb[5]))
 1260 # ENDIFMACRO
                                                    {
 1261 #             rankExchange.resize(rankExchange.n + 1);
 1262 #             rankExchange[rankExchange.n - 1] = i;
 1263 #         }
 1264 #     }
 1265 #     real[int] D, backupRegion(ThName.nt);
 1266 # IFMACRO(dimension,2)
 1267 #     func PkVel = [ThSinglePk, ThSinglePk];
 1268 # ENDIFMACRO
IFMACRO(dimension,3)
 1269 #     func PkVel = [ThSinglePk, ThSinglePk, ThSinglePk];
 1270 # ENDIFMACRO
    fespace VhVelPrivate(ThName, PkVel);
 1271 #     fespace VhKhiPrivate(ThName, ThSinglePk);
 1272 #     real[int] buffer(VhVelPrivate.ndof + VhKhiPrivate.ndof);
 1273 #     {
 1274 #         VhVelPrivate defVel(uVelLocal) = uVel;
 1275 #         fespace VhKhiP1(ThName, P1);
 1276 #         VhKhiP1 khiP1;
 1277 #         khiP1[] = privateDmesh#ThName#khiDef[0];
 1278 #         VhKhiPrivate khi;
 1279 #         if(khi[].n != khiP1[].n)
 1280 #             khi = khiP1;
 1281 #         else
            khi[] = khiP1[];
 1282 #         for[i, value : uVelLocal[]] value *= khi[][i / dimension];
 1283 #         buffer(0:VhVelPrivate.ndof - 1) = uVelLocal[];
 1284 #         buffer(VhVelPrivate.ndof:VhVelPrivate.ndof + VhKhiPrivate.ndof - 1) = khi[];
 1285 #         if(khi[].n != uKhi[].n) {
 1286 #             khi = uKhi;
 1287 #             buffer(VhVelPrivate.ndof:VhVelPrivate.ndof + VhKhiPrivate.ndof - 1) .*= khi[];
 1288 #         }
 1289 #         else
            buffer(VhVelPrivate.ndof:VhVelPrivate.ndof + VhKhiPrivate.ndof - 1) .*= uKhi[];
 1290 #     }
 1291 #     fespace PhPartPrivate(ThName, P0);
 1292 #     {
 1293 #         PhPartPrivate backup = region;
 1294 #         backupRegion = backup[];
 1295 #         ThName = change(ThName, fregion = privateDmesh#ThName#khiDef[1][nuTriangle]);
 1296 #     }
 1297 #     meshN[int] recvTh(rankExchange.n);
 1298 #     meshN[int] sendTh(rankExchange.n);
 1299 #     real[int][int] exchangeU(rankExchange.n + rankExchange.n);
 1300 #     mpiRequest[int] rqSendTh(rankExchange.n);
 1301 #     mpiRequest[int] rqSendU(rankExchange.n);
 1302 #     mpiRequest[int] rqRecvTh(rankExchange.n);
 1303 #     mpiRequest[int] rqRecvU(rankExchange.n);
 1304 #     for[i, value : rankExchange]
 1305 #         Irecv(processor(value, rqRecvTh[i]), recvTh[i]);
 1306 #     for[i, value : rankExchange] {
 1307 #         PhPartPrivate part;
 1308 # IFMACRO(dimension,2)
 1309 #         part = (bbAll[0 + 4 * value] < x
 1310 #              && bbAll[1 + 4 * value] > x
 1311 #              && bbAll[2 + 4 * value] < y
 1312 #              && bbAll[3 + 4 * value] > y) ? 1.0 : 0.0;
 1313 # ENDIFMACRO
IFMACRO(dimension,3)
 1314 #         part = (bbAll[0 + 6 * value] < x
 1315 #              && bbAll[1 + 6 * value] > x
 1316 #              && bbAll[2 + 6 * value] < y
 1317 #              && bbAll[3 + 6 * value] > y
 1318 #              && bbAll[4 + 6 * value] < z
 1319 #              && bbAll[5 + 6 * value] > z) ? 1.0 : 0.0;
 1320 # ENDIFMACRO
        if(part[].linfty > 1.0e-2) {
 1321 #             int[int] n2o;
 1322 #             sendTh[i] = trunc(ThName, part > 1.0e-2, new2old = n2o);
 1323 #             fespace VhRestrictionPrivate(sendTh[i], ThSinglePk);
 1324 #             int[int] map;
 1325 #             map = restrict(VhRestrictionPrivate, VhKhiPrivate, n2o);
 1326 #             exchangeU[rankExchange.n + i].resize(VhRestrictionPrivate.ndof * (dimension + 1));
 1327 #             for[j, w : map] {
 1328 #                 exchangeU[rankExchange.n + i][dimension * j] = buffer[dimension * w];
 1329 #                 exchangeU[rankExchange.n + i][dimension * j + 1] = buffer[dimension * w + 1];
 1330 # IFMACRO(dimension,3)
 1331 #                 exchangeU[rankExchange.n + i][dimension * j + 2] = buffer[dimension * w + 2];
 1332 # ENDIFMACRO
                exchangeU[rankExchange.n + i][VhRestrictionPrivate.ndof * dimension + j] = buffer[VhKhiPrivate.ndof * dimension + w];
 1333 #             }
 1334 #             Isend(processor(value, rqSendTh[i]), sendTh[i]);
 1335 #             Isend(processor(value, rqSendU[i]), exchangeU[rankExchange.n + i]);
 1336 #         }
 1337 #         else
            Isend(processor(value, rqSendTh[i]), sendTh[i]);
 1338 #     }
 1339 #     meshN gluedExchange;
 1340 #     {
 1341 #         meshN[int] toGlue(rankExchange.n);
 1342 #         int j = 0;
 1343 #         for[i, value : rankExchange] {
 1344 #             int index = mpiWaitAny(rqRecvTh);
 1345 #             if(recvTh[index].nt) {
 1346 #                 fespace VhRestrictionPrivate(recvTh[index], ThSinglePk);
 1347 #                 exchangeU[index].resize(VhRestrictionPrivate.ndof * (dimension + 1));
 1348 #                 Irecv(processor(rankExchange[index], rqRecvU[index]), exchangeU[index]);
 1349 #                 fespace PhRestrictionPrivate(recvTh[index], P0);
 1350 #                 PhRestrictionPrivate ind = abs(region - rankExchange[index]) < 1.0e-2 ? 1.0 : 0.0;
 1351 #                 if(abs(ind[].max - 1.0) < 1.0e-2) {
 1352 #                     toGlue[j] = trunc(recvTh[index], ind > 1.0e-2);
 1353 #                     ++j;
 1354 #                 }
 1355 #             }
 1356 #         }
 1357 #         toGlue.resize(j);
 1358 #         gluedExchange = gluemesh(toGlue);
 1359 #     }
 1360 #     meshN interpolateExchange;
 1361 #     fespace VhVelExchangePrivate(gluedExchange, PkVel);
 1362 #     fespace VhKhiExchangePrivate(gluedExchange, ThSinglePk);
 1363 #     VhVelExchangePrivate defVel(uVelExchange);
 1364 #     VhKhiExchangePrivate uKhiExchange;
 1365 #     for[i, value : rankExchange] {
 1366 #         int index = mpiWaitAny(rqRecvU);
 1367 #         if(index != mpiUndefined) {
 1368 #             if(recvTh[index].nt) {
 1369 #                 fespace VhRestrictionPrivate(recvTh[index], ThSinglePk);
 1370 #                 matrix R = interpolate(VhRestrictionPrivate, VhKhiExchangePrivate);
 1371 #                 if(R.nnz != R.n) {
 1372 #                     R.thresholding(1.0e-2);
 1373 #                     assert(R.nnz == R.n);
 1374 #                 }
 1375 #                 for[i, j, value : R] {
 1376 #                     uVelExchange[][dimension * j] += exchangeU[index][dimension * i];
 1377 #                     uVelExchange[][dimension * j + 1] += exchangeU[index][dimension * i + 1];
 1378 # IFMACRO(dimension,3)
 1379 #                     uVelExchange[][dimension * j + 2] += exchangeU[index][dimension * i + 2];
 1380 # ENDIFMACRO
                    uKhiExchange[][j] += exchangeU[index][dimension * VhRestrictionPrivate.ndof + i];
 1381 #                 }
 1382 #             }
 1383 #         }
 1384 #     }
 1385 #     searchMethod = backupSM;
 1386 #     fespace VhPhiExchangePrivate(gluedExchange, P0);
 1387 #     fespace VhKhiExchangeP1(gluedExchange, P1);
 1388 #     int rank = mpiRank(ThName#Comm);
 1389 #     VhPhiExchangePrivate phi = abs(region - rank) < 1.0e-2 ? 1.0 : 0.0;
 1390 #     VhKhiExchangeP1 khi;
 1391 #     AddLayers(gluedExchange, phi[], safety, khi[]);
 1392 #     int[int] n2o;
 1393 #     meshN gluedExchangeSafety = trunc(gluedExchange, abs(khi) > 0.1, new2old = n2o);
 1394 #     fespace VhVelExchangeSafetyPrivate(gluedExchangeSafety, PkVel);
 1395 #     fespace VhKhiExchangeSafetyPrivate(gluedExchangeSafety, ThSinglePk);
 1396 #     int[int] map = restrict(VhKhiExchangeSafetyPrivate, VhKhiExchangePrivate, n2o);
 1397 #     VhVelExchangeSafetyPrivate defVel(uVelExchangeSafety);
 1398 #     VhKhiExchangeSafetyPrivate uKhiExchangeSafety;
 1399 #     uKhiExchangeSafety[] = uKhiExchange[](map);
 1400 #     for[j, w : map] {
 1401 #         uVelExchangeSafety[][dimension * j] = uVelExchange[][dimension * w];
 1402 #         uVelExchangeSafety[][dimension * j + 1] = uVelExchange[][dimension * w + 1];
 1403 # IFMACRO(dimension,3)
 1404 #         uVelExchangeSafety[][dimension * j + 2] = uVelExchange[][dimension * w + 2];
 1405 # ENDIFMACRO
    }
 1406 #     uKhiExchangeSafety = convect(defVel(uVelExchangeSafety), dt, uKhiExchangeSafety);
 1407 #     uKhi = uKhiExchangeSafety;
 1408 #     ThName = change(ThName, fregion = backupRegion[nuTriangle]);
 1409 #     mpiWaitAll(rqSendTh);
 1410 #     mpiWaitAll(rqSendU);
 1411 # }
 1412 # if(verbosity > 0) {
 1413 #     mpiBarrier(ThName#Comm);
 1414 #     if(mpiRank(ThName#Comm) == 0)
 1415 #         cout.scientific << " --- distributed solution convected (in " << mpiWtime() - timerConvect << ")" << endl;
 1416 # }
 1417 # }
 1418 # ENDIFMACRO
 )  // EOM
 1419 @ 
 1420 @ macro transferBase(ThName, Pk, uA, ThNew, PkNew, uANew, P)
 1421 # IFMACRO(privateDmesh#ThName)
 1422 # {
 1423 # IFMACRO(!ThName#Comm)
 1424 # NewMacro ThName#Comm()mpiCommWorld EndMacro
ENDIFMACRO
if(verbosity > 0)
 1425 #     mpiBarrier(ThName#Comm);
 1426 # real timerTransfer = mpiWtime();
 1427 # IFMACRO(!def)
 1428 # NewMacro def(i)i EndMacro
ENDIFMACRO
if(mpiSize(ThName#Comm) == 1) {
 1429 # IFMACRO(!transfer#Q)
 1430 #     def(uANew) = def(uA);
 1431 # ENDIFMACRO
IFMACRO(transfer#Q)
 1432 #     fespace VhLocalOldPrivate(ThName, Pk);
 1433 #     fespace VhLocalNewPrivate(ThNew, PkNew);
 1434 #     matrix loc = interpolate(VhLocalNewPrivate, VhLocalOldPrivate);
 1435 #     matrix<PetscScalar> locPetscScalar = loc;
 1436 #     constructor(P, uANew, uA, locPetscScalar);
 1437 # ENDIFMACRO
}
 1438 # else {
 1439 #     int backupSM = searchMethod;
 1440 #     searchMethod = 0;
 1441 #     fespace VhLocalOldPrivate(ThName, Pk);
 1442 #     fespace VhLocalNewPrivate(ThNew, PkNew);
 1443 # IFMACRO(!transfer#Q)
 1444 #     assert(uA[].n == VhLocalOldPrivate.ndof);
 1445 #     assert(uANew[].n == VhLocalNewPrivate.ndof);
 1446 # ENDIFMACRO
IFMACRO(!dimension)
 1447 # NewMacro dimension()2 EndMacro
ENDIFMACRO
IFMACRO(!meshN)
 1448 # NewMacro meshN()mesh EndMacro
ENDIFMACRO
IFMACRO(!ThName#NestedIn#ThNew)
 1449 #     real[int] bb(4 * dimension);
 1450 #     {
 1451 #         real[int] tmp(2 * dimension);
 1452 #         boundingbox(ThName, tmp);
 1453 #         bb(0:2 * dimension - 1) = tmp;
 1454 #         boundingbox(ThNew, tmp);
 1455 #         bb(2 * dimension:4 * dimension - 1) = tmp;
 1456 #         bb(0) -= max(ThName.hmax, ThNew.hmax);
 1457 #         bb(1) += max(ThName.hmax, ThNew.hmax);
 1458 #         bb(2) -= max(ThName.hmax, ThNew.hmax);
 1459 #         bb(3) += max(ThName.hmax, ThNew.hmax);
 1460 #         bb(4) -= max(ThName.hmax, ThNew.hmax);
 1461 #         bb(5) += max(ThName.hmax, ThNew.hmax);
 1462 #         bb(6) -= max(ThName.hmax, ThNew.hmax);
 1463 #         bb(7) += max(ThName.hmax, ThNew.hmax);
 1464 # IFMACRO(dimension,3)
 1465 #         bb(8) -= max(ThName.hmax, ThNew.hmax);
 1466 #         bb(9) += max(ThName.hmax, ThNew.hmax);
 1467 #         bb(10) -= max(ThName.hmax, ThNew.hmax);
 1468 #         bb(11) += max(ThName.hmax, ThNew.hmax);
 1469 # ENDIFMACRO
    }
 1470 #     int size = mpiSize(ThName#Comm);
 1471 #     real[int] bbAll(4 * dimension * size);
 1472 #     mpiAllgather(bb, bbAll, ThName#Comm);
 1473 #     int[int] rankSend(0);
 1474 #     int[int] rankRecv(0);
 1475 #     for(int i = 0; i < size; ++i) {
 1476 # IFMACRO(dimension,2)
 1477 #         if(!(bbAll[1 + 8 * i] < bb[4]
 1478 #           || bbAll[0 + 8 * i] > bb[5]
 1479 #           || bbAll[3 + 8 * i] < bb[6]
 1480 #           || bbAll[2 + 8 * i] > bb[7]))
 1481 # ENDIFMACRO
IFMACRO(dimension,3)
 1482 #         if(!(bbAll[1 + 12 * i] < bb[6]
 1483 #           || bbAll[0 + 12 * i] > bb[7]
 1484 #           || bbAll[3 + 12 * i] < bb[8]
 1485 #           || bbAll[2 + 12 * i] > bb[9]
 1486 #           || bbAll[5 + 12 * i] < bb[10]
 1487 #           || bbAll[4 + 12 * i] > bb[11]))
 1488 # ENDIFMACRO
                                                    {
 1489 #             rankRecv.resize(rankRecv.n + 1);
 1490 #             rankRecv[rankRecv.n - 1] = i;
 1491 #         }
 1492 # IFMACRO(dimension,2)
 1493 #         if(!(bbAll[5 + 8 * i] < bb[0]
 1494 #           || bbAll[4 + 8 * i] > bb[1]
 1495 #           || bbAll[7 + 8 * i] < bb[2]
 1496 #           || bbAll[6 + 8 * i] > bb[3]))
 1497 # ENDIFMACRO
IFMACRO(dimension,3)
 1498 #         if(!(bbAll[7 + 12 * i] < bb[0]
 1499 #           || bbAll[6 + 12 * i] > bb[1]
 1500 #           || bbAll[9 + 12 * i] < bb[2]
 1501 #           || bbAll[8 + 12 * i] > bb[3]
 1502 #           || bbAll[11 + 12 * i] < bb[4]
 1503 #           || bbAll[10 + 12 * i] > bb[5]))
 1504 # ENDIFMACRO
                                                    {
 1505 #             rankSend.resize(rankSend.n + 1);
 1506 #             rankSend[rankSend.n - 1] = i;
 1507 #         }
 1508 #     }
 1509 #     real[int] D, backupRegion(ThName.nt);
 1510 #     VhLocalOldPrivate<PetscScalar> def(scaledU);
 1511 # IFMACRO(!transfer#Q)
 1512 #     createPartition(ThName, D, Pk)
 1513 #     scaledU[] = uA[];
 1514 # ENDIFMACRO
IFMACRO(transfer#Q)
 1515 #     GlobalNumbering(uA, scaledU[]);
 1516 #     D.resize(scaledU[].n);
 1517 #     D = uA.D;
 1518 # ENDIFMACRO
    for[i, value : D] scaledU[][i] *= value;
 1519 #     fespace PhPartPrivate(ThName, P0);
 1520 #     {
 1521 #         PhPartPrivate backup = region;
 1522 #         backupRegion = backup[];
 1523 #         int[int] newRegion(ThName.nt);
 1524 #         int rank = mpiRank(ThName#Comm);
 1525 #         for[i, value : privateDmesh#ThName#khiDef[1]] newRegion[i] = abs(value - rank) < 1.0e-2;
 1526 #         ThName = change(ThName, fregion = newRegion[nuTriangle]);
 1527 #     }
 1528 #     meshN[int] recvTh(rankRecv.n);
 1529 #     meshN[int] sendTh(rankSend.n);
 1530 #     PetscScalar[int][int] exchangeU(rankSend.n + rankRecv.n);
 1531 #     mpiRequest[int] rqSendTh(rankSend.n);
 1532 #     mpiRequest[int] rqSendU(rankSend.n);
 1533 #     mpiRequest[int] rqRecvTh(rankRecv.n);
 1534 #     mpiRequest[int] rqRecvU(rankRecv.n);
 1535 #     for[i, value : rankRecv]
 1536 #         Irecv(processor(value, rqRecvTh[i]), recvTh[i]);
 1537 #     for[i, value : rankSend] {
 1538 #         PhPartPrivate part;
 1539 # IFMACRO(dimension,2)
 1540 #         part = (bbAll[4 + 8 * value] < x
 1541 #              && bbAll[5 + 8 * value] > x
 1542 #              && bbAll[6 + 8 * value] < y
 1543 #              && bbAll[7 + 8 * value] > y) ? 1.0 : 0.0;
 1544 # ENDIFMACRO
IFMACRO(dimension,3)
 1545 #         part = (bbAll[6 + 12 * value] < x
 1546 #              && bbAll[7 + 12 * value] > x
 1547 #              && bbAll[8 + 12 * value] < y
 1548 #              && bbAll[9 + 12 * value] > y
 1549 #              && bbAll[10 + 12 * value] < z
 1550 #              && bbAll[11 + 12 * value] > z) ? 1.0 : 0.0;
 1551 # ENDIFMACRO
        if(part[].linfty > 1.0e-2) {
 1552 #             int[int] n2o;
 1553 #             sendTh[i] = trunc(ThName, part > 1.0e-2, new2old = n2o);
 1554 #             fespace VhRestrictionPrivate(sendTh[i], Pk);
 1555 #             int[int] map = restrict(VhRestrictionPrivate, VhLocalOldPrivate, n2o);
 1556 #             exchangeU[rankRecv.n + i].resize(VhRestrictionPrivate.ndof);
 1557 #             exchangeU[rankRecv.n + i] = scaledU[](map);
 1558 #             Isend(processor(value, rqSendTh[i]), sendTh[i]);
 1559 #             Isend(processor(value, rqSendU[i]), exchangeU[rankRecv.n + i]);
 1560 #         }
 1561 #         else
            Isend(processor(value, rqSendTh[i]), sendTh[i]);
 1562 #     }
 1563 #     meshN gluedExchange;
 1564 #     {
 1565 #         meshN[int] toGlue(rankRecv.n);
 1566 #         int j = 0;
 1567 #         for[i, value : rankRecv] {
 1568 #             int index = mpiWaitAny(rqRecvTh);
 1569 #             if(recvTh[index].nt) {
 1570 #                 fespace VhRestrictionPrivate(recvTh[index], Pk);
 1571 #                 exchangeU[index].resize(VhRestrictionPrivate.ndof);
 1572 #                 Irecv(processor(rankRecv[index], rqRecvU[index]), exchangeU[index]);
 1573 #                 fespace PhRestrictionPrivate(recvTh[index], P0);
 1574 #                 PhRestrictionPrivate ind = region;
 1575 #                 if(abs(ind[].max - 1.0) < 1.0e-2) {
 1576 #                     toGlue[j] = trunc(recvTh[index], ind > 1.0e-2);
 1577 #                     ++j;
 1578 #                 }
 1579 #             }
 1580 #         }
 1581 #         toGlue.resize(j);
 1582 #         gluedExchange = gluemesh(toGlue);
 1583 #     }
 1584 #     meshN interpolateExchange;
 1585 #     fespace PhExchangePrivate(gluedExchange, P0);
 1586 #     fespace VhExchangePrivate(gluedExchange, Pk);
 1587 #     VhExchangePrivate<PetscScalar> def(uExchange);
 1588 #     for[i, value : rankRecv] {
 1589 #         int index = mpiWaitAny(rqRecvU);
 1590 #         if(index != mpiUndefined) {
 1591 #             if(recvTh[index].nt) {
 1592 #                 fespace PhRestrictionPrivate(recvTh[index], P0);
 1593 #                 matrix R = interpolate(PhRestrictionPrivate, PhExchangePrivate);
 1594 #                 if(R.nnz != R.n) {
 1595 #                     R.thresholding(1.0e-2);
 1596 #                     assert(R.nnz == R.n);
 1597 #                 }
 1598 #                 int[int] I, J;
 1599 #                 real[int] C;
 1600 #                 [I, J, C] = R;
 1601 #                 fespace VhRestrictionPrivate(recvTh[index], Pk);
 1602 #                 int[int] restriction = restrict(VhRestrictionPrivate, VhExchangePrivate, J);
 1603 #                 uExchange[](restriction) += exchangeU[index];
 1604 #             }
 1605 #         }
 1606 #     }
 1607 #     searchMethod = backupSM;
 1608 # IFMACRO(!transfer#Q)
 1609 #     def(uANew) = def(uExchange);
 1610 # ENDIFMACRO
IFMACRO(transfer#Q)
 1611 #     matrix loc = interpolate(VhLocalNewPrivate, VhExchangePrivate);
 1612 #     matrix<PetscScalar> locPetscScalar = loc;
 1613 #     constructor(P, uANew, uA, locPetscScalar, numbering = uExchange[]);
 1614 # ENDIFMACRO
    ThName = change(ThName, fregion = backupRegion[nuTriangle]);
 1615 #     mpiWaitAll(rqSendTh);
 1616 #     mpiWaitAll(rqSendU);
 1617 # ENDIFMACRO
IFMACRO(ThName#NestedIn#ThNew)
 1618 # IFMACRO(!transfer#Q)
 1619 #     def(uANew) = def(uA);
 1620 #     Mat<PetscScalar> exchange;
 1621 #     createMat(ThNew, exchange, PkNew)
 1622 #     PetscScalar[int] tmp;
 1623 #     ChangeNumbering(exchange, uANew[], tmp);
 1624 #     ChangeNumbering(exchange, uANew[], tmp, inverse = true, exchange = true);
 1625 # ENDIFMACRO
IFMACRO(transfer#Q)
 1626 #     matrix loc = interpolate(VhLocalNewPrivate, VhLocalOldPrivate);
 1627 #     matrix<PetscScalar> locPetscScalar = loc;
 1628 #     constructor(P, uANew, uA, locPetscScalar);
 1629 # ENDIFMACRO
ENDIFMACRO
}
 1630 # if(verbosity > 0) {
 1631 #     mpiBarrier(ThName#Comm);
 1632 #     if(mpiRank(ThName#Comm) == 0)
 1633 #         cout.scientific << " --- distributed solution transferred (in " << mpiWtime() - timerTransfer << ")" << endl;
 1634 # }
 1635 # }
 1636 # ENDIFMACRO
IFMACRO(!privateDmesh#ThName)
 1637 # assert(0);
 1638 # ENDIFMACRO
 )  // EOM
 1639 @ 
 1640 @ macro transferMat(ThName, Pk, A, ThNew, PkNew, ANew, P) {
 1641 # NewMacro transfer#Q() EndMacro
transferBase(ThName, Pk, A, ThNew, PkNew, ANew, P)
 1642 # } )  // EOM
 1643 @ 
 1644 @ macro transfer(ThName, Pk, uPrivate, ThNew, PkNew, uNew) {
 1645 # transferBase(ThName, Pk, uPrivate, ThNew, PkNew, uNew, 1)
 1646 # } )  // EOM
 1647 @ 
 1648 @ macro createParMmgCommunicators(ThName, ThParMmgName, ThN2O, ThCommunicators) {
 1649 # IFMACRO(!privateDmesh#ThName)
 1650 # assert(0);
 1651 # ENDIFMACRO
    Mat<PetscScalar> A;
 1652 #     createMat(ThName, A, P1);
 1653 #     real[int] D(ThName.nt);
 1654 #     createPartition(ThName, D, P0);
 1655 #     fespace PhPrivate(ThName, P0);
 1656 #     PhPrivate d;
 1657 #     d[] = D;
 1658 #     ThParMmgName = trunc(ThName, abs(d) > 1.0e-2, label = -111111, new2old = ThN2O);
 1659 #     fespace VhWithoutOverlapPrivate(ThParMmgName, P1);
 1660 #     varf vG(uPrivate, vPrivate) = on(-111111, uPrivate = 1.0);
 1661 #     real[int] gamma(ThParMmgName.nv);
 1662 #     gamma = vG(0, VhWithoutOverlapPrivate, tgv = -1);
 1663 #     fespace VhWithOverlapPrivate(ThName, P1);
 1664 #     int[int] restriction = restrict(VhWithoutOverlapPrivate, VhWithOverlapPrivate, ThN2O);
 1665 #     ParMmgCommunicators(A, gamma, restriction, ThCommunicators);
 1666 # } )  // EOM
 1667 @ 
 1668 @ macro gatherDmesh(ThName, comm, ThGatherName) {
 1669 # IFMACRO(!privateDmesh#ThName)
 1670 # assert(0);
 1671 # ENDIFMACRO
IFMACRO(!ThName#Comm)
 1672 # NewMacro ThName#Comm()mpiCommWorld EndMacro
ENDIFMACRO
IFMACRO(!ThGatherName#Comm)
 1673 # NewMacro ThGatherName#Comm()mpiCommWorld EndMacro
ENDIFMACRO
IFMACRO(!meshN)
 1674 # NewMacro meshN()mesh EndMacro
ENDIFMACRO
    if(verbosity > 0 && ThName#Comm)
 1675 #         mpiBarrier(ThName#Comm);
 1676 #     real timerGather = mpiWtime();
 1677 #     int size;
 1678 #     if(ThGatherName#Comm)
 1679 #         size = mpiSize(comm);
 1680 #     else
        size = 0;
 1681 #     int reduce;
 1682 #     mpiAllReduce(size, reduce, ThName#Comm, mpiSUM);
 1683 #     assert(reduce == mpiSize(ThName#Comm));
 1684 #     meshN ThNoOverlap;
 1685 #     if(mpiSize(ThName#Comm) == 1)
 1686 #         ThNoOverlap = ThName;
 1687 #     else
        ThNoOverlap = trunc(ThName, abs(privateDmesh#ThName#khiDef[1][nuTriangle] - mpiRank(ThName#Comm)) < 1.0e-2, label = -111112);
 1688 #     if(ThGatherName#Comm) {
 1689 #         meshN[int] recvTh(size);
 1690 #         mpiRequest[int] rqRecv(size - 1);
 1691 #         for(int i = 1; i < size; ++i)
 1692 #             Irecv(processor(i, comm, rqRecv[i - 1]), recvTh[i]);
 1693 #         recvTh[0] = ThNoOverlap;
 1694 #         mpiWaitAll(rqRecv);
 1695 #         ThGatherName = gluemesh(recvTh);
 1696 #     }
 1697 #     else {
 1698 #         mpiRequest rqSend;
 1699 #         Isend(processor(0, comm, rqSend), ThNoOverlap);
 1700 #         mpiWait(rqSend);
 1701 #     }
 1702 #     if(verbosity > 0 && ThName#Comm) {
 1703 #         mpiBarrier(ThName#Comm);
 1704 #         if(mpiRank(ThName#Comm) == 0)
 1705 #             cout.scientific << " --- distributed mesh gathered (in " << mpiWtime() - timerGather << ")" << endl;
 1706 #     }
 1707 # }
 1708 # reconstructDmesh(ThGatherName) )  // EOM
 1709 @ 
 1710 @ macro scatterDmesh(ThName, comm, ThScatterName) {
 1711 # IFMACRO(!privateDmesh#ThName)
 1712 # assert(0);
 1713 # ENDIFMACRO
IFMACRO(!ThName#Comm)
 1714 # NewMacro ThName#Comm()mpiCommWorld EndMacro
ENDIFMACRO
IFMACRO(!ThScatterName#Comm)
 1715 # NewMacro ThScatterName#Comm()mpiCommWorld EndMacro
ENDIFMACRO
IFMACRO(!meshN)
 1716 # NewMacro meshN()mesh EndMacro
ENDIFMACRO
    if(verbosity > 0 && ThScatterName#Comm)
 1717 #         mpiBarrier(ThScatterName#Comm);
 1718 #     real timerScatter = mpiWtime();
 1719 #     int size;
 1720 #     if(ThName#Comm) {
 1721 #         size = mpiSize(comm);
 1722 #     }
 1723 #     else
        size = 0;
 1724 #     int reduce;
 1725 #     mpiAllReduce(size, reduce, ThScatterName#Comm, mpiSUM);
 1726 #     assert(reduce == mpiSize(ThScatterName#Comm));
 1727 #     if(ThName#Comm) {
 1728 #         meshN ThNoOverlap;
 1729 #         if(mpiSize(ThName#Comm) == 1 || (privateDmesh#ThName#intersectionDef.n == 0 && privateDmesh#ThName#khiDef[0].n == 0 && privateDmesh#ThName#khiDef[1].n == 0))
 1730 #             ThNoOverlap = ThName;
 1731 #         else
            ThNoOverlap = trunc(ThName, abs(privateDmesh#ThName#khiDef[1][nuTriangle] - mpiRank(ThName#Comm)) < 1.0e-2, label = -111112);
 1732 #         fespace PhPartPrivate(ThNoOverlap, P0);
 1733 #         PhPartPrivate part;
 1734 #         partitionerSeq(part[], ThNoOverlap, mpiSize(comm));
 1735 #         partitionerPar(part[], ThNoOverlap, mpiCommSelf, mpiSize(comm));
 1736 #         meshN[int] sendTh(mpiSize(comm) - 1);
 1737 #         mpiRequest[int] rqSend(mpiSize(comm) - 1);
 1738 #         for(int i = 1; i < mpiSize(comm); ++i) {
 1739 #             sendTh[i - 1] = trunc(ThNoOverlap, abs(part - i) < 1.0e-2, label = -111112);
 1740 #             Isend(processor(i, comm, rqSend[i - 1]), sendTh[i - 1]);
 1741 #         }
 1742 #         ThScatterName = trunc(ThNoOverlap, abs(part) < 1.0e-2, label = -111112);
 1743 #         mpiWaitAll(rqSend);
 1744 #     }
 1745 #     else if(ThScatterName#Comm) {
 1746 #         mpiRequest rqRecv;
 1747 #         Irecv(processor(0, comm, rqRecv), ThScatterName);
 1748 #         mpiWait(rqRecv);
 1749 #     }
 1750 #     if(verbosity > 0 && ThScatterName#Comm) {
 1751 #         mpiBarrier(ThScatterName#Comm);
 1752 #         if(mpiRank(ThScatterName#Comm) == 0)
 1753 #             cout.scientific << " --- distributed mesh scattered (in " << mpiWtime() - timerScatter << ")" << endl;
 1754 #     }
 1755 # }
 1756 # reconstructDmesh(ThScatterName) )  // EOM
 1757 @ 
 1758 @ macro gatherSolution(ThName, comm, ThGatherName, Pk, uPrivate, uNew) {
 1759 # IFMACRO(!privateDmesh#ThName)
 1760 # assert(0);
 1761 # ENDIFMACRO
IFMACRO(!privateDmesh#ThGatherName)
 1762 # assert(0);
 1763 # ENDIFMACRO
IFMACRO(!ThName#Comm)
 1764 # NewMacro ThName#Comm()mpiCommWorld EndMacro
ENDIFMACRO
IFMACRO(!ThGatherName#Comm)
 1765 # NewMacro ThGatherName#Comm()mpiCommWorld EndMacro
ENDIFMACRO
IFMACRO(!meshN)
 1766 # NewMacro meshN()mesh EndMacro
ENDIFMACRO
IFMACRO(!intN)
 1767 # NewMacro intN()int2d EndMacro
ENDIFMACRO
    if(verbosity > 0 && ThName#Comm)
 1768 #         mpiBarrier(ThName#Comm);
 1769 #     real timerGather = mpiWtime();
 1770 # IFMACRO(with,PETSc)
 1771 #     PetscScalar[int] vPrivate(uPrivate[]);
 1772 #     {
 1773 #         Mat<PetscScalar> gather;
 1774 #         createMat(ThName, gather, Pk)
 1775 #         PetscScalar[int] trash;
 1776 #         ChangeNumbering(gather, vPrivate, trash);
 1777 #         ChangeNumbering(gather, vPrivate, trash, inverse = true, exchange = false);
 1778 #     }
 1779 # ENDIFMACRO
    if(ThGatherName#Comm) {
 1780 #         meshN[int] recvTh(mpiSize(comm) - 1);
 1781 #         PetscScalar[int][int] recvU(mpiSize(comm) - 1);
 1782 #         mpiRequest[int] rqRecvTh(mpiSize(comm) - 1);
 1783 #         mpiRequest[int] rqRecvU(mpiSize(comm) - 1);
 1784 #         for(int i = 0; i < mpiSize(comm) - 1; ++i)
 1785 #             Irecv(processor(i + 1, comm, rqRecvTh[i]), recvTh[i]);
 1786 #         for(int i = 0; i < mpiSize(comm) - 1; ++i) {
 1787 #             int index = mpiWaitAny(rqRecvTh);
 1788 #             fespace VhRecvPrivate(recvTh[index], Pk);
 1789 #             recvU[index].resize(VhRecvPrivate.ndof);
 1790 #             Irecv(processor(index + 1, comm, rqRecvU[index]), recvU[index]);
 1791 #         }
 1792 #         fespace VhGlobalGatherPrivate(ThGatherName, Pk);
 1793 # IFMACRO(!with)
 1794 #         PetscScalar[int] visited(VhGlobalGatherPrivate.ndof);
 1795 #         visited = 1.0;
 1796 # ENDIFMACRO
        {
 1797 #             fespace VhRestrictionPrivate(ThName, Pk);
 1798 #             matrix R = interpolate(VhRestrictionPrivate, VhGlobalGatherPrivate);
 1799 # IFMACRO(with,PETSc)
 1800 #             uNew[] += R' * vPrivate;
 1801 # ENDIFMACRO
IFMACRO(!with)
 1802 #             PetscScalar[int] buffer = R' * uPrivate[];
 1803 #             buffer .*= visited;
 1804 #             PetscScalar[int] ones(VhRestrictionPrivate.ndof);
 1805 #             ones = -1.0;
 1806 #             visited += R' * ones;
 1807 #             for[j, value : visited] value = max(abs(value), 0.0);
 1808 #             uNew[] += buffer;
 1809 # ENDIFMACRO
        }
 1810 #         for(int i = 0; i < mpiSize(comm) - 1; ++i) {
 1811 #             int index = mpiWaitAny(rqRecvU);
 1812 #             fespace VhRestrictionPrivate(recvTh[index], Pk);
 1813 #             matrix R = interpolate(VhRestrictionPrivate, VhGlobalGatherPrivate);
 1814 # IFMACRO(with,PETSc)
 1815 #             uNew[] += R' * recvU[index];
 1816 # ENDIFMACRO
IFMACRO(!with)
 1817 #             PetscScalar[int] buffer = R' * recvU[index];
 1818 #             buffer .*= visited;
 1819 #             PetscScalar[int] ones(VhRestrictionPrivate.ndof);
 1820 #             ones = -1.0;
 1821 #             visited += R' * ones;
 1822 #             for[j, value : visited] value = max(abs(value), 0.0);
 1823 #             uNew[] += buffer;
 1824 # ENDIFMACRO
        }
 1825 # IFMACRO(with,PETSc)
 1826 #         Mat<PetscScalar> gather;
 1827 #         createMat(ThGatherName, gather, Pk)
 1828 #         exchange(gather, uNew[], scaled = false);
 1829 # ENDIFMACRO
    }
 1830 #     else {
 1831 #         mpiRequest[int] rqSend(2);
 1832 #         Isend(processor(0, comm, rqSend[0]), ThName);
 1833 #         fespace VhLocalGatherPrivate(ThName, Pk);
 1834 #         assert(uPrivate[].n == VhLocalGatherPrivate.ndof);
 1835 # IFMACRO(with,PETSc)
 1836 #         Isend(processor(0, comm, rqSend[1]), vPrivate);
 1837 # ENDIFMACRO
IFMACRO(!with)
 1838 #         Isend(processor(0, comm, rqSend[1]), uPrivate[]);
 1839 # ENDIFMACRO
        mpiWaitAll(rqSend);
 1840 #     }
 1841 #     if(verbosity > 0 && ThName#Comm) {
 1842 #         mpiBarrier(ThName#Comm);
 1843 #         if(mpiRank(ThName#Comm) == 0)
 1844 #             cout.scientific << " --- distributed solution gathered (in " << mpiWtime() - timerGather << ")" << endl;
 1845 #     }
 1846 # } )  // EOM
 1847 @ 
 1848 @ macro scatterSolution(ThName, comm, ThScatterName, Pk, uPrivate, uNew) {
 1849 # IFMACRO(!privateDmesh#ThName)
 1850 # assert(0);
 1851 # ENDIFMACRO
IFMACRO(!privateDmesh#ThScatterName)
 1852 # assert(0);
 1853 # ENDIFMACRO
IFMACRO(!def)
 1854 # NewMacro def(i)i EndMacro
ENDIFMACRO
IFMACRO(!ThName#Comm)
 1855 # NewMacro ThName#Comm()mpiCommWorld EndMacro
ENDIFMACRO
IFMACRO(!ThScatterName#Comm)
 1856 # NewMacro ThScatterName#Comm()mpiCommWorld EndMacro
ENDIFMACRO
IFMACRO(!meshN)
 1857 # NewMacro meshN()mesh EndMacro
ENDIFMACRO
    if(verbosity > 0 && ThScatterName#Comm)
 1858 #         mpiBarrier(ThScatterName#Comm);
 1859 #     real timerScatter = mpiWtime();
 1860 #     if(mpiRank(comm) == 0) {
 1861 #         broadcast(processor(0, comm), ThName);
 1862 #         broadcast(processor(0, comm), uPrivate[]);
 1863 #         def(uNew) = def(uPrivate);
 1864 #     }
 1865 #     else {
 1866 #         meshN ThGlobalScatter;
 1867 #         broadcast(processor(0, comm), ThGlobalScatter);
 1868 #         fespace VhGlobalScatterPrivate(ThGlobalScatter, Pk);
 1869 #         VhGlobalScatterPrivate<PetscScalar> def(uGlobalScatter);
 1870 #         broadcast(processor(0, comm), uGlobalScatter[]);
 1871 #         def(uNew) = def(uGlobalScatter);
 1872 #     }
 1873 #     if(verbosity > 0 && ThScatterName#Comm) {
 1874 #         mpiBarrier(ThScatterName#Comm);
 1875 #         if(mpiRank(ThScatterName#Comm) == 0)
 1876 #             cout.scientific << " --- distributed solution scattered (in " << mpiWtime() - timerScatter << ")" << endl;
 1877 #     }
 1878 # } )  // EOM
 1879 @ 
 1880 @ macro CoherentGlobalMesh(MatT, MatV, ThName, ThGlobal) {
 1881 # IFMACRO(!ThName#Comm)
 1882 #     NewMacro ThName#Comm()mpiCommWorld EndMacro
ENDIFMACRO
    int[int] numberingT;
 1883 #     int[int] numberingV;
 1884 #     GlobalNumbering(MatT, numberingT);
 1885 #     GlobalNumbering(MatV, numberingV);
 1886 #     fespace VhLocalPrivateT(ThName, P0);
 1887 #     fespace VhGlobalPrivateT(ThGlobal, P0);
 1888 #     fespace VhLocalPrivateV(ThName, P1);
 1889 #     fespace VhGlobalPrivateV(ThGlobal, P1);
 1890 #     PetscScalar[int] numberingScalarT(numberingT.n), globalT, reduceT(ThGlobal.nt);
 1891 #     PetscScalar[int] numberingScalarV(numberingV.n), globalV, reduceV(ThGlobal.nv);
 1892 #     for[i, value : numberingT] numberingScalarT[i] = value;
 1893 #     for[i, value : numberingV] numberingScalarV[i] = value;
 1894 #     ChangeNumbering(MatT, numberingScalarT, globalT);
 1895 #     ChangeNumbering(MatV, numberingScalarV, globalV);
 1896 #     if (ThName.nv) {
 1897 #         ChangeNumbering(MatT, numberingScalarT, globalT, inverse = true);
 1898 #         ChangeNumbering(MatV, numberingScalarV, globalV, inverse = true);
 1899 # IFMACRO(ThName#N2O)
 1900 #         int[int] restrictionT = restrict(VhLocalPrivateT, VhGlobalPrivateT, ThName#N2O);
 1901 #         int[int] restrictionV = restrict(VhLocalPrivateV, VhGlobalPrivateV, ThName#N2O);
 1902 # ENDIFMACRO
IFMACRO(!ThName#N2O)
 1903 #         int[int] restrictionT, restrictionV;
 1904 #         {
 1905 #             fespace PhGlobalPrivate(ThGlobal, P0);
 1906 #             fespace PhLocalPrivate(ThName, P0);
 1907 #             matrix R = interpolate(PhLocalPrivate, PhGlobalPrivate);
 1908 #             int[int] I, J;
 1909 #             real[int] C;
 1910 #             [I, J, C] = R;
 1911 #             restrictionT = restrict(VhLocalPrivateT, VhGlobalPrivateT, J);
 1912 #             restrictionV = restrict(VhLocalPrivateV, VhGlobalPrivateV, J);
 1913 #         }
 1914 # ENDIFMACRO
        for[i, value : restrictionT] reduceT[value] = numberingScalarT[i];
 1915 #         for[i, value : restrictionV] reduceV[value] = numberingScalarV[i];
 1916 #     }
 1917 #     globalT.resize(ThGlobal.nt);
 1918 #     globalV.resize(ThGlobal.nv);
 1919 #     mpiAllReduce(reduceT, globalT, ThName#Comm, mpiSUM);
 1920 #     mpiAllReduce(reduceV, globalV, ThName#Comm, mpiSUM);
 1921 #     int[int] globalIntT(globalT.n);
 1922 #     int[int] globalIntV(globalV.n);
 1923 #     for[i, value : globalT] globalIntT[i] = abs(value);
 1924 #     for[i, value : globalV] globalIntV[i] = abs(value);
 1925 #     ThGlobal = change(ThGlobal, renumt = globalIntT, renumv = globalIntV);
 1926 # } )  // EOM
 1927 @ 
 1928 @ macro DmeshSave(ThName, name)saveDmesh(ThName, name) )  // EOM
 1929 @ macro DmeshLoad(ThName, name)loadDmesh(ThName, name) )  // EOM
 1930 @ macro DmeshCreate(ThName)buildDmesh(ThName) )  // EOM
 1931 @ macro DmeshReconstruct(ThName)reconstructDmesh(ThName) )  // EOM
 1932 @ macro DmeshReconstructWithNeighbors(ThName, neighborsName)reconstructDmeshWithNeighbors(ThName, neighborsName) )  // EOM
 1933 @ macro DmeshInitialize(NewName)initializeDmesh(NewName) )  // EOM
 1934 @ macro DmeshCopy(OldName, NewName)copyDmesh(OldName, NewName) )  // EOM
 1935 @ macro DmeshScatter(ThName, comm, ThScatterName)scatterDmesh(ThName, comm, ThScatterName) )  // EOM
 1936 @ macro DmeshGather(ThName, comm, ThGatherName)gatherDmesh(ThName, comm, ThGatherName) )  // EOM
 1937 @ macro PartitionCreate(ThName, PartName, PkName)createPartition(ThName, PartName, PkName) )  // EOM
 1938 @ macro ParMmgCreateCommunicators(ThName, ThParMmgName, ThN2O, ThCommunicators)createParMmgCommunicators(ThName, ThParMmgName, ThN2O, ThCommunicators) )  // EOM
 1939 @ macro VecScatter(ThName, comm, ThScatterName, Pk, uPrivate, uNew)scatterSolution(ThName, comm, ThScatterName, Pk, uPrivate, uNew) )  // EOM
 1940 @ macro VecGather(ThName, comm, ThGatherName, Pk, uPrivate, uNew)gatherSolution(ThName, comm, ThGatherName, Pk, uPrivate, uNew) )  // EOM
 1941 @ macro VecInterpolate(ThName, Pk, uPrivate, ThNew, PkNew, uNew)transfer(ThName, Pk, uPrivate, ThNew, PkNew, uNew) )  // EOM
 1942 @ macro MatCreate(ThName, MatName, PkName)createMat(ThName, MatName, PkName) )  // EOM
 1943 @ macro MatInterpolate(ThName, Pk, A, ThNew, PkNew, ANew, P)transferMat(ThName, Pk, A, ThNew, PkNew, ANew, P) )  // EOM
 1944 @ 
 1894 : 
   15 : 
   16 : string configFile = getARGV("-c", "config.csv");
   17 : 
   18 : string meshFile = getARGV("-m", "mesh.mesh");
   19 : 
   20 : string outputDir = getARGV("-o", "../output");
   21 : 
   22 : string outputName = getARGV("-n", "sim");
   23 : 
   24 : // ----- FINITE ELEMENT SPACE -----
   25 : func Pk = P2;
   26 : 
   27 : // ----- QUADRATURE FORMULAR -----
   28 : macro QFV()qfV5//
   29 : macro DQFV()qfV2//
   30 : macro QFT()qf2pT//
   31 : 
   32 : // ----- ACCURACY -----
   33 : real solverEps = 1e-6;
   34 : 
   35 : 
   36 : // -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
   37 : // INPUT
   38 : // meshPath: path to mesh
   39 : // cardTheta: number of conductor-groups
   40 : // outputDir: path to output directory
   41 : // currInd: index of current simulation used in ensemble simulations
   42 : 
   43 : // GLOBAL SETTINGS
   44 : // Pk: Type Finite element space
   45 : // QFV: Quadrature formula for volume integrals
   46 : // DQFV: Quadrature formula for volume integrals, lower order
   47 : // QFT: Quadrature formula for surface integrals
   48 : 
   49 : // GLOBAL VARIABLES
   50 : // Th: Mesh
   51 : // ThNo: Mesh without overlap
   52 : // part: Partition of mesh
   53 : // n2o: Map from new (PETSc) indexing to old one
   54 : // Vh: Finite element space
   55 : // uh: Finite element function, solution with 0 Dirichlet boundary conditions
   56 : // wh: Finite element function, on the boundary otherwise 0
   57 : // A: Stiffness matrix
   58 : // U: Vector of solutions uh; for each conductor-group theta; size: cardTheta 
   59 : // W: Vector of solutions wh; for each conductor-group theta; size: cardTheta
   60 : // L: Vector of stiffness matrix entries on boundary; for each conductor-group theta; size: cardTheta
   61 : 
   62 : string[int] config = readConfig( configFile );
   63 : 
   64 : int cardTheta = getCardTheta( config );
   65 : 
   66 : // -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
   67 : // (0) MESH 
   68 : // -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
   69 : 
   70 : // read mesh
   71 : mesh3 ThNo, Th = readmesh3(meshFile);
   72 : 
   73 : fespace Ph(Th, P0);
   74 : Ph part;
   75 : 
   76 : // distribute overlapped mesh to the other processeors
   77 : buildDmesh(Th)
  553 @ 
  554 @   
  555 @   
  556 @   
  557 @  
  558 @  
  559 @ 
  560 @ 
  561 @ 
  562 @ 
  563 @        /* three-dimensional problem             */
  564 @         /* three-dimensional integral            */
  565 @ 
  566 @ 
  567 @        /* three-dimensional surface problem     */
  568 @         /* two-dimensional integral              */
  569 @ 
  570 @ 
  571 @        /* three-dimensional line problem        */
  572 @         /* one-dimensional integral              */
  573 @ 
  574 @ 
  575 @         /* two-dimensional problem               */
  576 @         /* two-dimensional integral              */
  577 @ 
  578 @ 
  579 @ 
  580 @   
  581 @ 
  582 @   
  583 @  
  584 @   
  585 @   
  586 @   
  587 @ 
  588 @   
  589 @ 
  590 @  /* not currently implemented */
  591 @ 
  592 @ 
  593 @ 
  594 @ 
  595 @  /* not currently implemented */
  596 @ 
  597 @       
  598 @ 
  599 @ 
  600 @ 
  601 @  /* not currently implemented */
  602 @ 
  603 @       
  604 @ 
  605 @ 
  606 @ 
  607 @ 
  608 @ 
  609 @   
  610 @ 
  611 @   
  612 @ 
  613 @  /* not currently implemented */
  614 @ 
  615 @ 
  616 @  /* not currently implemented */
  617 @ 
  618 @ 
  619 @  /* not currently implemented */
  620 @ 
  621 @ 
  622 @ 
  623 @    
  624 @ 
  625 @ 
  626 @    
  627 @ 
  628 @ 
  629 @  
  630 @          
  631 @ 
  632 @ 
  633 @      
  634 @ 
  635 @ 
  636 @ 
  637 @ 
  638 @ 
  553 @ IFMACRO(!privateDmeshTh)
  554 & NewMacro privateDmeshTh()privateDmeshTh EndMacro
NewMacro privateDmeshThkhi()privateDmeshThkhiDef EndMacro
NewMacro privateDmeshThintersection()privateDmeshThintersectionDef EndMacro
real[int][int] privateDmeshThkhi(2);
  555 & real[int][int] privateDmeshThintersection;
  556 & ENDIFMACRO
  554 @ NewMacro privateDmeshTh()privateDmeshTh EndMacro
  555 @ NewMacro privateDmeshThkhi()privateDmeshThkhiDef EndMacro
  556 @ NewMacro privateDmeshThintersection()privateDmeshThintersectionDef EndMacro
  557 @ real[int][int] privateDmeshThkhi privateDmeshThkhiDef (2);
  558 @ real[int][int] privateDmeshThintersection privateDmeshThintersectionDef ;
  559 @ 
  557 @ {
  558 @ IFMACRO(!meshN)
  559 & IFMACRO(dimension,3)
  560 & NewMacro meshN()mesh3 EndMacro     /* three-dimensional problem             */
  561 & NewMacro intN()int3d EndMacro      /* three-dimensional integral            */
  562 & ENDIFMACRO
IFMACRO(dimension,3S)
  563 & NewMacro meshN()meshS EndMacro     /* three-dimensional surface problem     */
  564 & NewMacro intN()int2d EndMacro      /* two-dimensional integral              */
  565 & ENDIFMACRO
IFMACRO(dimension,3L)
  566 & NewMacro meshN()meshL EndMacro     /* three-dimensional line problem        */
  567 & NewMacro intN()int1d EndMacro      /* one-dimensional integral              */
  568 & ENDIFMACRO
IFMACRO(!meshN)
  569 & NewMacro meshN()mesh EndMacro      /* two-dimensional problem               */
  570 & NewMacro intN()int2d EndMacro      /* two-dimensional integral              */
  571 & ENDIFMACRO
ENDIFMACRO
  572 @ IFMACRO(!ThComm)
  573 & NewMacro ThComm()mpiCommWorld EndMacro
ENDIFMACRO
  573 @ NewMacro ThComm()mpiCommWorld EndMacro
  574 @ 
  574 @ NewMacro privateBuildDmesh()1 EndMacro
  575 @ int[int][int] intersection;
  576 @ NewMacro privateDmeshThTab()privateDmeshTh EndMacro
  577 @ NewMacro privateDmeshThTabkhi()privateDmeshThkhiDef EndMacro
  578 @ NewMacro privateDmeshThTabintersection()privateDmeshThintersectionDef EndMacro
  579 @ IFMACRO(ThN2O)
  580 & NewMacro privateDmeshN2O()ThN2O EndMacro
IFMACRO(ThRefinementFactor)
  581 & exit(10); /* not currently implemented */
  582 & ENDIFMACRO
ENDIFMACRO
  583 @ IFMACRO(ThUserPartitioning)
  584 & IFMACRO(ThRefinementFactor)
  585 & exit(11); /* not currently implemented */
  586 & ENDIFMACRO
buildWithPartitioning(Th, ThUserPartitioning, 1, intersection, privateDmeshThkhi[0], P1, ThComm);
  587 & ENDIFMACRO
  588 @ IFMACRO(ThPeriodicity)
  589 & IFMACRO(ThRefinementFactor)
  590 & exit(12); /* not currently implemented */
  591 & ENDIFMACRO
buildPeriodic(Th, 1, intersection, privateDmeshThkhi[0], P1, ThComm, ThPeriodicity);
  592 & ENDIFMACRO
  593 @ IFMACRO(!ThUserPartitioning)
  594 & IFMACRO(!ThPeriodicity)
  595 & IFMACRO(ThCartesianPartitioning)
  596 & IFMACRO(!dimension)
  597 & NewMacro dimension()2 EndMacro
ENDIFMACRO
NewMacro privateDmeshCartesianPartitioning() EndMacro
IFMACRO(ThRefinementFactor)
  598 & exit(13); /* not currently implemented */
  599 & ENDIFMACRO
IFMACRO(removeZeros,true)
  600 & exit(103); /* not currently implemented */
  601 & ENDIFMACRO
IFMACRO(trueRestrict,true)
  602 & exit(103); /* not currently implemented */
  603 & ENDIFMACRO
ENDIFMACRO
IFMACRO(!ThRefinementFactor)
  604 & int privateS = 1;
  605 & ENDIFMACRO
IFMACRO(ThRefinementFactor)
  606 & int privateS = ThRefinementFactor;
  607 & ENDIFMACRO
IFMACRO(ThOverlap)
  608 & meshN privateBorder;
  609 & buildOverlap(Th, privateBorder, -111111, privateS, ThOverlap, intersection, privateDmeshThkhi[0], P1, ThComm, false);
  610 & ENDIFMACRO
IFMACRO(!ThOverlap)
  611 & build(Th, privateS, intersection, privateDmeshThkhi[0], P1, ThComm);
  612 & ENDIFMACRO
ENDIFMACRO
ENDIFMACRO
  594 @ IFMACRO(!ThPeriodicity)
  595 & IFMACRO(ThCartesianPartitioning)
  596 & IFMACRO(!dimension)
  597 & NewMacro dimension()2 EndMacro
ENDIFMACRO
NewMacro privateDmeshCartesianPartitioning() EndMacro
IFMACRO(ThRefinementFactor)
  598 & exit(13); /* not currently implemented */
  599 & ENDIFMACRO
IFMACRO(removeZeros,true)
  600 & exit(103); /* not currently implemented */
  601 & ENDIFMACRO
IFMACRO(trueRestrict,true)
  602 & exit(103); /* not currently implemented */
  603 & ENDIFMACRO
ENDIFMACRO
IFMACRO(!ThRefinementFactor)
  604 & int privateS = 1;
  605 & ENDIFMACRO
IFMACRO(ThRefinementFactor)
  606 & int privateS = ThRefinementFactor;
  607 & ENDIFMACRO
IFMACRO(ThOverlap)
  608 & meshN privateBorder;
  609 & buildOverlap(Th, privateBorder, -111111, privateS, ThOverlap, intersection, privateDmeshThkhi[0], P1, ThComm, false);
  610 & ENDIFMACRO
IFMACRO(!ThOverlap)
  611 & build(Th, privateS, intersection, privateDmeshThkhi[0], P1, ThComm);
  612 & ENDIFMACRO
ENDIFMACRO
  595 @ IFMACRO(ThCartesianPartitioning)
  596 & IFMACRO(!dimension)
  597 & NewMacro dimension()2 EndMacro
ENDIFMACRO
NewMacro privateDmeshCartesianPartitioning() EndMacro
IFMACRO(ThRefinementFactor)
  598 & exit(13); /* not currently implemented */
  599 & ENDIFMACRO
IFMACRO(removeZeros,true)
  600 & exit(103); /* not currently implemented */
  601 & ENDIFMACRO
IFMACRO(trueRestrict,true)
  602 & exit(103); /* not currently implemented */
  603 & ENDIFMACRO
ENDIFMACRO
  604 @ IFMACRO(!ThRefinementFactor)
  605 & int privateS = 1;
  606 & ENDIFMACRO
  605 @ int privateS = 1;
  606 @ 
  607 @ IFMACRO(ThRefinementFactor)
  608 & int privateS = ThRefinementFactor;
  609 & ENDIFMACRO
  610 @ IFMACRO(ThOverlap)
  611 & meshN privateBorder;
  612 & buildOverlap(Th, privateBorder, -111111, privateS, ThOverlap, intersection, privateDmeshThkhi[0], P1, ThComm, false);
  613 & ENDIFMACRO
  614 @ IFMACRO(!ThOverlap)
  615 & build(Th, privateS, intersection, privateDmeshThkhi[0], P1, ThComm);
  616 & ENDIFMACRO
  615 @ build(Th, privateS, intersection, privateDmeshThkhi[0], P1, ThComm) 
 1143 @      
 1144 @      
 1145 @      
 1146 @        
 1147 @        
 1148 @        
 1149 @                    
 1150 @  {
 1143 @     int[int] emptyArray(0);
 1144 @     real[int] emptyRealArray(0);
 1145 @     meshNmesh3 ThBorder;
 1146 @     int fakeInterface = -111111;
 1147 @     int overlap = 1;
 1148 @     bool excluded = false;
 1149 @     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface,  privateS, overlap,  intersection,  privateDmeshThkhi[0],  P1,  ThComm, excluded,  P1, def, init, emptyArray, emptyRealArray, 1) 
  968 @      
  969 @      
  970 @      
  971 @       
  972 @      
  973 @                      
  974 @       
  975 @       
  976 @     
  977 @       
  978 @  {
  968 @     meshNmesh3[int] ThTab(1);
  969 @     meshNmesh3[int] ThBorderTab(1);
  970 @     real[int][int] DTab(1);
  971 @     ThTab[0] = Th;
  972 @     matrix[int] prolongation(0);
  973 @     buildOverlapEdgePeriodicRecursive(ThTab, ThBorderTab,  fakeInterface,  privateS,  overlap, 1, prolongation,  intersection, DTab,  P1,  ThComm,  excluded,  P1,  def,  init,  emptyArray,  emptyRealArray,  1) 
  826 @ 
  827 @       
  828 @ 
  829 @ 
  830 @       
  831 @ 
  832 @     
  833 @     
  834 @       
  835 @        
  836 @          
  837 @              
  838 @           
  839 @           
  840 @          
  841 @ 
  842 @ 
  843 @         
  844 @                
  845 @              
  846 @                           
  847 @ 
  848 @                                                                               
  849 @                
  850 @                 
  851 @                 
  852 @                  
  853 @                       
  854 @ 
  855 @ 
  856 @                                                                                      
  857 @               
  858 @                 
  859 @                 
  860 @                  
  861 @               
  862 @                 
  863 @                 
  864 @                  
  865 @                               
  866 @ 
  867 @         
  868 @ 
  869 @ 
  870 @                
  871 @               
  872 @              
  873 @                
  874 @                  
  875 @                         
  876 @                            
  877 @                           
  878 @                 
  879 @                      
  880 @                  
  881 @                          
  882 @                         
  883 @                          
  884 @                             
  885 @                         
  886 @                 
  887 @             
  888 @                
  889 @                   
  890 @                             
  891 @                    
  892 @                       
  893 @                      
  894 @                        
  895 @                             
  896 @                           
  897 @                     
  898 @                     
  899 @                           
  900 @                       
  901 @                 
  902 @                  
  903 @                       
  904 @                 
  905 @             
  906 @                        
  907 @                   
  908 @                  
  909 @                    
  910 @                          
  911 @                       
  912 @                 
  913 @                 
  914 @                       
  915 @                   
  916 @             
  917 @             
  918 @                    
  919 @                   
  920 @                           
  921 @               
  922 @         
  923 @          
  924 @               
  925 @         
  926 @ 
  927 @ 
  928 @ 
  929 @           
  930 @ 
  931 @ 
  932 @              
  933 @ 
  934 @ 
  935 @                    
  936 @ 
  937 @            
  938 @             
  939 @               
  940 @         
  941 @ 
  942 @           
  943 @           
  944 @                             
  945 @ 
  946 @ 
  947 @                             
  948 @ 
  949 @     
  950 @         
  951 @                   
  952 @                     
  953 @                 
  954 @               
  955 @                  
  956 @             
  957 @               
  958 @         
  959 @            
  960 @ 
  961 @ 
  962 @               
  963 @                          
  964 @              
  965 @                 
  966 @                   
  967 @             
  968 @ 
  969 @ 
  970 @               
  971 @                       
  972 @ 
  973 @ 
  974 @ 
  975 @               
  976 @                       
  977 @ 
  978 @         
  979 @           
  980 @         
  981 @           
  982 @     
  983 @        
  984 @         
  985 @           
  986 @                       
  987 @     
  988 @  {
  826 @ IFMACRO(!def)
  827 &     NewMacro def(i)i EndMacro
ENDIFMACRO
  827 @     NewMacro def(i)i EndMacro )  
  828 @ 
  828 @ IFMACRO(!init)
  829 &     NewMacro init(i)i EndMacro
ENDIFMACRO
  829 @     NewMacro init(i)i EndMacro )  
  830 @ 
  830 @     ThTab.resize( 1);
  831 @      ThBorderTab.resize( 1);
  832 @      prolongation.resize( 1 - 1);
  833 @     real timerPartition = mpiWtime();
  834 @     if(mpiSize( ThComm mpiCommWorld ) > 1 && ! excluded) {
  835 @         meshNmesh3 ThGlobal = ThTab[ 1 - 1];
  836 @         fespace PhGlobalPrivate(ThGlobal, P0);
  837 @         fespace VhGlobalPrivate(ThGlobal, P1);
  838 @         PhGlobalPrivate partGlobal;
  839 @ IFMACRO(!privateReconstructDmesh)
  840 & IFMACRO(privateDmeshCartesianPartitioning)
  841 &         {
  842 &             real[int] bb(2 * dimension);
  843 &             boundingbox(ThGlobal, bb);
  844 &             PhGlobalPrivate xx = x / (bb[1] - bb[0]), yy = y / (bb[3] - bb[2])
  845 & IFMACRO(dimension,2)
  846 &                                                                               ;
  847 &             int i = int(sqrt(mpiSize( ThComm)));
  848 &             while(mpiSize( ThComm) % i != 0)
  849 &                 --i;
  850 &             int j = mpiSize( ThComm) / i;
  851 &             partGlobal = int(j * xx) + int(i * yy) * j;
  852 & ENDIFMACRO
IFMACRO(dimension,3)
  853 &                                                                               , zz = z / (bb[5] - bb[4]);
  854 &             i = int(mpiSize( ThComm)^(0.333333333333333));
  855 &             while(mpiSize( ThComm) % i != 0)
  856 &                 --i;
  857 &             real p = mpiSize( ThComm) / i;
  858 &             j = int(sqrt(p));
  859 &             while(p % j != 0)
  860 &                 --j;
  861 &             real k = int(p / j);
  862 &             partGlobal = int(i * zz) * k * j + int(j * yy) * k + int(k * xx);
  863 & ENDIFMACRO
        }
  864 & ENDIFMACRO
IFMACRO(!privateDmeshCartesianPartitioning)
  865 &         if( emptyRealArray.n != PhGlobalPrivate.ndof ||  emptyArray.n > 0) {
  866 &             timerPartition = mpiWtime();
  867 &             meshN ThGlobalPeriodic;
  868 &             if( emptyArray.n > 0) {
  869 &                 VhGlobalPrivate marker;
  870 &                 for(int i = 0; i <  emptyArray.n; ++i) {
  871 &                     varf vMarker(uPrivate, vPrivate) = on( emptyArray[i], uPrivate = 1.0);
  872 &                     marker[] += vMarker(0, VhGlobalPrivate, tgv = -1);
  873 &                 }
  874 &                 PhGlobalPrivate partPeriodic = marker > 0.1;
  875 &                 while(1) {
  876 &                     AddLayers(ThGlobal, partPeriodic[], 1 +  overlap, marker[]);
  877 &                     partPeriodic = marker > 0.001;
  878 &                     ThGlobalPeriodic = trunc(ThGlobal, partPeriodic < 0.999);
  879 &                     if(ThGlobal.nt / real(ThGlobalPeriodic.nt) > mpisize / real(mpisize - 1))
  880 &                         break;
  881 &                 }
  882 &             }
  883 &             if(mpiRank( ThComm) == 0) {
  884 &                 if(verbosity > 0)
  885 &                     cout.scientific << " --- global mesh of " << ThGlobal.nt << " elements (prior to refinement) partitioned with " << Stringification(partitioner);
  886 &                 if( emptyArray.n > 0) {
  887 &                     fespace PhPeriodicPrivate(ThGlobalPeriodic, P0);
  888 &                     PhPeriodicPrivate partPeriodic;
  889 &                     if(mpiSize( ThComm) > 2) {
  890 &                         partitionerSeq(partPeriodic[], ThGlobalPeriodic, mpiSize( ThComm) - 1);
  891 &                         partPeriodic[] += 1.0;
  892 &                     }
  893 &                     else
                        partPeriodic[] = 1.0;
  894 &                     partGlobal = partPeriodic;
  895 &                 }
  896 &                 else {
  897 &                     partitionerSeq(partGlobal[], ThGlobal, mpiSize( ThComm));
  898 &                 }
  899 &             }
  900 &             if( emptyArray.n > 0 && Stringification(partitioner) != "metis" && Stringification(partitioner) != "scotch") {
  901 &                 fespace PhPeriodicPrivate(ThGlobalPeriodic, P0);
  902 &                 PhPeriodicPrivate partPeriodic;
  903 &                 if(mpiSize( ThComm) > 2) {
  904 &                     partitionerPar(partPeriodic[], ThGlobalPeriodic,  ThComm, mpiSize( ThComm) - 1);
  905 &                     partPeriodic[] += 1.0;
  906 &                 }
  907 &                 else
                    partPeriodic[] = 1.0;
  908 &                 partGlobal = partPeriodic;
  909 &             }
  910 &             else
                partitionerPar(partGlobal[], ThGlobal,  ThComm, mpiSize( ThComm));
  911 &             if(mpiRank( ThComm) == 0 && verbosity > 0)
  912 &                 cout.scientific << " (in " << mpiWtime() - timerPartition << ")" << endl;
  913 &             timerPartition = mpiWtime();
  914 &         }
  915 &         else {
  916 &             partGlobal[] =  emptyRealArray;
  917 &         }
  918 & ENDIFMACRO
ENDIFMACRO
  840 @ IFMACRO(privateDmeshCartesianPartitioning)
  841 &         {
  842 &             real[int] bb(2 * dimension);
  843 &             boundingbox(ThGlobal, bb);
  844 &             PhGlobalPrivate xx = x / (bb[1] - bb[0]), yy = y / (bb[3] - bb[2])
  845 & IFMACRO(dimension,2)
  846 &                                                                               ;
  847 &             int i = int(sqrt(mpiSize( ThComm)));
  848 &             while(mpiSize( ThComm) % i != 0)
  849 &                 --i;
  850 &             int j = mpiSize( ThComm) / i;
  851 &             partGlobal = int(j * xx) + int(i * yy) * j;
  852 & ENDIFMACRO
IFMACRO(dimension,3)
  853 &                                                                               , zz = z / (bb[5] - bb[4]);
  854 &             i = int(mpiSize( ThComm)^(0.333333333333333));
  855 &             while(mpiSize( ThComm) % i != 0)
  856 &                 --i;
  857 &             real p = mpiSize( ThComm) / i;
  858 &             j = int(sqrt(p));
  859 &             while(p % j != 0)
  860 &                 --j;
  861 &             real k = int(p / j);
  862 &             partGlobal = int(i * zz) * k * j + int(j * yy) * k + int(k * xx);
  863 & ENDIFMACRO
        }
  864 & ENDIFMACRO
  865 @ IFMACRO(!privateDmeshCartesianPartitioning)
  866 &         if( emptyRealArray.n != PhGlobalPrivate.ndof ||  emptyArray.n > 0) {
  867 &             timerPartition = mpiWtime();
  868 &             meshN ThGlobalPeriodic;
  869 &             if( emptyArray.n > 0) {
  870 &                 VhGlobalPrivate marker;
  871 &                 for(int i = 0; i <  emptyArray.n; ++i) {
  872 &                     varf vMarker(uPrivate, vPrivate) = on( emptyArray[i], uPrivate = 1.0);
  873 &                     marker[] += vMarker(0, VhGlobalPrivate, tgv = -1);
  874 &                 }
  875 &                 PhGlobalPrivate partPeriodic = marker > 0.1;
  876 &                 while(1) {
  877 &                     AddLayers(ThGlobal, partPeriodic[], 1 +  overlap, marker[]);
  878 &                     partPeriodic = marker > 0.001;
  879 &                     ThGlobalPeriodic = trunc(ThGlobal, partPeriodic < 0.999);
  880 &                     if(ThGlobal.nt / real(ThGlobalPeriodic.nt) > mpisize / real(mpisize - 1))
  881 &                         break;
  882 &                 }
  883 &             }
  884 &             if(mpiRank( ThComm) == 0) {
  885 &                 if(verbosity > 0)
  886 &                     cout.scientific << " --- global mesh of " << ThGlobal.nt << " elements (prior to refinement) partitioned with " << Stringification(partitioner);
  887 &                 if( emptyArray.n > 0) {
  888 &                     fespace PhPeriodicPrivate(ThGlobalPeriodic, P0);
  889 &                     PhPeriodicPrivate partPeriodic;
  890 &                     if(mpiSize( ThComm) > 2) {
  891 &                         partitionerSeq(partPeriodic[], ThGlobalPeriodic, mpiSize( ThComm) - 1);
  892 &                         partPeriodic[] += 1.0;
  893 &                     }
  894 &                     else
                        partPeriodic[] = 1.0;
  895 &                     partGlobal = partPeriodic;
  896 &                 }
  897 &                 else {
  898 &                     partitionerSeq(partGlobal[], ThGlobal, mpiSize( ThComm));
  899 &                 }
  900 &             }
  901 &             if( emptyArray.n > 0 && Stringification(partitioner) != "metis" && Stringification(partitioner) != "scotch") {
  902 &                 fespace PhPeriodicPrivate(ThGlobalPeriodic, P0);
  903 &                 PhPeriodicPrivate partPeriodic;
  904 &                 if(mpiSize( ThComm) > 2) {
  905 &                     partitionerPar(partPeriodic[], ThGlobalPeriodic,  ThComm, mpiSize( ThComm) - 1);
  906 &                     partPeriodic[] += 1.0;
  907 &                 }
  908 &                 else
                    partPeriodic[] = 1.0;
  909 &                 partGlobal = partPeriodic;
  910 &             }
  911 &             else
                partitionerPar(partGlobal[], ThGlobal,  ThComm, mpiSize( ThComm));
  912 &             if(mpiRank( ThComm) == 0 && verbosity > 0)
  913 &                 cout.scientific << " (in " << mpiWtime() - timerPartition << ")" << endl;
  914 &             timerPartition = mpiWtime();
  915 &         }
  916 &         else {
  917 &             partGlobal[] =  emptyRealArray;
  918 &         }
  919 & ENDIFMACRO
  866 @         if( emptyRealArray.n != PhGlobalPrivate.ndof ||  emptyArray.n > 0) {
  867 @             timerPartition = mpiWtime();
  868 @             meshNmesh3 ThGlobalPeriodic;
  869 @             if( emptyArray.n > 0) {
  870 @                 VhGlobalPrivate marker;
  871 @                 for(int i = 0; i <  emptyArray.n; ++i) {
  872 @                     varf vMarker(uPrivate, vPrivate) = on( emptyArray[i], uPrivate = 1.0);
  873 @                     marker[] += vMarker(0, VhGlobalPrivate, tgv = -1);
  874 @                 }
  875 @                 PhGlobalPrivate partPeriodic = marker > 0.1;
  876 @                 while(1) {
  877 @                     AddLayers(ThGlobal, partPeriodic[], 1 +  overlap, marker[]);
  878 @                     partPeriodic = marker > 0.001;
  879 @                     ThGlobalPeriodic = trunc(ThGlobal, partPeriodic < 0.999);
  880 @                     if(ThGlobal.nt / real(ThGlobalPeriodic.nt) > mpisize / real(mpisize - 1))
  881 @                         break;
  882 @                 }
  883 @             }
  884 @             if(mpiRank( ThComm mpiCommWorld ) == 0) {
  885 @                 if(verbosity > 0)
  886 @                     cout.scientific << " --- global mesh of " << ThGlobal.nt << " elements (prior to refinement) partitioned with 
  ... : " << Stringification((partitionerparmetisparmetis));
  887 @                 if( emptyArray.n > 0) {
  888 @                     fespace PhPeriodicPrivate(ThGlobalPeriodic, P0);
  889 @                     PhPeriodicPrivate partPeriodic;
  890 @                     if(mpiSize( ThComm mpiCommWorld ) > 2) {
  891 @                         partitionerSeq(partPeriodic[], ThGlobalPeriodic, mpiSize( ThComm) - 1);
  892 @                         partPeriodic[] += 1.0;
  893 @                     }
  894 @                     else
  895 @                         partPeriodic[] = 1.0;
  896 @                     partGlobal = partPeriodic;
  897 @                 }
  898 @                 else {
  899 @                     partitionerSeq(partGlobal[], ThGlobal, mpiSize( ThComm));
  900 @                 }
  901 @             }
  902 @             if( emptyArray.n > 0 && Stringification((partitionerparmetisparmetis)) != "metis" && Stringification((partitionerparmetisparmetis)) != "scotch") {
  903 @                 fespace PhPeriodicPrivate(ThGlobalPeriodic, P0);
  904 @                 PhPeriodicPrivate partPeriodic;
  905 @                 if(mpiSize( ThComm mpiCommWorld ) > 2) {
  906 @                     partitionerPar(partPeriodic[], ThGlobalPeriodic,  ThComm, mpiSize( ThComm) - 1)         parmetis(partPeriodic[],  ThGlobalPeriodic,  mpiSize( ThComm mpiCommWorld ) - 1, communicator =  ThComm mpiCommWorld , worker = getARGV("-parmetis_worker", 1));
  907 @                     partPeriodic[] += 1.0;
  908 @                 }
  909 @                 else
  910 @                     partPeriodic[] = 1.0;
  911 @                 partGlobal = partPeriodic;
  912 @             }
  913 @             else
  914 @                 partitionerPar(partGlobal[], ThGlobal,  ThComm, mpiSize( ThComm))         parmetis(partGlobal[],  ThGlobal,  mpiSize( ThComm mpiCommWorld ), communicator =  ThComm mpiCommWorld , worker = getARGV("-parmetis_worker", 1));
  915 @             if(mpiRank( ThComm mpiCommWorld ) == 0 && verbosity > 0)
  916 @                 cout.scientific << " (in " << mpiWtime() - timerPartition << ")" << endl;
  917 @             timerPartition = mpiWtime();
  918 @         }
  919 @         else {
  920 @             partGlobal[] =  emptyRealArray;
  921 @         }
  922 @ 
  920 @ 
  919 @ IFMACRO(privateReconstructDmesh)
  920 &         partGlobal[] =  emptyRealArray;
  921 & ENDIFMACRO
  922 @ IFMACRO(!trueRestrict)
  923 &         bool trueRestrict = usedARGV("-true_restrict") != -1;
  924 & ENDIFMACRO
  923 @         bool trueRestrict = usedARGV("-true_restrict") != -1;
  924 @ 
  925 @ IFMACRO(!removeZeros)
  926 &         bool removeZeros = trueRestrict &&  overlap == 1 && usedARGV("-remove_zeros") != -1;
  927 & ENDIFMACRO
  926 @         bool removeZeros = trueRestrict &&  overlap == 1 && usedARGV("-remove_zeros") != -1;
  927 @ 
  928 @         if(verbosity > 0) {
  929 @             mpiBarrier( ThComm mpiCommWorld );
  930 @             timerPartition = mpiWtime();
  931 @         }
  932 @ IFMACRO(privateBuildDmesh)
  933 &         NewMacro defP1(i)i EndMacro
        NewMacro initP1(i)i EndMacro
        partitionPrivate(ThTab,  ThBorderTab, ThGlobal, PhGlobalPrivate, VhGlobalPrivate, partGlobal, mpiRank( ThComm), mpiSize( ThComm),  privateS,  overlap,  1,  prolongation,  DTab,  P1,  intersection,  ThComm,  fakeInterface,  P1, defP1, initP1,  1)
  934 & ENDIFMACRO
  933 @         NewMacro defP1(i)i EndMacro )  
  934 @         NewMacro initP1(i)i EndMacro )  
  935 @         partitionPrivate(ThTab,  ThBorderTab, ThGlobal, PhGlobalPrivate, VhGlobalPrivate, partGlobal, mpiRank( ThComm), mpiSize( ThComm),  privateS,  overlap,  1,  prolongation,  DTab,  P1,  intersection,  ThComm,  fakeInterface,  P1, defP1, initP1,  1) 
   86 @        
   87 @       
   88 @       
   89 @ 
   90 @ 
   91 @     
   92 @     
   93 @      
   94 @      
   95 @     
   96 @            
   97 @                   
   98 @              
   99 @          
  100 @          
  101 @            
  102 @                    
  103 @         
  104 @             
  105 @         
  106 @                         
  107 @          
  108 @               
  109 @             
  110 @                
  111 @                     
  112 @                   
  113 @               
  114 @                  
  115 @         
  116 @     
  117 @       
  118 @ 
  119 @                
  120 @ 
  121 @        
  122 @      
  123 @        
  124 @        
  125 @                
  126 @                
  127 @                
  128 @                  
  129 @     
  130 @     
  131 @           
  132 @       
  133 @ 
  134 @                  
  135 @ 
  136 @        
  137 @        
  138 @                        
  139 @ 
  140 @                                                                                                     
  141 @ 
  142 @                                                                                                                          
  143 @         
  144 @         
  145 @ 
  146 @ 
  147 @ 
  148 @                  
  149 @ 
  150 @        
  151 @        
  152 @                        
  153 @ 
  154 @                                                                                                     
  155 @ 
  156 @                                                                                                                             
  157 @         
  158 @         
  159 @ 
  160 @ 
  161 @     
  162 @            
  163 @            
  164 @         
  165 @           
  166 @         
  167 @           
  168 @     
  169 @ 
  170 @ 
  171 @        
  172 @           
  173 @            
  174 @                
  175 @                       
  176 @                       
  177 @                           
  178 @                     
  179 @                   
  180 @                      
  181 @             
  182 @         
  183 @         
  184 @                      
  185 @                     
  186 @     
  187 @              
  188 @            
  189 @               
  190 @                                     
  191 @               
  192 @                           
  193 @                                    
  194 @                          
  195 @                       
  196 @                        
  197 @                       
  198 @                        
  199 @                          
  200 @                 
  201 @             
  202 @                          
  203 @                         
  204 @         
  205 @     
  206 @         
  207 @ 
  208 @   
  209 @        
  210 @     
  211 @ 
  212 @ 
  213 @       
  214 @     
  215 @ 
  216 @             
  217 @      
  218 @       
  219 @      
  220 @            
  221 @          
  222 @           
  223 @           
  224 @           
  225 @     
  226 @     
  227 @           
  228 @     
  229 @        
  230 @     
  231 @              
  232 @         
  233 @         
  234 @                 
  235 @                    
  236 @                
  237 @                 
  238 @                          
  239 @                       
  240 @                         
  241 @                     
  242 @                             
  243 @                       
  244 @                 
  245 @             
  246 @         
  247 @     
  248 @        
  249 @         
  250 @           
  251 @     
  252 @         
  253 @ 
  254 @ 
  255 @       
  256 @          
  257 @         
  258 @     
  259 @       
  260 @         
  261 @ 
  262 @ 
  263 @ 
  264 @     
  265 @             
  266 @           
  267 @         
  268 @             
  269 @     
  270 @ 
  271 @ 
  272 @ 
  273 @ 
  274 @ 
  275 @     
  276 @           
  277 @ 
  278 @      
  279 @ 
  280 @      
  281 @           
  282 @         
  283 @ 
  284 @                   
  285 @                 
  286 @              
  287 @              
  288 @                 
  289 @                        
  290 @ 
  291 @                
  292 @              
  293 @                              
  294 @ 
  295 @                                                                                                              
  296 @ 
  297 @                                                                                                                                      
  298 @ 
  299 @ 
  300 @                        
  301 @                 
  302 @                   
  303 @             
  304 @             
  305 @ 
  306 @             
  307 @ 
  308 @                   
  309 @                   
  310 @ 
  311 @ 
  312 @                   
  313 @                   
  314 @ 
  315 @                           
  316 @             
  317 @         
  318 @     
  319 @ 
  320 @             
  321 @                
  322 @                     
  323 @                         
  324 @                           
  325 @             
  326 @               
  327 @           
  328 @           
  329 @            
  330 @                
  331 @                  
  332 @          
  333 @            
  334 @             
  335 @            
  336 @                 
  337 @                   
  338 @              
  339 @                
  340 @                 
  341 @               
  342 @         
  343 @           
  344 @           
  345 @          
  346 @           
  347 @         
  348 @           
  349 @     
  350 @     
  351 @           
  352 @      
  353 @               
  354 @            
  355 @                 
  356 @                
  357 @                     
  358 @                             
  359 @                           
  360 @                 
  361 @             
  362 @         
  363 @     
  364 @            
  365 @           
  366 @          
  367 @            
  368 @          
  369 @         
  370 @               
  371 @              
  372 @              
  373 @                     
  374 @                   
  375 @                    
  376 @                   
  377 @                      
  378 @             
  379 @              
  380 @              
  381 @ 
  382 @                        
  383 @ 
  384 @ 
  385 @             
  386 @                  
  387 @                            
  388 @                 
  389 @                   
  390 @                 
  391 @                   
  392 @             
  393 @ 
  394 @               
  395 @               
  396 @                       
  397 @                    
  398 @                    
  399 @                       
  400 @                              
  401 @                        
  402 @                           
  403 @                           
  404 @                          
  405 @                           
  406 @                                    
  407 @                     
  408 @                      
  409 @                           
  410 @                             
  411 @                     
  412 @                 
  413 @             
  414 @         
  415 @         
  416 @          
  417 @          
  418 @            
  419 @                 
  420 @                
  421 @                
  422 @                    
  423 @                     
  424 @                       
  425 @                 
  426 @             
  427 @              
  428 @                 
  429 @                    
  430 @                   
  431 @                      
  432 @                 
  433 @                   
  434 @                      
  435 @             
  436 @         
  437 @         
  438 @             
  439 @           
  440 @                 
  441 @                
  442 @                
  443 @                    
  444 @                     
  445 @                       
  446 @                 
  447 @             
  448 @              
  449 @ 
  450 @                   
  451 @                   
  452 @ 
  453 @ 
  454 @                   
  455 @                   
  456 @ 
  457 @                         
  458 @                   
  459 @                      
  460 @                     
  461 @                       
  462 @                       
  463 @                     
  464 @             
  465 @         
  466 @           
  467 @         
  468 @           
  469 @         
  470 @               
  471 @                
  472 @                  
  473 @                
  474 @                             
  475 @         
  476 @     
  477 @ 
  478 @ 
  479 @       
  480 @                   
  481 @                  
  482 @                 
  483 @                      
  484 @                          
  485 @                                   
  486 @         
  487 @ 
  488 @ 
  489 @ 
  490 @         
  491 @ 
  492 @      
  493 @ 
  494 @ 
  495 @ 
  496 @      
  497 @       
  498 @ 
  499 @         
  500 @      
  501 @       
  502 @                  
  503 @            
  504 @ 
  505 @             
  506 @          
  507 @           
  508 @               
  509 @ 
  510 @ 
  511 @               
  512 @ 
  513 @     
  514 @                  
  515 @           
  516 @     
  517 @           
  518 @         
  519 @ 
  520 @       
  521 @ 
  522 @ 
  523 @ 
  524 @ 
  525 @         
  526 @      
  527 @       
  528 @     
  529 @       
  530 @ 
  531 @ 
  532 @ 
  533 @       
  534 @  {
   86 @     int backupSM = searchMethod;
   87 @     searchMethod = 1;
   88 @     assert( 1 >= 1);
   89 @ IFMACRO(!privateCreatePartition)
   90 & IFMACRO(!privateCreateMat)
   91 &      intersection.resize(1);
   92 &      intersection[0].resize(0);
   93 &      PhGlobalPrivate supp;
   94 &      VhGlobalPrivate suppSmooth;
   95 &     {
   96 &         int constant =  mpiRank( ThComm);
   97 &         for[i, value : supp[]] value = abs( partGlobal[][i] - constant) < 0.1;
   98 &         AddLayers( ThGlobal, supp[], 2 *  overlap, suppSmooth[]);
   99 &         int[int] n2o;
  100 &         meshN neighbors;
  101 &         bool connected = false;
  102 &         for[i, value : suppSmooth[]] if(abs(value - 0.5) < 0.5) connected = true;
  103 &         if(!connected)
  104 &             n2o.resize(0);
  105 &         else
            neighbors = trunc( ThGlobal, suppSmooth > 0.001 && suppSmooth < 0.999, new2old = n2o);
  106 &         int[int] partOverlap(n2o.n);
  107 &         for[i, value : n2o] partOverlap[i] =  partGlobal[][value];
  108 &         Unique(partOverlap,  intersection[0], remove = constant);
  109 &         if( privateS > 1 &&  1 <= 1) {
  110 &              ThGlobal = trunc( ThGlobal, suppSmooth > 0.001, split =  privateS);
  111 &             supp = abs( partGlobal - constant) < 0.1;
  112 &             suppSmooth = 0;
  113 &             AddLayers( ThGlobal, supp[], 2 *  overlap, suppSmooth[]);
  114 &         }
  115 &     }
  116 &     int[int] n2oGlobalPrivate, n2oNeighbor;
  117 & IFMACRO(!privateDmeshCartesianPartitioning)
  118 &      ThGlobal = trunc( ThGlobal, suppSmooth > 0.001, label = 9999, new2old = n2oGlobalPrivate);
  119 & ENDIFMACRO
    real eps =  ThGlobal.measure;
  120 &     real[int] epsTab( intersection[0].n);
  121 &     mpiRequest[int] rq(2 *  intersection[0].n);
  122 &     if(mpiSize( ThComm) ==  mpiSize( ThComm)) {
  123 &         for(int j = 0; j <  intersection[0].n; ++j)
  124 &             Irecv(processor( intersection[0][j],  ThComm, rq[j]), epsTab[j]);
  125 &         for(int j = 0; j <  intersection[0].n; ++j)
  126 &             Isend(processor( intersection[0][j],  ThComm, rq[ intersection[0].n + j]), eps);
  127 &     }
  128 &     else
        epsTab = 1.0e+30;
  129 &     suppSmooth = suppSmooth;
  130 & IFMACRO(!privateDmeshN2O)
  131 &     ThTab[ 1 - 1] = trunc( ThGlobal, suppSmooth > 0.501, label =  fakeInterface, new2old = n2oNeighbor);
  132 & IFMACRO(privateDmeshCartesianPartitioning)
  133 &     real[int] bb(2 * dimension);
  134 &     boundingbox(ThTab[ 1 - 1], bb);
  135 &     ThTab[ 1 - 1] = trunc( ThGlobal, x > bb[0] && x < bb[1] && y > bb[2] && y < bb[3]
  136 & IFMACRO(dimension,3)
  137 &                                                                                              && z > bb[4] && z < bb[5]
  138 & ENDIFMACRO
                                                                                                                      , label =  fakeInterface);
  139 &      ThGlobal = ThTab[ 1 - 1];
  140 &     n2oNeighbor = 0: ThGlobal.nt - 1;
  141 & ENDIFMACRO
ENDIFMACRO
IFMACRO(privateDmeshN2O)
  142 &     ThTab[ 1 - 1] = trunc( ThGlobal, suppSmooth > 0.501, label =  fakeInterface, new2old = privateDmeshN2O);
  143 & IFMACRO(privateDmeshCartesianPartitioning)
  144 &     real[int] bb(2 * dimension);
  145 &     boundingbox(ThTab[ 1 - 1], bb);
  146 &     ThTab[ 1 - 1] = trunc( ThGlobal, x > bb[0] && x < bb[1] && y > bb[2] && y < bb[3]
  147 & IFMACRO(dimension,3)
  148 &                                                                                              && z > bb[4] && z < bb[5]
  149 & ENDIFMACRO
                                                                                                                      , label =  fakeInterface, new2old = privateDmeshN2O);
  150 &      ThGlobal = ThTab[ 1 - 1];
  151 &     n2oNeighbor = 0: ThGlobal.nt - 1;
  152 & ENDIFMACRO
IFMACRO(!privateDmeshCartesianPartitioning)
  153 &     {
  154 &         int[int] backup = privateDmeshN2O;
  155 &         int[int] new = n2oGlobalPrivate(privateDmeshN2O);
  156 &         privateDmeshN2O.resize(new.n);
  157 &         privateDmeshN2O = new;
  158 &         n2oNeighbor.resize(backup.n);
  159 &         n2oNeighbor = backup;
  160 &     }
  161 & ENDIFMACRO
ENDIFMACRO
    if( 1 > 1) {
  162 &          prolongation.resize( 1 - 1);
  163 &         if( privateS > 1) {
  164 &             meshN globalNameRefined =  ThGlobal;
  165 &             for(int i =  1 - 1; i > 0; --i) {
  166 &                 globalNameRefined = trunc(globalNameRefined, 1, split =  privateS);
  167 &                 ThTab[i - 1] = trunc(globalNameRefined, suppSmooth > 0.501, label =  fakeInterface);
  168 &                 fespace WhLocalRefinedPrivate(ThTab[i - 1],  P1);
  169 &                 fespace WhLocalCoarsePrivate(ThTab[i],  P1);
  170 &                  prolongation[i - 1] = interpolate(WhLocalRefinedPrivate, WhLocalCoarsePrivate);
  171 &             }
  172 &         }
  173 &         else
            for(int i =  1 - 1; i > 0; --i)
  174 &                 ThTab[i - 1] = ThTab[i];
  175 &     }
  176 &     if(!removeZeros && ( fakeInterface != -111111 ||  overlap != 1)) {
  177 &         if(suppSmooth[].min < 0.501) {
  178 &             supp = supp;
  179 &              ThBorderTab[ 1 - 1] = trunc( ThGlobal, (suppSmooth > ( overlap - 0.999) / real(2 *  overlap)) && (suppSmooth < 0.501), label = (abs( fakeInterface) + 1) * 100);
  180 &             if( privateS > 1)
  181 &                 for(int i =  1 - 2; i >= 0; --i) {
  182 &                      ThBorderTab[i] = trunc( ThBorderTab[i + 1], 1, split =  privateS, label = (abs( fakeInterface) + 1) * 100);
  183 &                     meshN tempRefined = ThTab[i] +  ThBorderTab[i];
  184 &                     fespace PhRefinedPrivate(tempRefined, P0);
  185 &                     PhRefinedPrivate suppRefined = supp;
  186 &                     fespace VhBorderRefinedPrivate( ThBorderTab[i], P1);
  187 &                     VhBorderRefinedPrivate suppBorder = suppRefined;
  188 &                      ThBorderTab[i] = trunc( ThBorderTab[i], suppBorder > 0.01);
  189 &                 }
  190 &             else
                for(int i =  1 - 2; i >= 0; --i)
  191 &                      ThBorderTab[i] =  ThBorderTab[i + 1];
  192 &         }
  193 &     }
  194 &     fespace VhLocalPrivate(ThTab[ 1 - 1], P1);
  195 & IFMACRO(!privateDmeshThTab)
  196 & NewMacro privateDmeshThintersectionDef()partitionIntersectionTab EndMacro
    real[int][int] partitionIntersectionTab(1 +  intersection[0].n);
  197 &     privateDmeshThintersectionDef[0].resize( intersection[0].n);
  198 & ENDIFMACRO
IFMACRO(privateBuildDmesh)
  199 &     privateDmeshThintersectionDef.resize(1 +  intersection[0].n);
  200 &     privateDmeshThintersectionDef[0].resize( intersection[0].n);
  201 & ENDIFMACRO
    VhLocalPrivate khi = max(2 * suppSmooth - 1.0, 0.0);
  202 &     VhLocalPrivate sum;
  203 &     sum[] = khi[];
  204 &      VhGlobalPrivate phi;
  205 &     if(n2oGlobalPrivate.n ==  ThGlobal.nt &&  privateS == 1) {
  206 &         real[int] restrictionPart(n2oGlobalPrivate.n);
  207 &         restrictionPart =  partGlobal[](n2oGlobalPrivate);
  208 &          partGlobal = 0.0;
  209 &          partGlobal[] = restrictionPart;
  210 &     }
  211 &     else
         partGlobal =  partGlobal;
  212 &     n2oGlobalPrivate.resize(0);
  213 &     int numberIntersection = 0;
  214 &     {
  215 &         int[int] restriction = restrict(VhLocalPrivate,  VhGlobalPrivate, n2oNeighbor);
  216 &         n2oNeighbor.resize(0);
  217 &         mpiWaitAll(rq);
  218 &         for(int i = 0; i <  intersection[0].n; ++i) {
  219 &              PhGlobalPrivate suppPartition = abs( partGlobal -  intersection[0][i]) < 0.1;
  220 &             AddLayers( ThGlobal, suppPartition[],  overlap, phi[]);
  221 &             if(min(eps, epsTab[i]) > 0.0) {
  222 &                 if(intN( ThGlobal, qforder = 2)(phi) / min(eps, epsTab[i]) > 1.0e-10) {
  223 &                     privateDmeshThintersectionDef[1 + numberIntersection].resize(restriction.n);
  224 &                     privateDmeshThintersectionDef[1 + numberIntersection] = phi[](restriction);
  225 &                     if(!trueRestrict)
  226 &                         sum[] += privateDmeshThintersectionDef[1 + numberIntersection];
  227 &                      intersection[0][numberIntersection++] =  intersection[0][i];
  228 &                 }
  229 &             }
  230 &         }
  231 &     }
  232 &     if(numberIntersection !=  intersection[0].n) {
  233 &          intersection[0].resize(numberIntersection);
  234 &         privateDmeshThintersectionDef.resize(1 + numberIntersection);
  235 &     }
  236 &      intersection.resize(1 +  1 * numberIntersection);
  237 & ENDIFMACRO
IFMACRO(privateCreateMat)
  238 &     assert( 1 == 1);
  239 &     int numberIntersection = privateDmeshThintersectionDef.n - 1;
  240 &      intersection.resize(1 +  1 * numberIntersection);
  241 &      intersection[0].resize(numberIntersection);
  242 &      intersection[0] = lround(privateDmeshThintersectionDef[0]);
  243 &     fespace VhLocalPrivate(ThTab[ 1 - 1], P1);
  244 & IFMACRO(privateDmeshN2O)
  245 & IFMACRO(privateDmeshOriginal)
  246 & IFMACRO(privateDmeshRestriction)
  247 &     {
  248 &         fespace WhLocalPrivate(ThTab[ 1 - 1],  P1);
  249 &         fespace WhOriginalPrivate(privateDmeshOriginal,  P1);
  250 &         privateDmeshRestriction.resize(WhOriginalPrivate.ndof);
  251 &         privateDmeshRestriction = restrict(WhLocalPrivate, WhOriginalPrivate, privateDmeshN2O);
  252 &     }
  253 & ENDIFMACRO
ENDIFMACRO
ENDIFMACRO
ENDIFMACRO
IFMACRO(privateBuildDmesh)
  254 &     privateDmeshThintersectionDef[0].resize(numberIntersection);
  255 &     for[i, value :  intersection[0]] privateDmeshThintersectionDef[0][i] = value;
  256 & ENDIFMACRO
    meshN[int] meshIntersection(numberIntersection);
  257 & IFMACRO(!privateCreateMat)
  258 &     int[int][int] n2oIntersection(0);
  259 &     if(trueRestrict && mpiSize( ThComm) ==  mpiSize( ThComm) && removeZeros)
  260 &         n2oIntersection.resize(numberIntersection);
  261 & ENDIFMACRO
    for(int j = 0; j < ( privateS == 1 ? 1 :  1); ++j) {
  262 &         for(int i = 0; i < numberIntersection; ++i) {
  263 &             int[int] n2o;
  264 &             VhLocalPrivate partitionIntersection;
  265 &             partitionIntersection[] = privateDmeshThintersectionDef[1 + i];
  266 &             meshIntersection[i] = trunc(ThTab[j], partitionIntersection > 1.0e-6, new2old = n2o, label = 9999);
  267 & IFMACRO(privateDmeshCartesianPartitioning)
  268 &             real[int] bb(2 * dimension);
  269 &             boundingbox(meshIntersection[i], bb);
  270 &             meshIntersection[i] = trunc(ThTab[j], x > bb[0] && x < bb[1] && y > bb[2] && y < bb[3]
  271 & IFMACRO(dimension,3)
  272 &                                                                                                       && z > bb[4] && z < bb[5]
  273 & ENDIFMACRO
                                                                                                                               , new2old = n2o, label = 9999);
  274 & ENDIFMACRO
IFMACRO(!privateCreateMat)
  275 &             if(j == 0 && trueRestrict && mpiSize( ThComm) ==  mpiSize( ThComm) && removeZeros) {
  276 &                 n2oIntersection[i].resize(n2o.n);
  277 &                 n2oIntersection[i] = n2o;
  278 &             }
  279 &             if(!removeZeros)
  280 & ENDIFMACRO
            {
  281 & IFMACRO(vectorialfe)
  282 &                 fespace singleComponentWhPrivate(ThTab[j], vectorialfe);
  283 &                 fespace WhIntersectionPrivate(meshIntersection[i], vectorialfe);
  284 & ENDIFMACRO
IFMACRO(!vectorialfe)
  285 &                 fespace singleComponentWhPrivate(ThTab[j],  P1);
  286 &                 fespace WhIntersectionPrivate(meshIntersection[i],  P1);
  287 & ENDIFMACRO
                 intersection[1 + i + j * numberIntersection] = restrict(WhIntersectionPrivate, singleComponentWhPrivate, n2o);
  288 &             }
  289 &         }
  290 &     }
  291 & IFMACRO(!privateCreateMat)
  292 &     if( privateS == 1 &&  1 > 1 && !removeZeros)
  293 &         for(int j = 1; j <  1; ++j)
  294 &             for(int i = 0; i < numberIntersection; ++i) {
  295 &                  intersection[1 + i + j * numberIntersection].resize( intersection[1 + i].n);
  296 &                  intersection[1 + i + j * numberIntersection] =  intersection[1 + i];
  297 &             }
  298 &     for(int i = 0; i <  1 - 1; ++i) {
  299 &         fespace VhRefinedPrivate(ThTab[i], P1);
  300 &         fespace PhRefinedPrivate(ThTab[i], P0);
  301 &         PhRefinedPrivate partRefined =  partGlobal;
  302 &         PhRefinedPrivate supp = abs(partRefined -  mpiRank( ThComm)) < 0.1;
  303 &         varf vSupp(uPrivate, vPrivate) = intN(ThTab[i], qforder = 1)(supp * vPrivate);
  304 &         VhRefinedPrivate khiL;
  305 &         khiL[] = vSupp(0, VhRefinedPrivate);
  306 &         khiL = khiL > 0.0;
  307 &         VhRefinedPrivate sum = khiL;
  308 &         for(int j = 0; j < numberIntersection; ++j) {
  309 &             supp = abs(partRefined -  intersection[0][j]) < 0.1;
  310 &             VhRefinedPrivate phiL;
  311 &             phiL[] = vSupp(0, VhRefinedPrivate);
  312 &             phiL = phiL > 0.0;
  313 &             sum[] += phiL[];
  314 &         }
  315 &         khiL[] ./= sum[];
  316 &         fespace WhRefinedPrivate(ThTab[i],  P1);
  317 &         WhRefinedPrivate  defP1(func2vec);
  318 &          defP1(func2vec) =  initP1(khiL);
  319 &          DTab[i].resize(WhRefinedPrivate.ndof);
  320 &          DTab[i] = func2vec[];
  321 &     }
  322 &     if(!trueRestrict)
  323 &         khi[] ./= sum[];
  324 &     else {
  325 &         khi = abs( partGlobal -  mpiRank( ThComm)) < 0.1;
  326 &         VhLocalPrivate sigma =  partGlobal;
  327 &         for(int i = 0; i < numberIntersection; ++i) {
  328 &             if( mpiRank( ThComm) <  intersection[0][i]) {
  329 &                 for[j, value : khi[]] {
  330 &                     if(value > 0.9 && abs(sigma[][j] -  intersection[0][i]) < 0.1)
  331 &                         value = 0.0;
  332 &                 }
  333 &             }
  334 &         }
  335 &     }
  336 &     if(trueRestrict && mpiSize( ThComm) ==  mpiSize( ThComm) && removeZeros) {
  337 &         assert( 1 == 1);
  338 &         meshN ThIntersection;
  339 &         mpiRequest[int] rq(2 * numberIntersection);
  340 &         int[int] skip(0);
  341 &         {
  342 &             fespace PhIntersectionPrivate(ThIntersection, P0);
  343 &             PhIntersectionPrivate[int] recv(numberIntersection);
  344 &             PhIntersectionPrivate[int] send(numberIntersection);
  345 &             for(int i = 0; i < numberIntersection; ++i) {
  346 &                 ThIntersection = meshIntersection[i];
  347 &                 Irecv(processor( intersection[0][i],  ThComm, rq[i]), recv[i][]);
  348 &                 send[i] = khi;
  349 &                 Isend(processor( intersection[0][i],  ThComm, rq[numberIntersection + i]), send[i][]);
  350 &             }
  351 &             real[int] tmpRemove(ThTab[0].nt);
  352 &             int[int] n2oRemove;
  353 & IFMACRO(!privateDmeshN2O)
  354 &             ThTab[0] = trunc(ThTab[0], khi > 1.0e-6, label = 9999, new2old = n2oRemove);
  355 & ENDIFMACRO
IFMACRO(privateDmeshN2O)
  356 &             {
  357 &                 int[int] n2oFilter;
  358 &                 ThTab[0] = trunc(ThTab[0], khi > 1.0e-6, label = 9999, new2old = n2oRemove);
  359 &                 n2oFilter.resize(n2oRemove.n);
  360 &                 n2oFilter = privateDmeshN2O(n2oRemove);
  361 &                 privateDmeshN2O.resize(n2oFilter.n);
  362 &                 privateDmeshN2O = n2oFilter;
  363 &             }
  364 & ENDIFMACRO
            khi = khi;
  365 &             fespace PhLocalPrivate(ThTab[0], P0);
  366 &             for(int k = 0; k < 2 * numberIntersection; ++k) {
  367 &                 int i = mpiWaitAny(rq);
  368 &                 if(i < numberIntersection) {
  369 &                     ThIntersection = meshIntersection[i];
  370 &                     PhIntersectionPrivate  intersection = send[i] > 1.0e-6 && recv[i] > 1.0e-6;
  371 &                     if( intersection[].l2 > 1.0e-6) {
  372 &                         tmpRemove = 0.0;
  373 &                         tmpRemove(n2oIntersection[i]) =  intersection[];
  374 &                         PhLocalPrivate afterTrunc;
  375 &                         afterTrunc[] = tmpRemove(n2oRemove);
  376 &                         meshIntersection[i] = trunc(ThTab[0], afterTrunc > 1.0e-6, label = 9999, new2old = n2oIntersection[i]);
  377 &                     }
  378 &                     else {
  379 &                         skip.resize(skip.n + 1);
  380 &                         skip[skip.n - 1] = i;
  381 &                     }
  382 &                 }
  383 &             }
  384 &         }
  385 &         skip.sort;
  386 &         real[int][int] recv(numberIntersection);
  387 &         real[int][int] send(numberIntersection);
  388 &         int j = 0;
  389 &         for(int i = 0; i < numberIntersection; ++i) {
  390 &             bool skipped = false;
  391 &             if(j < skip.n) {
  392 &                 if(skip[j] == i) {
  393 &                     ++j;
  394 &                     skipped = true;
  395 &                 }
  396 &             }
  397 &             if(!skipped) {
  398 &                 recv[i].resize(meshIntersection[i].nv);
  399 &                 Irecv(processor( intersection[0][i],  ThComm, rq[i]), recv[i]);
  400 &                 fespace VhIntersectionPrivate(meshIntersection[i], P1);
  401 &                 int[int] restriction = restrict(VhIntersectionPrivate, VhLocalPrivate, n2oIntersection[i]);
  402 &                 send[i].resize(meshIntersection[i].nv);
  403 &                 send[i] = khi[](restriction);
  404 &                 Isend(processor( intersection[0][i],  ThComm, rq[numberIntersection + i]), send[i]);
  405 &             }
  406 &         }
  407 &         mpiWaitAll(rq);
  408 &          intersection.resize(1 + numberIntersection - skip.n);
  409 &         j = 0;
  410 &         for(int i = 0; i < numberIntersection; ++i) {
  411 &             bool skipped = false;
  412 &             if(j < skip.n) {
  413 &                 if(skip[j] == i) {
  414 &                     ++j;
  415 &                     skipped = true;
  416 &                 }
  417 &             }
  418 &             if(!skipped) {
  419 & IFMACRO(vectorialfe)
  420 &                 fespace singleComponentWhPrivate(ThTab[0], vectorialfe);
  421 &                 fespace WhIntersectionPrivate(meshIntersection[i], vectorialfe);
  422 & ENDIFMACRO
IFMACRO(!vectorialfe)
  423 &                 fespace singleComponentWhPrivate(ThTab[0],  P1);
  424 &                 fespace WhIntersectionPrivate(meshIntersection[i],  P1);
  425 & ENDIFMACRO
                 intersection[1 + i - j] = restrict(WhIntersectionPrivate, singleComponentWhPrivate, n2oIntersection[i]);
  426 &                 fespace VhIntersectionPrivate(meshIntersection[i], P1);
  427 &                 int[int] restriction = restrict(VhIntersectionPrivate, VhLocalPrivate, n2oIntersection[i]);
  428 &                 privateDmeshThintersectionDef[1 + i - j].resize(VhLocalPrivate.ndof);
  429 &                 privateDmeshThintersectionDef[1 + i - j] = 0.0;
  430 &                 privateDmeshThintersectionDef[1 + i - j](restriction) = recv[i];
  431 &                  intersection[0][i - j] =  intersection[0][i];
  432 &             }
  433 &         }
  434 &         numberIntersection -= skip.n;
  435 &          intersection[0].resize(numberIntersection);
  436 &         privateDmeshThintersectionDef.resize(1 + numberIntersection);
  437 &         privateDmeshThintersectionDef[0].resize(numberIntersection);
  438 &         for[i, value :  intersection[0]] privateDmeshThintersectionDef[0][i] = value;
  439 &         if( fakeInterface != -111111 ||  overlap != 1) {
  440 &              PhGlobalPrivate suppPartition = khi > 0.1;
  441 &             AddLayers( ThGlobal, suppPartition[], 1, phi[]);
  442 &              ThBorderTab[0] = trunc( ThGlobal, phi > 0.001 && phi < 0.501, label = (abs( fakeInterface) + 1) * 100);
  443 &         }
  444 &     }
  445 & ENDIFMACRO
IFMACRO(vectorialfe)
  446 &     if( 1 > 1)
  447 &         for(int i = 0; i <  intersection.n - 1; ++i) {
  448 &             int n =  intersection[1 + i].n;
  449 &              intersection[1 + i].resize(n *  1);
  450 &             for(int j = n - 1; j != -1; --j)
  451 &                 for(int k =  1 - 1; k != -1; --k)
  452 &                      intersection[1 + i][j *  1 + k] =  intersection[1 + i][j] *  1 + k;
  453 &         }
  454 & ENDIFMACRO
ENDIFMACRO
   90 @ IFMACRO(!privateCreateMat)
   91 &      intersection.resize(1);
   92 &      intersection[0].resize(0);
   93 &      PhGlobalPrivate supp;
   94 &      VhGlobalPrivate suppSmooth;
   95 &     {
   96 &         int constant =  mpiRank( ThComm);
   97 &         for[i, value : supp[]] value = abs( partGlobal[][i] - constant) < 0.1;
   98 &         AddLayers( ThGlobal, supp[], 2 *  overlap, suppSmooth[]);
   99 &         int[int] n2o;
  100 &         meshN neighbors;
  101 &         bool connected = false;
  102 &         for[i, value : suppSmooth[]] if(abs(value - 0.5) < 0.5) connected = true;
  103 &         if(!connected)
  104 &             n2o.resize(0);
  105 &         else
            neighbors = trunc( ThGlobal, suppSmooth > 0.001 && suppSmooth < 0.999, new2old = n2o);
  106 &         int[int] partOverlap(n2o.n);
  107 &         for[i, value : n2o] partOverlap[i] =  partGlobal[][value];
  108 &         Unique(partOverlap,  intersection[0], remove = constant);
  109 &         if( privateS > 1 &&  1 <= 1) {
  110 &              ThGlobal = trunc( ThGlobal, suppSmooth > 0.001, split =  privateS);
  111 &             supp = abs( partGlobal - constant) < 0.1;
  112 &             suppSmooth = 0;
  113 &             AddLayers( ThGlobal, supp[], 2 *  overlap, suppSmooth[]);
  114 &         }
  115 &     }
  116 &     int[int] n2oGlobalPrivate, n2oNeighbor;
  117 & IFMACRO(!privateDmeshCartesianPartitioning)
  118 &      ThGlobal = trunc( ThGlobal, suppSmooth > 0.001, label = 9999, new2old = n2oGlobalPrivate);
  119 & ENDIFMACRO
    real eps =  ThGlobal.measure;
  120 &     real[int] epsTab( intersection[0].n);
  121 &     mpiRequest[int] rq(2 *  intersection[0].n);
  122 &     if(mpiSize( ThComm) ==  mpiSize( ThComm)) {
  123 &         for(int j = 0; j <  intersection[0].n; ++j)
  124 &             Irecv(processor( intersection[0][j],  ThComm, rq[j]), epsTab[j]);
  125 &         for(int j = 0; j <  intersection[0].n; ++j)
  126 &             Isend(processor( intersection[0][j],  ThComm, rq[ intersection[0].n + j]), eps);
  127 &     }
  128 &     else
        epsTab = 1.0e+30;
  129 &     suppSmooth = suppSmooth;
  130 & IFMACRO(!privateDmeshN2O)
  131 &     ThTab[ 1 - 1] = trunc( ThGlobal, suppSmooth > 0.501, label =  fakeInterface, new2old = n2oNeighbor);
  132 & IFMACRO(privateDmeshCartesianPartitioning)
  133 &     real[int] bb(2 * dimension);
  134 &     boundingbox(ThTab[ 1 - 1], bb);
  135 &     ThTab[ 1 - 1] = trunc( ThGlobal, x > bb[0] && x < bb[1] && y > bb[2] && y < bb[3]
  136 & IFMACRO(dimension,3)
  137 &                                                                                              && z > bb[4] && z < bb[5]
  138 & ENDIFMACRO
                                                                                                                      , label =  fakeInterface);
  139 &      ThGlobal = ThTab[ 1 - 1];
  140 &     n2oNeighbor = 0: ThGlobal.nt - 1;
  141 & ENDIFMACRO
ENDIFMACRO
IFMACRO(privateDmeshN2O)
  142 &     ThTab[ 1 - 1] = trunc( ThGlobal, suppSmooth > 0.501, label =  fakeInterface, new2old = privateDmeshN2O);
  143 & IFMACRO(privateDmeshCartesianPartitioning)
  144 &     real[int] bb(2 * dimension);
  145 &     boundingbox(ThTab[ 1 - 1], bb);
  146 &     ThTab[ 1 - 1] = trunc( ThGlobal, x > bb[0] && x < bb[1] && y > bb[2] && y < bb[3]
  147 & IFMACRO(dimension,3)
  148 &                                                                                              && z > bb[4] && z < bb[5]
  149 & ENDIFMACRO
                                                                                                                      , label =  fakeInterface, new2old = privateDmeshN2O);
  150 &      ThGlobal = ThTab[ 1 - 1];
  151 &     n2oNeighbor = 0: ThGlobal.nt - 1;
  152 & ENDIFMACRO
IFMACRO(!privateDmeshCartesianPartitioning)
  153 &     {
  154 &         int[int] backup = privateDmeshN2O;
  155 &         int[int] new = n2oGlobalPrivate(privateDmeshN2O);
  156 &         privateDmeshN2O.resize(new.n);
  157 &         privateDmeshN2O = new;
  158 &         n2oNeighbor.resize(backup.n);
  159 &         n2oNeighbor = backup;
  160 &     }
  161 & ENDIFMACRO
ENDIFMACRO
    if( 1 > 1) {
  162 &          prolongation.resize( 1 - 1);
  163 &         if( privateS > 1) {
  164 &             meshN globalNameRefined =  ThGlobal;
  165 &             for(int i =  1 - 1; i > 0; --i) {
  166 &                 globalNameRefined = trunc(globalNameRefined, 1, split =  privateS);
  167 &                 ThTab[i - 1] = trunc(globalNameRefined, suppSmooth > 0.501, label =  fakeInterface);
  168 &                 fespace WhLocalRefinedPrivate(ThTab[i - 1],  P1);
  169 &                 fespace WhLocalCoarsePrivate(ThTab[i],  P1);
  170 &                  prolongation[i - 1] = interpolate(WhLocalRefinedPrivate, WhLocalCoarsePrivate);
  171 &             }
  172 &         }
  173 &         else
            for(int i =  1 - 1; i > 0; --i)
  174 &                 ThTab[i - 1] = ThTab[i];
  175 &     }
  176 &     if(!removeZeros && ( fakeInterface != -111111 ||  overlap != 1)) {
  177 &         if(suppSmooth[].min < 0.501) {
  178 &             supp = supp;
  179 &              ThBorderTab[ 1 - 1] = trunc( ThGlobal, (suppSmooth > ( overlap - 0.999) / real(2 *  overlap)) && (suppSmooth < 0.501), label = (abs( fakeInterface) + 1) * 100);
  180 &             if( privateS > 1)
  181 &                 for(int i =  1 - 2; i >= 0; --i) {
  182 &                      ThBorderTab[i] = trunc( ThBorderTab[i + 1], 1, split =  privateS, label = (abs( fakeInterface) + 1) * 100);
  183 &                     meshN tempRefined = ThTab[i] +  ThBorderTab[i];
  184 &                     fespace PhRefinedPrivate(tempRefined, P0);
  185 &                     PhRefinedPrivate suppRefined = supp;
  186 &                     fespace VhBorderRefinedPrivate( ThBorderTab[i], P1);
  187 &                     VhBorderRefinedPrivate suppBorder = suppRefined;
  188 &                      ThBorderTab[i] = trunc( ThBorderTab[i], suppBorder > 0.01);
  189 &                 }
  190 &             else
                for(int i =  1 - 2; i >= 0; --i)
  191 &                      ThBorderTab[i] =  ThBorderTab[i + 1];
  192 &         }
  193 &     }
  194 &     fespace VhLocalPrivate(ThTab[ 1 - 1], P1);
  195 & IFMACRO(!privateDmeshThTab)
  196 & NewMacro privateDmeshThintersectionDef()partitionIntersectionTab EndMacro
    real[int][int] partitionIntersectionTab(1 +  intersection[0].n);
  197 &     privateDmeshThintersectionDef[0].resize( intersection[0].n);
  198 & ENDIFMACRO
IFMACRO(privateBuildDmesh)
  199 &     privateDmeshThintersectionDef.resize(1 +  intersection[0].n);
  200 &     privateDmeshThintersectionDef[0].resize( intersection[0].n);
  201 & ENDIFMACRO
    VhLocalPrivate khi = max(2 * suppSmooth - 1.0, 0.0);
  202 &     VhLocalPrivate sum;
  203 &     sum[] = khi[];
  204 &      VhGlobalPrivate phi;
  205 &     if(n2oGlobalPrivate.n ==  ThGlobal.nt &&  privateS == 1) {
  206 &         real[int] restrictionPart(n2oGlobalPrivate.n);
  207 &         restrictionPart =  partGlobal[](n2oGlobalPrivate);
  208 &          partGlobal = 0.0;
  209 &          partGlobal[] = restrictionPart;
  210 &     }
  211 &     else
         partGlobal =  partGlobal;
  212 &     n2oGlobalPrivate.resize(0);
  213 &     int numberIntersection = 0;
  214 &     {
  215 &         int[int] restriction = restrict(VhLocalPrivate,  VhGlobalPrivate, n2oNeighbor);
  216 &         n2oNeighbor.resize(0);
  217 &         mpiWaitAll(rq);
  218 &         for(int i = 0; i <  intersection[0].n; ++i) {
  219 &              PhGlobalPrivate suppPartition = abs( partGlobal -  intersection[0][i]) < 0.1;
  220 &             AddLayers( ThGlobal, suppPartition[],  overlap, phi[]);
  221 &             if(min(eps, epsTab[i]) > 0.0) {
  222 &                 if(intN( ThGlobal, qforder = 2)(phi) / min(eps, epsTab[i]) > 1.0e-10) {
  223 &                     privateDmeshThintersectionDef[1 + numberIntersection].resize(restriction.n);
  224 &                     privateDmeshThintersectionDef[1 + numberIntersection] = phi[](restriction);
  225 &                     if(!trueRestrict)
  226 &                         sum[] += privateDmeshThintersectionDef[1 + numberIntersection];
  227 &                      intersection[0][numberIntersection++] =  intersection[0][i];
  228 &                 }
  229 &             }
  230 &         }
  231 &     }
  232 &     if(numberIntersection !=  intersection[0].n) {
  233 &          intersection[0].resize(numberIntersection);
  234 &         privateDmeshThintersectionDef.resize(1 + numberIntersection);
  235 &     }
  236 &      intersection.resize(1 +  1 * numberIntersection);
  237 & ENDIFMACRO
   91 @      intersection.resize(1);
   92 @      intersection[0].resize(0);
   93 @      PhGlobalPrivate supp;
   94 @      VhGlobalPrivate suppSmooth;
   95 @     {
   96 @         int constant =  mpiRank( ThComm mpiCommWorld );
   97 @         for[i, value : supp[]] value = abs( partGlobal[][i] - constant) < 0.1;
   98 @         AddLayers( ThGlobal, supp[], 2 *  overlap, suppSmooth[]);
   99 @         int[int] n2o;
  100 @         meshNmesh3 neighbors;
  101 @         bool connected = false;
  102 @         for[i, value : suppSmooth[]] if(abs(value - 0.5) < 0.5) connected = true;
  103 @         if(!connected)
  104 @             n2o.resize(0);
  105 @         else
  106 @             neighbors = trunc( ThGlobal, suppSmooth > 0.001 && suppSmooth < 0.999, new2old = n2o);
  107 @         int[int] partOverlap(n2o.n);
  108 @         for[i, value : n2o] partOverlap[i] =  partGlobal[][value];
  109 @         Unique(partOverlap,  intersection[0], remove = constant);
  110 @         if( privateS > 1 &&  1 <= 1) {
  111 @              ThGlobal = trunc( ThGlobal, suppSmooth > 0.001, split =  privateS);
  112 @             supp = abs( partGlobal - constant) < 0.1;
  113 @             suppSmooth = 0;
  114 @             AddLayers( ThGlobal, supp[], 2 *  overlap, suppSmooth[]);
  115 @         }
  116 @     }
  117 @     int[int] n2oGlobalPrivate, n2oNeighbor;
  118 @ IFMACRO(!privateDmeshCartesianPartitioning)
  119 &      ThGlobal = trunc( ThGlobal, suppSmooth > 0.001, label = 9999, new2old = n2oGlobalPrivate);
  120 & ENDIFMACRO
  119 @      ThGlobal = trunc( ThGlobal, suppSmooth > 0.001, label = 9999, new2old = n2oGlobalPrivate);
  120 @ 
  121 @     real eps =  ThGlobal.measure;
  122 @     real[int] epsTab( intersection[0].n);
  123 @     mpiRequest[int] rq(2 *  intersection[0].n);
  124 @     if(mpiSize( ThComm mpiCommWorld ) ==  mpiSize( ThComm mpiCommWorld )) {
  125 @         for(int j = 0; j <  intersection[0].n; ++j)
  126 @             Irecv(processor( intersection[0][j],  ThComm mpiCommWorld , rq[j]), epsTab[j]);
  127 @         for(int j = 0; j <  intersection[0].n; ++j)
  128 @             Isend(processor( intersection[0][j],  ThComm mpiCommWorld , rq[ intersection[0].n + j]), eps);
  129 @     }
  130 @     else
  131 @         epsTab = 1.0e+30;
  132 @     suppSmooth = suppSmooth;
  133 @ IFMACRO(!privateDmeshN2O)
  134 &     ThTab[ 1 - 1] = trunc( ThGlobal, suppSmooth > 0.501, label =  fakeInterface, new2old = n2oNeighbor);
  135 & IFMACRO(privateDmeshCartesianPartitioning)
  136 &     real[int] bb(2 * dimension);
  137 &     boundingbox(ThTab[ 1 - 1], bb);
  138 &     ThTab[ 1 - 1] = trunc( ThGlobal, x > bb[0] && x < bb[1] && y > bb[2] && y < bb[3]
  139 & IFMACRO(dimension,3)
  140 &                                                                                              && z > bb[4] && z < bb[5]
  141 & ENDIFMACRO
                                                                                                                      , label =  fakeInterface);
  142 &      ThGlobal = ThTab[ 1 - 1];
  143 &     n2oNeighbor = 0: ThGlobal.nt - 1;
  144 & ENDIFMACRO
ENDIFMACRO
  134 @     ThTab[ 1 - 1] = trunc( ThGlobal, suppSmooth > 0.501, label =  fakeInterface, new2old = n2oNeighbor);
  135 @ IFMACRO(privateDmeshCartesianPartitioning)
  136 &     real[int] bb(2 * dimension);
  137 &     boundingbox(ThTab[ 1 - 1], bb);
  138 &     ThTab[ 1 - 1] = trunc( ThGlobal, x > bb[0] && x < bb[1] && y > bb[2] && y < bb[3]
  139 & IFMACRO(dimension,3)
  140 &                                                                                              && z > bb[4] && z < bb[5]
  141 & ENDIFMACRO
                                                                                                                      , label =  fakeInterface);
  142 &      ThGlobal = ThTab[ 1 - 1];
  143 &     n2oNeighbor = 0: ThGlobal.nt - 1;
  144 & ENDIFMACRO
  145 @ 
  145 @ IFMACRO(privateDmeshN2O)
  146 &     ThTab[ 1 - 1] = trunc( ThGlobal, suppSmooth > 0.501, label =  fakeInterface, new2old = privateDmeshN2O);
  147 & IFMACRO(privateDmeshCartesianPartitioning)
  148 &     real[int] bb(2 * dimension);
  149 &     boundingbox(ThTab[ 1 - 1], bb);
  150 &     ThTab[ 1 - 1] = trunc( ThGlobal, x > bb[0] && x < bb[1] && y > bb[2] && y < bb[3]
  151 & IFMACRO(dimension,3)
  152 &                                                                                              && z > bb[4] && z < bb[5]
  153 & ENDIFMACRO
                                                                                                                      , label =  fakeInterface, new2old = privateDmeshN2O);
  154 &      ThGlobal = ThTab[ 1 - 1];
  155 &     n2oNeighbor = 0: ThGlobal.nt - 1;
  156 & ENDIFMACRO
IFMACRO(!privateDmeshCartesianPartitioning)
  157 &     {
  158 &         int[int] backup = privateDmeshN2O;
  159 &         int[int] new = n2oGlobalPrivate(privateDmeshN2O);
  160 &         privateDmeshN2O.resize(new.n);
  161 &         privateDmeshN2O = new;
  162 &         n2oNeighbor.resize(backup.n);
  163 &         n2oNeighbor = backup;
  164 &     }
  165 & ENDIFMACRO
ENDIFMACRO
  166 @     if( 1 > 1) {
  167 @          prolongation.resize( 1 - 1);
  168 @         if( privateS > 1) {
  169 @             meshNmesh3 globalNameRefined =  ThGlobal;
  170 @             for(int i =  1 - 1; i > 0; --i) {
  171 @                 globalNameRefined = trunc(globalNameRefined, 1, split =  privateS);
  172 @                 ThTab[i - 1] = trunc(globalNameRefined, suppSmooth > 0.501, label =  fakeInterface);
  173 @                 fespace WhLocalRefinedPrivate(ThTab[i - 1],  P1);
  174 @                 fespace WhLocalCoarsePrivate(ThTab[i],  P1);
  175 @                  prolongation[i - 1] = interpolate(WhLocalRefinedPrivate, WhLocalCoarsePrivate);
  176 @             }
  177 @         }
  178 @         else
  179 @             for(int i =  1 - 1; i > 0; --i)
  180 @                 ThTab[i - 1] = ThTab[i];
  181 @     }
  182 @     if(!removeZeros && ( fakeInterface != -111111 ||  overlap != 1)) {
  183 @         if(suppSmooth[].min < 0.501) {
  184 @             supp = supp;
  185 @              ThBorderTab[ 1 - 1] = trunc( ThGlobal, (suppSmooth > ( overlap - 0.999) / real(2 *  overlap)) && (suppSmooth < 0.501), label = (abs( fakeInterface) + 1) * 100);
  186 @             if( privateS > 1)
  187 @                 for(int i =  1 - 2; i >= 0; --i) {
  188 @                      ThBorderTab[i] = trunc( ThBorderTab[i + 1], 1, split =  privateS, label = (abs( fakeInterface) + 1) * 100);
  189 @                     meshNmesh3 tempRefined = ThTab[i] +  ThBorderTab[i];
  190 @                     fespace PhRefinedPrivate(tempRefined, P0);
  191 @                     PhRefinedPrivate suppRefined = supp;
  192 @                     fespace VhBorderRefinedPrivate( ThBorderTab[i], P1);
  193 @                     VhBorderRefinedPrivate suppBorder = suppRefined;
  194 @                      ThBorderTab[i] = trunc( ThBorderTab[i], suppBorder > 0.01);
  195 @                 }
  196 @             else
  197 @                 for(int i =  1 - 2; i >= 0; --i)
  198 @                      ThBorderTab[i] =  ThBorderTab[i + 1];
  199 @         }
  200 @     }
  201 @     fespace VhLocalPrivate(ThTab[ 1 - 1], P1);
  202 @ IFMACRO(!privateDmeshThTab)
  203 & NewMacro privateDmeshThintersectionDef()partitionIntersectionTab EndMacro
    real[int][int] partitionIntersectionTab(1 +  intersection[0].n);
  204 &     privateDmeshThintersectionDef[0].resize( intersection[0].n);
  205 & ENDIFMACRO
  206 @ IFMACRO(privateBuildDmesh)
  207 &     privateDmeshThintersectionDef.resize(1 +  intersection[0].n);
  208 &     privateDmeshThintersectionDef[0].resize( intersection[0].n);
  209 & ENDIFMACRO
  207 @     privateDmeshThintersectionDef.resize(1 +  intersection[0].n);
  208 @     privateDmeshThintersectionDef[0].resize( intersection[0].n);
  209 @ 
  210 @     VhLocalPrivate khi = max(2 * suppSmooth - 1.0, 0.0);
  211 @     VhLocalPrivate sum;
  212 @     sum[] = khi[];
  213 @      VhGlobalPrivate phi;
  214 @     if(n2oGlobalPrivate.n ==  ThGlobal.nt &&  privateS == 1) {
  215 @         real[int] restrictionPart(n2oGlobalPrivate.n);
  216 @         restrictionPart =  partGlobal[](n2oGlobalPrivate);
  217 @          partGlobal = 0.0;
  218 @          partGlobal[] = restrictionPart;
  219 @     }
  220 @     else
  221 @          partGlobal =  partGlobal;
  222 @     n2oGlobalPrivate.resize(0);
  223 @     int numberIntersection = 0;
  224 @     {
  225 @         int[int] restriction = restrict(VhLocalPrivate,  VhGlobalPrivate, n2oNeighbor);
  226 @         n2oNeighbor.resize(0);
  227 @         mpiWaitAll(rq);
  228 @         for(int i = 0; i <  intersection[0].n; ++i) {
  229 @              PhGlobalPrivate suppPartition = abs( partGlobal -  intersection[0][i]) < 0.1;
  230 @             AddLayers( ThGlobal, suppPartition[],  overlap, phi[]);
  231 @             if(min(eps, epsTab[i]) > 0.0) {
  232 @                 if(intNint3d( ThGlobal, qforder = 2)(phi) / min(eps, epsTab[i]) > 1.0e-10) {
  233 @                     privateDmeshThintersectionDef[1 + numberIntersection].resize(restriction.n);
  234 @                     privateDmeshThintersectionDef[1 + numberIntersection] = phi[](restriction);
  235 @                     if(!trueRestrict)
  236 @                         sum[] += privateDmeshThintersectionDef[1 + numberIntersection];
  237 @                      intersection[0][numberIntersection++] =  intersection[0][i];
  238 @                 }
  239 @             }
  240 @         }
  241 @     }
  242 @     if(numberIntersection !=  intersection[0].n) {
  243 @          intersection[0].resize(numberIntersection);
  244 @         privateDmeshThintersectionDef.resize(1 + numberIntersection);
  245 @     }
  246 @      intersection.resize(1 +  1 * numberIntersection);
  247 @ 
  238 @ IFMACRO(privateCreateMat)
  239 &     assert( 1 == 1);
  240 &     int numberIntersection = privateDmeshThintersectionDef.n - 1;
  241 &      intersection.resize(1 +  1 * numberIntersection);
  242 &      intersection[0].resize(numberIntersection);
  243 &      intersection[0] = lround(privateDmeshThintersectionDef[0]);
  244 &     fespace VhLocalPrivate(ThTab[ 1 - 1], P1);
  245 & IFMACRO(privateDmeshN2O)
  246 & IFMACRO(privateDmeshOriginal)
  247 & IFMACRO(privateDmeshRestriction)
  248 &     {
  249 &         fespace WhLocalPrivate(ThTab[ 1 - 1],  P1);
  250 &         fespace WhOriginalPrivate(privateDmeshOriginal,  P1);
  251 &         privateDmeshRestriction.resize(WhOriginalPrivate.ndof);
  252 &         privateDmeshRestriction = restrict(WhLocalPrivate, WhOriginalPrivate, privateDmeshN2O);
  253 &     }
  254 & ENDIFMACRO
ENDIFMACRO
ENDIFMACRO
ENDIFMACRO
  255 @ IFMACRO(privateBuildDmesh)
  256 &     privateDmeshThintersectionDef[0].resize(numberIntersection);
  257 &     for[i, value :  intersection[0]] privateDmeshThintersectionDef[0][i] = value;
  258 & ENDIFMACRO
  256 @     privateDmeshThintersectionDef[0].resize(numberIntersection);
  257 @     for[i, value :  intersection[0]] privateDmeshThintersectionDef[0][i] = value;
  258 @ 
  259 @     meshNmesh3[int] meshIntersection(numberIntersection);
  260 @ IFMACRO(!privateCreateMat)
  261 &     int[int][int] n2oIntersection(0);
  262 &     if(trueRestrict && mpiSize( ThComm) ==  mpiSize( ThComm) && removeZeros)
  263 &         n2oIntersection.resize(numberIntersection);
  264 & ENDIFMACRO
  261 @     int[int][int] n2oIntersection(0);
  262 @     if(trueRestrict && mpiSize( ThComm mpiCommWorld ) ==  mpiSize( ThComm mpiCommWorld ) && removeZeros)
  263 @         n2oIntersection.resize(numberIntersection);
  264 @ 
  265 @     for(int j = 0; j < ( privateS == 1 ? 1 :  1); ++j) {
  266 @         for(int i = 0; i < numberIntersection; ++i) {
  267 @             int[int] n2o;
  268 @             VhLocalPrivate partitionIntersection;
  269 @             partitionIntersection[] = privateDmeshThintersectionDef[1 + i];
  270 @             meshIntersection[i] = trunc(ThTab[j], partitionIntersection > 1.0e-6, new2old = n2o, label = 9999);
  271 @ IFMACRO(privateDmeshCartesianPartitioning)
  272 &             real[int] bb(2 * dimension);
  273 &             boundingbox(meshIntersection[i], bb);
  274 &             meshIntersection[i] = trunc(ThTab[j], x > bb[0] && x < bb[1] && y > bb[2] && y < bb[3]
  275 & IFMACRO(dimension,3)
  276 &                                                                                                       && z > bb[4] && z < bb[5]
  277 & ENDIFMACRO
                                                                                                                               , new2old = n2o, label = 9999);
  278 & ENDIFMACRO
  279 @ IFMACRO(!privateCreateMat)
  280 &             if(j == 0 && trueRestrict && mpiSize( ThComm) ==  mpiSize( ThComm) && removeZeros) {
  281 &                 n2oIntersection[i].resize(n2o.n);
  282 &                 n2oIntersection[i] = n2o;
  283 &             }
  284 &             if(!removeZeros)
  285 & ENDIFMACRO
  280 @             if(j == 0 && trueRestrict && mpiSize( ThComm mpiCommWorld ) ==  mpiSize( ThComm mpiCommWorld ) && removeZeros) {
  281 @                 n2oIntersection[i].resize(n2o.n);
  282 @                 n2oIntersection[i] = n2o;
  283 @             }
  284 @             if(!removeZeros)
  285 @ 
  286 @             {
  287 @ IFMACRO(vectorialfe)
  288 &                 fespace singleComponentWhPrivate(ThTab[j], vectorialfe);
  289 &                 fespace WhIntersectionPrivate(meshIntersection[i], vectorialfe);
  290 & ENDIFMACRO
  291 @ IFMACRO(!vectorialfe)
  292 &                 fespace singleComponentWhPrivate(ThTab[j],  P1);
  293 &                 fespace WhIntersectionPrivate(meshIntersection[i],  P1);
  294 & ENDIFMACRO
  292 @                 fespace singleComponentWhPrivate(ThTab[j],  P1);
  293 @                 fespace WhIntersectionPrivate(meshIntersection[i],  P1);
  294 @ 
  295 @                  intersection[1 + i + j * numberIntersection] = restrict(WhIntersectionPrivate, singleComponentWhPrivate, n2o);
  296 @             }
  297 @         }
  298 @     }
  299 @ IFMACRO(!privateCreateMat)
  300 &     if( privateS == 1 &&  1 > 1 && !removeZeros)
  301 &         for(int j = 1; j <  1; ++j)
  302 &             for(int i = 0; i < numberIntersection; ++i) {
  303 &                  intersection[1 + i + j * numberIntersection].resize( intersection[1 + i].n);
  304 &                  intersection[1 + i + j * numberIntersection] =  intersection[1 + i];
  305 &             }
  306 &     for(int i = 0; i <  1 - 1; ++i) {
  307 &         fespace VhRefinedPrivate(ThTab[i], P1);
  308 &         fespace PhRefinedPrivate(ThTab[i], P0);
  309 &         PhRefinedPrivate partRefined =  partGlobal;
  310 &         PhRefinedPrivate supp = abs(partRefined -  mpiRank( ThComm)) < 0.1;
  311 &         varf vSupp(uPrivate, vPrivate) = intN(ThTab[i], qforder = 1)(supp * vPrivate);
  312 &         VhRefinedPrivate khiL;
  313 &         khiL[] = vSupp(0, VhRefinedPrivate);
  314 &         khiL = khiL > 0.0;
  315 &         VhRefinedPrivate sum = khiL;
  316 &         for(int j = 0; j < numberIntersection; ++j) {
  317 &             supp = abs(partRefined -  intersection[0][j]) < 0.1;
  318 &             VhRefinedPrivate phiL;
  319 &             phiL[] = vSupp(0, VhRefinedPrivate);
  320 &             phiL = phiL > 0.0;
  321 &             sum[] += phiL[];
  322 &         }
  323 &         khiL[] ./= sum[];
  324 &         fespace WhRefinedPrivate(ThTab[i],  P1);
  325 &         WhRefinedPrivate  defP1(func2vec);
  326 &          defP1(func2vec) =  initP1(khiL);
  327 &          DTab[i].resize(WhRefinedPrivate.ndof);
  328 &          DTab[i] = func2vec[];
  329 &     }
  330 &     if(!trueRestrict)
  331 &         khi[] ./= sum[];
  332 &     else {
  333 &         khi = abs( partGlobal -  mpiRank( ThComm)) < 0.1;
  334 &         VhLocalPrivate sigma =  partGlobal;
  335 &         for(int i = 0; i < numberIntersection; ++i) {
  336 &             if( mpiRank( ThComm) <  intersection[0][i]) {
  337 &                 for[j, value : khi[]] {
  338 &                     if(value > 0.9 && abs(sigma[][j] -  intersection[0][i]) < 0.1)
  339 &                         value = 0.0;
  340 &                 }
  341 &             }
  342 &         }
  343 &     }
  344 &     if(trueRestrict && mpiSize( ThComm) ==  mpiSize( ThComm) && removeZeros) {
  345 &         assert( 1 == 1);
  346 &         meshN ThIntersection;
  347 &         mpiRequest[int] rq(2 * numberIntersection);
  348 &         int[int] skip(0);
  349 &         {
  350 &             fespace PhIntersectionPrivate(ThIntersection, P0);
  351 &             PhIntersectionPrivate[int] recv(numberIntersection);
  352 &             PhIntersectionPrivate[int] send(numberIntersection);
  353 &             for(int i = 0; i < numberIntersection; ++i) {
  354 &                 ThIntersection = meshIntersection[i];
  355 &                 Irecv(processor( intersection[0][i],  ThComm, rq[i]), recv[i][]);
  356 &                 send[i] = khi;
  357 &                 Isend(processor( intersection[0][i],  ThComm, rq[numberIntersection + i]), send[i][]);
  358 &             }
  359 &             real[int] tmpRemove(ThTab[0].nt);
  360 &             int[int] n2oRemove;
  361 & IFMACRO(!privateDmeshN2O)
  362 &             ThTab[0] = trunc(ThTab[0], khi > 1.0e-6, label = 9999, new2old = n2oRemove);
  363 & ENDIFMACRO
IFMACRO(privateDmeshN2O)
  364 &             {
  365 &                 int[int] n2oFilter;
  366 &                 ThTab[0] = trunc(ThTab[0], khi > 1.0e-6, label = 9999, new2old = n2oRemove);
  367 &                 n2oFilter.resize(n2oRemove.n);
  368 &                 n2oFilter = privateDmeshN2O(n2oRemove);
  369 &                 privateDmeshN2O.resize(n2oFilter.n);
  370 &                 privateDmeshN2O = n2oFilter;
  371 &             }
  372 & ENDIFMACRO
            khi = khi;
  373 &             fespace PhLocalPrivate(ThTab[0], P0);
  374 &             for(int k = 0; k < 2 * numberIntersection; ++k) {
  375 &                 int i = mpiWaitAny(rq);
  376 &                 if(i < numberIntersection) {
  377 &                     ThIntersection = meshIntersection[i];
  378 &                     PhIntersectionPrivate  intersection = send[i] > 1.0e-6 && recv[i] > 1.0e-6;
  379 &                     if( intersection[].l2 > 1.0e-6) {
  380 &                         tmpRemove = 0.0;
  381 &                         tmpRemove(n2oIntersection[i]) =  intersection[];
  382 &                         PhLocalPrivate afterTrunc;
  383 &                         afterTrunc[] = tmpRemove(n2oRemove);
  384 &                         meshIntersection[i] = trunc(ThTab[0], afterTrunc > 1.0e-6, label = 9999, new2old = n2oIntersection[i]);
  385 &                     }
  386 &                     else {
  387 &                         skip.resize(skip.n + 1);
  388 &                         skip[skip.n - 1] = i;
  389 &                     }
  390 &                 }
  391 &             }
  392 &         }
  393 &         skip.sort;
  394 &         real[int][int] recv(numberIntersection);
  395 &         real[int][int] send(numberIntersection);
  396 &         int j = 0;
  397 &         for(int i = 0; i < numberIntersection; ++i) {
  398 &             bool skipped = false;
  399 &             if(j < skip.n) {
  400 &                 if(skip[j] == i) {
  401 &                     ++j;
  402 &                     skipped = true;
  403 &                 }
  404 &             }
  405 &             if(!skipped) {
  406 &                 recv[i].resize(meshIntersection[i].nv);
  407 &                 Irecv(processor( intersection[0][i],  ThComm, rq[i]), recv[i]);
  408 &                 fespace VhIntersectionPrivate(meshIntersection[i], P1);
  409 &                 int[int] restriction = restrict(VhIntersectionPrivate, VhLocalPrivate, n2oIntersection[i]);
  410 &                 send[i].resize(meshIntersection[i].nv);
  411 &                 send[i] = khi[](restriction);
  412 &                 Isend(processor( intersection[0][i],  ThComm, rq[numberIntersection + i]), send[i]);
  413 &             }
  414 &         }
  415 &         mpiWaitAll(rq);
  416 &          intersection.resize(1 + numberIntersection - skip.n);
  417 &         j = 0;
  418 &         for(int i = 0; i < numberIntersection; ++i) {
  419 &             bool skipped = false;
  420 &             if(j < skip.n) {
  421 &                 if(skip[j] == i) {
  422 &                     ++j;
  423 &                     skipped = true;
  424 &                 }
  425 &             }
  426 &             if(!skipped) {
  427 & IFMACRO(vectorialfe)
  428 &                 fespace singleComponentWhPrivate(ThTab[0], vectorialfe);
  429 &                 fespace WhIntersectionPrivate(meshIntersection[i], vectorialfe);
  430 & ENDIFMACRO
IFMACRO(!vectorialfe)
  431 &                 fespace singleComponentWhPrivate(ThTab[0],  P1);
  432 &                 fespace WhIntersectionPrivate(meshIntersection[i],  P1);
  433 & ENDIFMACRO
                 intersection[1 + i - j] = restrict(WhIntersectionPrivate, singleComponentWhPrivate, n2oIntersection[i]);
  434 &                 fespace VhIntersectionPrivate(meshIntersection[i], P1);
  435 &                 int[int] restriction = restrict(VhIntersectionPrivate, VhLocalPrivate, n2oIntersection[i]);
  436 &                 privateDmeshThintersectionDef[1 + i - j].resize(VhLocalPrivate.ndof);
  437 &                 privateDmeshThintersectionDef[1 + i - j] = 0.0;
  438 &                 privateDmeshThintersectionDef[1 + i - j](restriction) = recv[i];
  439 &                  intersection[0][i - j] =  intersection[0][i];
  440 &             }
  441 &         }
  442 &         numberIntersection -= skip.n;
  443 &          intersection[0].resize(numberIntersection);
  444 &         privateDmeshThintersectionDef.resize(1 + numberIntersection);
  445 &         privateDmeshThintersectionDef[0].resize(numberIntersection);
  446 &         for[i, value :  intersection[0]] privateDmeshThintersectionDef[0][i] = value;
  447 &         if( fakeInterface != -111111 ||  overlap != 1) {
  448 &              PhGlobalPrivate suppPartition = khi > 0.1;
  449 &             AddLayers( ThGlobal, suppPartition[], 1, phi[]);
  450 &              ThBorderTab[0] = trunc( ThGlobal, phi > 0.001 && phi < 0.501, label = (abs( fakeInterface) + 1) * 100);
  451 &         }
  452 &     }
  453 & ENDIFMACRO
  300 @     if( privateS == 1 &&  1 > 1 && !removeZeros)
  301 @         for(int j = 1; j <  1; ++j)
  302 @             for(int i = 0; i < numberIntersection; ++i) {
  303 @                  intersection[1 + i + j * numberIntersection].resize( intersection[1 + i].n);
  304 @                  intersection[1 + i + j * numberIntersection] =  intersection[1 + i];
  305 @             }
  306 @     for(int i = 0; i <  1 - 1; ++i) {
  307 @         fespace VhRefinedPrivate(ThTab[i], P1);
  308 @         fespace PhRefinedPrivate(ThTab[i], P0);
  309 @         PhRefinedPrivate partRefined =  partGlobal;
  310 @         PhRefinedPrivate supp = abs(partRefined -  mpiRank( ThComm mpiCommWorld )) < 0.1;
  311 @         varf vSupp(uPrivate, vPrivate) = intNint3d(ThTab[i], qforder = 1)(supp * vPrivate);
  312 @         VhRefinedPrivate khiL;
  313 @         khiL[] = vSupp(0, VhRefinedPrivate);
  314 @         khiL = khiL > 0.0;
  315 @         VhRefinedPrivate sum = khiL;
  316 @         for(int j = 0; j < numberIntersection; ++j) {
  317 @             supp = abs(partRefined -  intersection[0][j]) < 0.1;
  318 @             VhRefinedPrivate phiL;
  319 @             phiL[] = vSupp(0, VhRefinedPrivate);
  320 @             phiL = phiL > 0.0;
  321 @             sum[] += phiL[];
  322 @         }
  323 @         khiL[] ./= sum[];
  324 @         fespace WhRefinedPrivate(ThTab[i],  P1);
  325 @         WhRefinedPrivate  defP1(func2vec) func2vec ;
  326 @          defP1(func2vec) func2vec  =  initP1(khiL) khiL ;
  327 @          DTab[i].resize(WhRefinedPrivate.ndof);
  328 @          DTab[i] = func2vec[];
  329 @     }
  330 @     if(!trueRestrict)
  331 @         khi[] ./= sum[];
  332 @     else {
  333 @         khi = abs( partGlobal -  mpiRank( ThComm mpiCommWorld )) < 0.1;
  334 @         VhLocalPrivate sigma =  partGlobal;
  335 @         for(int i = 0; i < numberIntersection; ++i) {
  336 @             if( mpiRank( ThComm mpiCommWorld ) <  intersection[0][i]) {
  337 @                 for[j, value : khi[]] {
  338 @                     if(value > 0.9 && abs(sigma[][j] -  intersection[0][i]) < 0.1)
  339 @                         value = 0.0;
  340 @                 }
  341 @             }
  342 @         }
  343 @     }
  344 @     if(trueRestrict && mpiSize( ThComm mpiCommWorld ) ==  mpiSize( ThComm mpiCommWorld ) && removeZeros) {
  345 @         assert( 1 == 1);
  346 @         meshNmesh3 ThIntersection;
  347 @         mpiRequest[int] rq(2 * numberIntersection);
  348 @         int[int] skip(0);
  349 @         {
  350 @             fespace PhIntersectionPrivate(ThIntersection, P0);
  351 @             PhIntersectionPrivate[int] recv(numberIntersection);
  352 @             PhIntersectionPrivate[int] send(numberIntersection);
  353 @             for(int i = 0; i < numberIntersection; ++i) {
  354 @                 ThIntersection = meshIntersection[i];
  355 @                 Irecv(processor( intersection[0][i],  ThComm mpiCommWorld , rq[i]), recv[i][]);
  356 @                 send[i] = khi;
  357 @                 Isend(processor( intersection[0][i],  ThComm mpiCommWorld , rq[numberIntersection + i]), send[i][]);
  358 @             }
  359 @             real[int] tmpRemove(ThTab[0].nt);
  360 @             int[int] n2oRemove;
  361 @ IFMACRO(!privateDmeshN2O)
  362 &             ThTab[0] = trunc(ThTab[0], khi > 1.0e-6, label = 9999, new2old = n2oRemove);
  363 & ENDIFMACRO
  362 @             ThTab[0] = trunc(ThTab[0], khi > 1.0e-6, label = 9999, new2old = n2oRemove);
  363 @ 
  364 @ IFMACRO(privateDmeshN2O)
  365 &             {
  366 &                 int[int] n2oFilter;
  367 &                 ThTab[0] = trunc(ThTab[0], khi > 1.0e-6, label = 9999, new2old = n2oRemove);
  368 &                 n2oFilter.resize(n2oRemove.n);
  369 &                 n2oFilter = privateDmeshN2O(n2oRemove);
  370 &                 privateDmeshN2O.resize(n2oFilter.n);
  371 &                 privateDmeshN2O = n2oFilter;
  372 &             }
  373 & ENDIFMACRO
  374 @             khi = khi;
  375 @             fespace PhLocalPrivate(ThTab[0], P0);
  376 @             for(int k = 0; k < 2 * numberIntersection; ++k) {
  377 @                 int i = mpiWaitAny(rq);
  378 @                 if(i < numberIntersection) {
  379 @                     ThIntersection = meshIntersection[i];
  380 @                     PhIntersectionPrivate  intersection = send[i] > 1.0e-6 && recv[i] > 1.0e-6;
  381 @                     if( intersection[].l2 > 1.0e-6) {
  382 @                         tmpRemove = 0.0;
  383 @                         tmpRemove(n2oIntersection[i]) =  intersection[];
  384 @                         PhLocalPrivate afterTrunc;
  385 @                         afterTrunc[] = tmpRemove(n2oRemove);
  386 @                         meshIntersection[i] = trunc(ThTab[0], afterTrunc > 1.0e-6, label = 9999, new2old = n2oIntersection[i]);
  387 @                     }
  388 @                     else {
  389 @                         skip.resize(skip.n + 1);
  390 @                         skip[skip.n - 1] = i;
  391 @                     }
  392 @                 }
  393 @             }
  394 @         }
  395 @         skip.sort;
  396 @         real[int][int] recv(numberIntersection);
  397 @         real[int][int] send(numberIntersection);
  398 @         int j = 0;
  399 @         for(int i = 0; i < numberIntersection; ++i) {
  400 @             bool skipped = false;
  401 @             if(j < skip.n) {
  402 @                 if(skip[j] == i) {
  403 @                     ++j;
  404 @                     skipped = true;
  405 @                 }
  406 @             }
  407 @             if(!skipped) {
  408 @                 recv[i].resize(meshIntersection[i].nv);
  409 @                 Irecv(processor( intersection[0][i],  ThComm mpiCommWorld , rq[i]), recv[i]);
  410 @                 fespace VhIntersectionPrivate(meshIntersection[i], P1);
  411 @                 int[int] restriction = restrict(VhIntersectionPrivate, VhLocalPrivate, n2oIntersection[i]);
  412 @                 send[i].resize(meshIntersection[i].nv);
  413 @                 send[i] = khi[](restriction);
  414 @                 Isend(processor( intersection[0][i],  ThComm mpiCommWorld , rq[numberIntersection + i]), send[i]);
  415 @             }
  416 @         }
  417 @         mpiWaitAll(rq);
  418 @          intersection.resize(1 + numberIntersection - skip.n);
  419 @         j = 0;
  420 @         for(int i = 0; i < numberIntersection; ++i) {
  421 @             bool skipped = false;
  422 @             if(j < skip.n) {
  423 @                 if(skip[j] == i) {
  424 @                     ++j;
  425 @                     skipped = true;
  426 @                 }
  427 @             }
  428 @             if(!skipped) {
  429 @ IFMACRO(vectorialfe)
  430 &                 fespace singleComponentWhPrivate(ThTab[0], vectorialfe);
  431 &                 fespace WhIntersectionPrivate(meshIntersection[i], vectorialfe);
  432 & ENDIFMACRO
  433 @ IFMACRO(!vectorialfe)
  434 &                 fespace singleComponentWhPrivate(ThTab[0],  P1);
  435 &                 fespace WhIntersectionPrivate(meshIntersection[i],  P1);
  436 & ENDIFMACRO
  434 @                 fespace singleComponentWhPrivate(ThTab[0],  P1);
  435 @                 fespace WhIntersectionPrivate(meshIntersection[i],  P1);
  436 @ 
  437 @                  intersection[1 + i - j] = restrict(WhIntersectionPrivate, singleComponentWhPrivate, n2oIntersection[i]);
  438 @                 fespace VhIntersectionPrivate(meshIntersection[i], P1);
  439 @                 int[int] restriction = restrict(VhIntersectionPrivate, VhLocalPrivate, n2oIntersection[i]);
  440 @                 privateDmeshThintersectionDef[1 + i - j].resize(VhLocalPrivate.ndof);
  441 @                 privateDmeshThintersectionDef[1 + i - j] = 0.0;
  442 @                 privateDmeshThintersectionDef[1 + i - j](restriction) = recv[i];
  443 @                  intersection[0][i - j] =  intersection[0][i];
  444 @             }
  445 @         }
  446 @         numberIntersection -= skip.n;
  447 @          intersection[0].resize(numberIntersection);
  448 @         privateDmeshThintersectionDef.resize(1 + numberIntersection);
  449 @         privateDmeshThintersectionDef[0].resize(numberIntersection);
  450 @         for[i, value :  intersection[0]] privateDmeshThintersectionDef[0][i] = value;
  451 @         if( fakeInterface != -111111 ||  overlap != 1) {
  452 @              PhGlobalPrivate suppPartition = khi > 0.1;
  453 @             AddLayers( ThGlobal, suppPartition[], 1, phi[]);
  454 @              ThBorderTab[0] = trunc( ThGlobal, phi > 0.001 && phi < 0.501, label = (abs( fakeInterface) + 1) * 100);
  455 @         }
  456 @     }
  457 @ 
  454 @ IFMACRO(vectorialfe)
  455 &     if( 1 > 1)
  456 &         for(int i = 0; i <  intersection.n - 1; ++i) {
  457 &             int n =  intersection[1 + i].n;
  458 &              intersection[1 + i].resize(n *  1);
  459 &             for(int j = n - 1; j != -1; --j)
  460 &                 for(int k =  1 - 1; k != -1; --k)
  461 &                      intersection[1 + i][j *  1 + k] =  intersection[1 + i][j] *  1 + k;
  462 &         }
  463 & ENDIFMACRO
  464 @ 
  455 @ IFMACRO(privateCreatePartition)
  456 &     fespace VhLocalPrivate(ThTab[ 1 - 1], P1);
  457 & IFMACRO(!privateCreateMat)
  458 &     VhLocalPrivate khi;
  459 & ENDIFMACRO
ENDIFMACRO
  460 @ IFMACRO(privateCreateMat)
  461 &     VhLocalPrivate khi;
  462 &     khi[] = privateDmeshThkhiDef[0];
  463 & ENDIFMACRO
  464 @     fespace WhPartPrivate(ThTab[ 1 - 1],  P1);
  465 @     WhPartPrivate  defP1(func2vec) func2vec ;
  466 @      DTab[ 1 - 1].resize(WhPartPrivate.ndof);
  467 @     if((WhPartPrivate.ndof % ThTab[ 1 - 1].nt) == 0 && WhPartPrivate.ndof != ThTab[ 1 - 1].nv) {
  468 @         int constant =  mpiRank( ThComm mpiCommWorld );
  469 @ IFMACRO(privateCreateMat)
  470 &         fespace PhLocalPrivate(ThTab[ 1 - 1], P0);
  471 &         PhLocalPrivate partLocal;
  472 &         partLocal[] = privateDmeshThkhiDef[1];
  473 &          defP1(func2vec) =  initP1(abs(partLocal - constant) < 0.1);
  474 & ENDIFMACRO
  475 @ IFMACRO(!privateCreateMat)
  476 &          defP1(func2vec) =  initP1(abs( partGlobal - constant) < 0.1);
  477 & ENDIFMACRO
  476 @          defP1(func2vec) func2vec  =  initP1(abs( partGlobal - constant) < 0.1) abs( partGlobal - constant) < 0.1 ;
  477 @ 
  478 @     }
  479 @     else if(WhPartPrivate.ndof == ThTab[ 1 - 1].nv && (WhPartPrivate.ndof % ThTab[ 1 - 1].nt) != 0)
  480 @         func2vec[] = khi[];
  481 @     else
  482 @          defP1(func2vec) func2vec  =  initP1(khi) khi ;
  483 @      DTab[ 1 - 1] = func2vec[];
  484 @ IFMACRO(privateDmeshPostProcessD)
  485 &     privateDmeshPostProcessD( DTab[ 1 - 1]);
  486 & ENDIFMACRO
  487 @ IFMACRO(!privateCreatePartition)
  488 & IFMACRO(!privateCreateMat)
  489 & IFMACRO(privateBuildDmesh)
  490 &     fespace PhLocalPrivate(ThTab[ 1 - 1], P0);
  491 &     PhLocalPrivate partLocal;
  492 &     partLocal =  partGlobal;
  493 &     privateDmeshThkhiDef[1].resize(partLocal[].n);
  494 &     privateDmeshThkhiDef[1] = partLocal[];
  495 & ENDIFMACRO
ENDIFMACRO
ENDIFMACRO
  488 @ IFMACRO(!privateCreateMat)
  489 & IFMACRO(privateBuildDmesh)
  490 &     fespace PhLocalPrivate(ThTab[ 1 - 1], P0);
  491 &     PhLocalPrivate partLocal;
  492 &     partLocal =  partGlobal;
  493 &     privateDmeshThkhiDef[1].resize(partLocal[].n);
  494 &     privateDmeshThkhiDef[1] = partLocal[];
  495 & ENDIFMACRO
ENDIFMACRO
  489 @ IFMACRO(privateBuildDmesh)
  490 &     fespace PhLocalPrivate(ThTab[ 1 - 1], P0);
  491 &     PhLocalPrivate partLocal;
  492 &     partLocal =  partGlobal;
  493 &     privateDmeshThkhiDef[1].resize(partLocal[].n);
  494 &     privateDmeshThkhiDef[1] = partLocal[];
  495 & ENDIFMACRO
  490 @     fespace PhLocalPrivate(ThTab[ 1 - 1], P0);
  491 @     PhLocalPrivate partLocal;
  492 @     partLocal =  partGlobal;
  493 @     privateDmeshThkhiDef[1].resize(partLocal[].n);
  494 @     privateDmeshThkhiDef[1] = partLocal[];
  495 @ 
  496 @ 
  496 @ 
  496 @     searchMethod = backupSM;
  497 @ }
  936 @ 
  935 @ IFMACRO(!privateBuildDmesh)
  936 &         partitionPrivate(ThTab,  ThBorderTab, ThGlobal, PhGlobalPrivate, VhGlobalPrivate, partGlobal, mpiRank( ThComm), mpiSize( ThComm),  privateS,  overlap,  1,  prolongation,  DTab,  P1,  intersection,  ThComm,  fakeInterface,  P1,  def,  init,  1)
  937 & ENDIFMACRO
  938 @     }
  939 @     else if(mpiSize( ThComm mpiCommWorld ) == 1) {
  940 @         for(int i =  1 - 1; i > 0; --i) {
  941 @             ThTab[i - 1] = trunc(ThTab[i], 1, split =  privateS);
  942 @             fespace WhLocalRefinedPrivate(ThTab[i - 1],  P1);
  943 @             fespace WhLocalCoarsePrivate(ThTab[i],  P1);
  944 @              prolongation[i - 1] = interpolate(WhLocalRefinedPrivate, WhLocalCoarsePrivate);
  945 @              DTab[i].resize(WhLocalCoarsePrivate.ndof);
  946 @              DTab[i] = 1.0;
  947 @         }
  948 @         if( 1 == 1) {
  949 @ IFMACRO(privateBuildDmesh)
  950 & IFMACRO(privateDmeshN2O)
  951 &             if( privateS > 1)
  952 &                 ThTab[0] = trunc(ThTab[0], 1, split =  privateS, new2old = privateDmeshN2O);
  953 &             else {
  954 &                 privateDmeshN2O.resize(ThTab[0].nt);
  955 &                 privateDmeshN2O = 0:ThTab[0].nt-1;
  956 &             }
  957 & ENDIFMACRO
IFMACRO(!privateDmeshN2O)
  958 &             if( privateS > 1)
  959 &                 ThTab[0] = trunc(ThTab[0], 1, split =  privateS);
  960 & ENDIFMACRO
ENDIFMACRO
  950 @ IFMACRO(privateDmeshN2O)
  951 &             if( privateS > 1)
  952 &                 ThTab[0] = trunc(ThTab[0], 1, split =  privateS, new2old = privateDmeshN2O);
  953 &             else {
  954 &                 privateDmeshN2O.resize(ThTab[0].nt);
  955 &                 privateDmeshN2O = 0:ThTab[0].nt-1;
  956 &             }
  957 & ENDIFMACRO
  958 @ IFMACRO(!privateDmeshN2O)
  959 &             if( privateS > 1)
  960 &                 ThTab[0] = trunc(ThTab[0], 1, split =  privateS);
  961 & ENDIFMACRO
  959 @             if( privateS > 1)
  960 @                 ThTab[0] = trunc(ThTab[0], 1, split =  privateS);
  961 @ 
  962 @ 
  961 @ IFMACRO(!privateBuildDmesh)
  962 &             if( privateS > 1)
  963 &                 ThTab[0] = trunc(ThTab[0], 1, split =  privateS);
  964 & ENDIFMACRO
  965 @         }
  966 @         fespace WhLocalPrivate(ThTab[0],  P1);
  967 @          DTab[0].resize(WhLocalPrivate.ndof);
  968 @          DTab[0] = 1.0;
  969 @     }
  970 @     if(verbosity > 0) {
  971 @         mpiBarrier( ThComm mpiCommWorld );
  972 @         if(mpiRank( ThComm mpiCommWorld ) == 0)
  973 @             cout.scientific << " --- partition of unity built (in " << mpiWtime() - timerPartition << ")" << endl;
  974 @     }
  975 @ }
  974 @     Th = ThTab[0];
  975 @      ThBorder = ThBorderTab[0];
  976 @      privateDmeshThkhi privateDmeshThkhiDef [0].resize(DTab[0].n);
  977 @      privateDmeshThkhi privateDmeshThkhiDef [0] = DTab[0];
  978 @ }
 1150 @ };
  616 @ 
  617 @ 
  613 @ 
  613 @ }
  614 @ 
   78 : 
   79 : createPartition(Th, part[], P0)
  818 @ 
  819 @ 
  820 @ 
  821 @ 
  822 @       
  823 @       
  824 @       
  825 @ 
  826 @ 
  818 @ IFMACRO(!privateDmeshTh)
  819 & DmeshCreate(Th)
  820 & ENDIFMACRO
  821 @ {
  822 @     NewMacro privateCreateMatCheckDmesh()1 EndMacro
  823 @     NewMacro privateCreatePartition() part[] EndMacro
  824 @     MatCreate(Th, privateCreatePartition,  P0)  createMat(Th,  privateCreatePartition,  P0)
  740 @ 
  741 @ 
  742 @ 
  743 @ 
  744 @        /* three-dimensional problem             */
  745 @         /* three-dimensional integral            */
  746 @ 
  747 @ 
  748 @        /* three-dimensional surface problem     */
  749 @         /* two-dimensional integral              */
  750 @ 
  751 @ 
  752 @        /* three-dimensional line problem        */
  753 @         /* one-dimensional integral              */
  754 @ 
  755 @ 
  756 @         /* two-dimensional problem               */
  757 @         /* two-dimensional integral              */
  758 @ 
  759 @ 
  760 @ 
  761 @   
  762 @ 
  763 @ 
  764 @          
  765 @     
  766 @ 
  767 @ 
  768 @   
  769 @  
  770 @  
  771 @  
  772 @   
  773 @   
  774 @   
  775 @   
  776 @ 
  777 @   
  778 @ 
  779 @ 
  780 @   
  781 @ 
  782 @    
  783 @ 
  784 @ 
  785 @ 
  786 @       
  787 @       
  788 @       
  789 @ 
  790 @ 
  791 @ 
  792 @ 
  793 @       
  794 @ 
  795 @ 
  796 @       
  797 @ 
  798 @       
  799 @ 
  800 @ 
  801 @ 
  802 @       
  803 @ 
  804 @      /* not currently implemented */
  805 @ 
  806 @ 
  807 @      /* not currently implemented */
  808 @ 
  809 @ 
  810 @                         
  811 @ 
  812 @  
  813 @       
  814 @     
  815 @       
  816 @     
  817 @ 
  818 @ 
  819 @ 
  820 @     
  821 @         
  822 @ 
  823 @ 
  824 @ 
  825 @ 
  826 @ 
  827 @       
  828 @ 
  829 @ 
  830 @ 
  831 @   
  832 @ 
  833 @ 
  834 @ 
  835 @ 
  836 @ 
  837 @ 
  838 @ 
  839 @ 
  840 @            /* three-dimensional problem             */
  841 @             /* three-dimensional integral            */
  842 @ 
  843 @ 
  844 @            /* three-dimensional surface problem     */
  845 @             /* two-dimensional integral              */
  846 @ 
  847 @ 
  848 @            /* three-dimensional line problem        */
  849 @             /* one-dimensional integral              */
  850 @ 
  851 @ 
  852 @             /* two-dimensional problem               */
  853 @             /* two-dimensional integral              */
  854 @ 
  855 @ 
  856 @       
  857 @       
  858 @ 
  859 @ 
  860 @ 
  740 @ IFMACRO(privateDmeshTh)
  741 & {
  742 & IFMACRO(!meshN)
  743 & IFMACRO(dimension,3)
  744 & NewMacro meshN()mesh3 EndMacro     /* three-dimensional problem             */
  745 & NewMacro intN()int3d EndMacro      /* three-dimensional integral            */
  746 & ENDIFMACRO
IFMACRO(dimension,3S)
  747 & NewMacro meshN()meshS EndMacro     /* three-dimensional surface problem     */
  748 & NewMacro intN()int2d EndMacro      /* two-dimensional integral              */
  749 & ENDIFMACRO
IFMACRO(dimension,3L)
  750 & NewMacro meshN()meshL EndMacro     /* three-dimensional line problem        */
  751 & NewMacro intN()int1d EndMacro      /* one-dimensional integral              */
  752 & ENDIFMACRO
IFMACRO(!meshN)
  753 & NewMacro meshN()mesh EndMacro      /* two-dimensional problem               */
  754 & NewMacro intN()int2d EndMacro      /* two-dimensional integral              */
  755 & ENDIFMACRO
ENDIFMACRO
IFMACRO(!ThComm)
  756 & NewMacro ThComm()mpiCommWorld EndMacro
ENDIFMACRO
IFMACRO(!privateCreateMatCheckDmesh)
  757 & if(Th.nv != privateDmeshThkhiDef[0].n || (privateDmeshThkhiDef[1].n && Th.nt != privateDmeshThkhiDef[1].n)) {
  758 &     DmeshCreate(Th)
  759 & }
  760 & ENDIFMACRO
NewMacro privateCreateMat()1 EndMacro
int[int][int] intersection;
  761 & real[int][int] DTab(1);
  762 & meshN[int] ThTab(1);
  763 & ThTab[0] = Th;
  764 & NewMacro privateDmeshThTab()privateDmeshTh EndMacro
NewMacro privateDmeshThTabkhi()privateDmeshThkhiDef EndMacro
NewMacro privateDmeshThTabintersection()privateDmeshThintersectionDef EndMacro
IFMACRO(!def)
  765 & NewMacro def(i)i EndMacro
ENDIFMACRO
IFMACRO(!init)
  766 & NewMacro init(i)i EndMacro
ENDIFMACRO
if(mpiSize(ThComm) > 1) {
  767 & IFMACRO(ThN2O)
  768 & IFMACRO(ThOriginal)
  769 & IFMACRO(ThRestriction)
  770 &     NewMacro privateDmeshN2O()ThN2O EndMacro
    NewMacro privateDmeshOriginal()ThOriginal EndMacro
    NewMacro privateDmeshRestriction()ThRestriction EndMacro
ENDIFMACRO
ENDIFMACRO
ENDIFMACRO
IFMACRO(!ThPkPart)
  771 &     NewMacro ThPkPart() P0 EndMacro
ENDIFMACRO
IFMACRO(ThCartesianPartitioning)
  772 &     NewMacro privateDmeshCartesianPartitioning() EndMacro
IFMACRO(!dimension)
  773 &     NewMacro dimension()2 EndMacro
ENDIFMACRO
ENDIFMACRO
IFMACRO(ThPostProcessD)
  774 &     NewMacro privateDmeshPostProcessD(arg)ThPostProcessD(arg) EndMacro
IFMACRO(removeZeros,true)
  775 &     exit(105); /* not currently implemented */
  776 & ENDIFMACRO
IFMACRO(trueRestrict,true)
  777 &     exit(105); /* not currently implemented */
  778 & ENDIFMACRO
ENDIFMACRO
    partitionPrivate(ThTab, privateCreateMat, privateCreateMat, privateCreateMat, privateCreateMat, privateCreateMat, mpiRank(ThComm), mpiSize(ThComm), 1, 1, 1, privateCreateMat, DTab,  P0, intersection, ThComm, -111111, ThPkPart, def, init, 1)
  779 & }
  780 & else {
  781 &     fespace WhGlobalPrivate(Th,  P0);
  782 &     DTab[0].resize(WhGlobalPrivate.ndof);
  783 &     DTab[0] = 1;
  784 &     intersection.resize(0);
  785 & IFMACRO(ThN2O)
  786 & IFMACRO(ThOriginal)
  787 & IFMACRO(ThRestriction)
  788 &     ThRestriction.resize(WhGlobalPrivate.ndof);
  789 &     ThRestriction = 0:WhGlobalPrivate.ndof - 1;
  790 & ENDIFMACRO
ENDIFMACRO
ENDIFMACRO
}
  791 & IFMACRO(!privateCreatePartition)
  792 & constructor( privateCreatePartition, DTab[0].n, intersection, DTab[0], communicator = ThComm);
  793 & ENDIFMACRO
IFMACRO(privateCreatePartition)
  794 & privateCreatePartition.resize(DTab[0].n);
  795 & privateCreatePartition = DTab[0];
  796 & ENDIFMACRO
}
  797 & ENDIFMACRO
  741 @ {
  742 @ IFMACRO(!meshN)
  743 & IFMACRO(dimension,3)
  744 & NewMacro meshN()mesh3 EndMacro     /* three-dimensional problem             */
  745 & NewMacro intN()int3d EndMacro      /* three-dimensional integral            */
  746 & ENDIFMACRO
IFMACRO(dimension,3S)
  747 & NewMacro meshN()meshS EndMacro     /* three-dimensional surface problem     */
  748 & NewMacro intN()int2d EndMacro      /* two-dimensional integral              */
  749 & ENDIFMACRO
IFMACRO(dimension,3L)
  750 & NewMacro meshN()meshL EndMacro     /* three-dimensional line problem        */
  751 & NewMacro intN()int1d EndMacro      /* one-dimensional integral              */
  752 & ENDIFMACRO
IFMACRO(!meshN)
  753 & NewMacro meshN()mesh EndMacro      /* two-dimensional problem               */
  754 & NewMacro intN()int2d EndMacro      /* two-dimensional integral              */
  755 & ENDIFMACRO
ENDIFMACRO
  756 @ IFMACRO(!ThComm)
  757 & NewMacro ThComm()mpiCommWorld EndMacro
ENDIFMACRO
  757 @ NewMacro ThComm()mpiCommWorld EndMacro
  758 @ 
  758 @ IFMACRO(!privateCreateMatCheckDmesh)
  759 & if(Th.nv != privateDmeshThkhiDef[0].n || (privateDmeshThkhiDef[1].n && Th.nt != privateDmeshThkhiDef[1].n)) {
  760 &     DmeshCreate(Th)
  761 & }
  762 & ENDIFMACRO
  763 @ NewMacro privateCreateMat()1 EndMacro
  764 @ int[int][int] intersection;
  765 @ real[int][int] DTab(1);
  766 @ meshNmesh3[int] ThTab(1);
  767 @ ThTab[0] = Th;
  768 @ NewMacro privateDmeshThTab()privateDmeshTh EndMacro
  769 @ NewMacro privateDmeshThTabkhi()privateDmeshThkhiDef EndMacro
  770 @ NewMacro privateDmeshThTabintersection()privateDmeshThintersectionDef EndMacro
  771 @ IFMACRO(!def)
  772 & NewMacro def(i)i EndMacro
ENDIFMACRO
  772 @ NewMacro def(i)i EndMacro )  
  773 @ 
  773 @ IFMACRO(!init)
  774 & NewMacro init(i)i EndMacro
ENDIFMACRO
  774 @ NewMacro init(i)i EndMacro )  
  775 @ 
  775 @ if(mpiSize(ThComm mpiCommWorld ) > 1) {
  776 @ IFMACRO(ThN2O)
  777 & IFMACRO(ThOriginal)
  778 & IFMACRO(ThRestriction)
  779 &     NewMacro privateDmeshN2O()ThN2O EndMacro
    NewMacro privateDmeshOriginal()ThOriginal EndMacro
    NewMacro privateDmeshRestriction()ThRestriction EndMacro
ENDIFMACRO
ENDIFMACRO
ENDIFMACRO
  780 @ IFMACRO(!ThPkPart)
  781 &     NewMacro ThPkPart() P0 EndMacro
ENDIFMACRO
  781 @     NewMacro ThPkPart() P0 EndMacro
  782 @ 
  782 @ IFMACRO(ThCartesianPartitioning)
  783 &     NewMacro privateDmeshCartesianPartitioning() EndMacro
IFMACRO(!dimension)
  784 &     NewMacro dimension()2 EndMacro
ENDIFMACRO
ENDIFMACRO
  785 @ IFMACRO(ThPostProcessD)
  786 &     NewMacro privateDmeshPostProcessD(arg)ThPostProcessD(arg) EndMacro
IFMACRO(removeZeros,true)
  787 &     exit(105); /* not currently implemented */
  788 & ENDIFMACRO
IFMACRO(trueRestrict,true)
  789 &     exit(105); /* not currently implemented */
  790 & ENDIFMACRO
ENDIFMACRO
  791 @     partitionPrivate(ThTab, privateCreateMat, privateCreateMat, privateCreateMat, privateCreateMat, privateCreateMat, mpiRank(ThComm), mpiSize(ThComm), 1, 1, 1, privateCreateMat, DTab,  P0, intersection, ThComm, -111111, ThPkPart, def, init, 1) 
   86 @        
   87 @       
   88 @       
   89 @ 
   90 @ 
   91 @     
   92 @     
   93 @      
   94 @      
   95 @     
   96 @            
   97 @                   
   98 @              
   99 @          
  100 @          
  101 @            
  102 @                    
  103 @         
  104 @             
  105 @         
  106 @                         
  107 @          
  108 @               
  109 @             
  110 @                
  111 @                     
  112 @                   
  113 @               
  114 @                  
  115 @         
  116 @     
  117 @       
  118 @ 
  119 @                
  120 @ 
  121 @        
  122 @      
  123 @        
  124 @        
  125 @                
  126 @                
  127 @                
  128 @                  
  129 @     
  130 @     
  131 @           
  132 @       
  133 @ 
  134 @                  
  135 @ 
  136 @        
  137 @        
  138 @                        
  139 @ 
  140 @                                                                                                     
  141 @ 
  142 @                                                                                                                          
  143 @         
  144 @         
  145 @ 
  146 @ 
  147 @ 
  148 @                  
  149 @ 
  150 @        
  151 @        
  152 @                        
  153 @ 
  154 @                                                                                                     
  155 @ 
  156 @                                                                                                                             
  157 @         
  158 @         
  159 @ 
  160 @ 
  161 @     
  162 @            
  163 @            
  164 @         
  165 @           
  166 @         
  167 @           
  168 @     
  169 @ 
  170 @ 
  171 @        
  172 @           
  173 @            
  174 @                
  175 @                       
  176 @                       
  177 @                           
  178 @                     
  179 @                   
  180 @                      
  181 @             
  182 @         
  183 @         
  184 @                      
  185 @                     
  186 @     
  187 @              
  188 @            
  189 @               
  190 @                                     
  191 @               
  192 @                           
  193 @                                    
  194 @                          
  195 @                       
  196 @                        
  197 @                       
  198 @                        
  199 @                          
  200 @                 
  201 @             
  202 @                          
  203 @                         
  204 @         
  205 @     
  206 @         
  207 @ 
  208 @   
  209 @        
  210 @     
  211 @ 
  212 @ 
  213 @       
  214 @     
  215 @ 
  216 @             
  217 @      
  218 @       
  219 @      
  220 @            
  221 @          
  222 @           
  223 @           
  224 @           
  225 @     
  226 @     
  227 @           
  228 @     
  229 @        
  230 @     
  231 @              
  232 @         
  233 @         
  234 @                 
  235 @                    
  236 @                
  237 @                 
  238 @                          
  239 @                       
  240 @                         
  241 @                     
  242 @                             
  243 @                       
  244 @                 
  245 @             
  246 @         
  247 @     
  248 @        
  249 @         
  250 @           
  251 @     
  252 @         
  253 @ 
  254 @ 
  255 @       
  256 @          
  257 @         
  258 @     
  259 @       
  260 @         
  261 @ 
  262 @ 
  263 @ 
  264 @     
  265 @             
  266 @           
  267 @         
  268 @             
  269 @     
  270 @ 
  271 @ 
  272 @ 
  273 @ 
  274 @ 
  275 @     
  276 @           
  277 @ 
  278 @      
  279 @ 
  280 @      
  281 @           
  282 @         
  283 @ 
  284 @                   
  285 @                 
  286 @              
  287 @              
  288 @                 
  289 @                        
  290 @ 
  291 @                
  292 @              
  293 @                              
  294 @ 
  295 @                                                                                                              
  296 @ 
  297 @                                                                                                                                      
  298 @ 
  299 @ 
  300 @                        
  301 @                 
  302 @                   
  303 @             
  304 @             
  305 @ 
  306 @             
  307 @ 
  308 @                   
  309 @                   
  310 @ 
  311 @ 
  312 @                   
  313 @                   
  314 @ 
  315 @                           
  316 @             
  317 @         
  318 @     
  319 @ 
  320 @             
  321 @                
  322 @                     
  323 @                         
  324 @                           
  325 @             
  326 @               
  327 @           
  328 @           
  329 @            
  330 @                
  331 @                  
  332 @          
  333 @            
  334 @             
  335 @            
  336 @                 
  337 @                   
  338 @              
  339 @                
  340 @                 
  341 @               
  342 @         
  343 @           
  344 @           
  345 @          
  346 @           
  347 @         
  348 @           
  349 @     
  350 @     
  351 @           
  352 @      
  353 @               
  354 @            
  355 @                 
  356 @                
  357 @                     
  358 @                             
  359 @                           
  360 @                 
  361 @             
  362 @         
  363 @     
  364 @            
  365 @           
  366 @          
  367 @            
  368 @          
  369 @         
  370 @               
  371 @              
  372 @              
  373 @                     
  374 @                   
  375 @                    
  376 @                   
  377 @                      
  378 @             
  379 @              
  380 @              
  381 @ 
  382 @                        
  383 @ 
  384 @ 
  385 @             
  386 @                  
  387 @                            
  388 @                 
  389 @                   
  390 @                 
  391 @                   
  392 @             
  393 @ 
  394 @               
  395 @               
  396 @                       
  397 @                    
  398 @                    
  399 @                       
  400 @                              
  401 @                        
  402 @                           
  403 @                           
  404 @                          
  405 @                           
  406 @                                    
  407 @                     
  408 @                      
  409 @                           
  410 @                             
  411 @                     
  412 @                 
  413 @             
  414 @         
  415 @         
  416 @          
  417 @          
  418 @            
  419 @                 
  420 @                
  421 @                
  422 @                    
  423 @                     
  424 @                       
  425 @                 
  426 @             
  427 @              
  428 @                 
  429 @                    
  430 @                   
  431 @                      
  432 @                 
  433 @                   
  434 @                      
  435 @             
  436 @         
  437 @         
  438 @             
  439 @           
  440 @                 
  441 @                
  442 @                
  443 @                    
  444 @                     
  445 @                       
  446 @                 
  447 @             
  448 @              
  449 @ 
  450 @                   
  451 @                   
  452 @ 
  453 @ 
  454 @                   
  455 @                   
  456 @ 
  457 @                         
  458 @                   
  459 @                      
  460 @                     
  461 @                       
  462 @                       
  463 @                     
  464 @             
  465 @         
  466 @           
  467 @         
  468 @           
  469 @         
  470 @               
  471 @                
  472 @                  
  473 @                
  474 @                             
  475 @         
  476 @     
  477 @ 
  478 @ 
  479 @       
  480 @                   
  481 @                  
  482 @                 
  483 @                      
  484 @                          
  485 @                                   
  486 @         
  487 @ 
  488 @ 
  489 @ 
  490 @         
  491 @ 
  492 @      
  493 @ 
  494 @ 
  495 @ 
  496 @      
  497 @       
  498 @ 
  499 @         
  500 @      
  501 @       
  502 @                  
  503 @            
  504 @ 
  505 @             
  506 @          
  507 @           
  508 @               
  509 @ 
  510 @ 
  511 @               
  512 @ 
  513 @     
  514 @                  
  515 @           
  516 @     
  517 @           
  518 @         
  519 @ 
  520 @       
  521 @ 
  522 @ 
  523 @ 
  524 @ 
  525 @         
  526 @      
  527 @       
  528 @     
  529 @       
  530 @ 
  531 @ 
  532 @ 
  533 @       
  534 @  {
   86 @     int backupSM = searchMethod;
   87 @     searchMethod = 1;
   88 @     assert( 1 >= 1);
   89 @ IFMACRO(!privateCreatePartition)
   90 & IFMACRO(!privateCreateMat)
   91 &      intersection.resize(1);
   92 &      intersection[0].resize(0);
   93 &      privateCreateMat supp;
   94 &      privateCreateMat suppSmooth;
   95 &     {
   96 &         int constant =  mpiRank(ThComm);
   97 &         for[i, value : supp[]] value = abs( privateCreateMat[][i] - constant) < 0.1;
   98 &         AddLayers( privateCreateMat, supp[], 2 *  1, suppSmooth[]);
   99 &         int[int] n2o;
  100 &         meshN neighbors;
  101 &         bool connected = false;
  102 &         for[i, value : suppSmooth[]] if(abs(value - 0.5) < 0.5) connected = true;
  103 &         if(!connected)
  104 &             n2o.resize(0);
  105 &         else
            neighbors = trunc( privateCreateMat, suppSmooth > 0.001 && suppSmooth < 0.999, new2old = n2o);
  106 &         int[int] partOverlap(n2o.n);
  107 &         for[i, value : n2o] partOverlap[i] =  privateCreateMat[][value];
  108 &         Unique(partOverlap,  intersection[0], remove = constant);
  109 &         if( 1 > 1 &&  1 <= 1) {
  110 &              privateCreateMat = trunc( privateCreateMat, suppSmooth > 0.001, split =  1);
  111 &             supp = abs( privateCreateMat - constant) < 0.1;
  112 &             suppSmooth = 0;
  113 &             AddLayers( privateCreateMat, supp[], 2 *  1, suppSmooth[]);
  114 &         }
  115 &     }
  116 &     int[int] n2oGlobalPrivate, n2oNeighbor;
  117 & IFMACRO(!privateDmeshCartesianPartitioning)
  118 &      privateCreateMat = trunc( privateCreateMat, suppSmooth > 0.001, label = 9999, new2old = n2oGlobalPrivate);
  119 & ENDIFMACRO
    real eps =  privateCreateMat.measure;
  120 &     real[int] epsTab( intersection[0].n);
  121 &     mpiRequest[int] rq(2 *  intersection[0].n);
  122 &     if(mpiSize( ThComm) ==  mpiSize(ThComm)) {
  123 &         for(int j = 0; j <  intersection[0].n; ++j)
  124 &             Irecv(processor( intersection[0][j],  ThComm, rq[j]), epsTab[j]);
  125 &         for(int j = 0; j <  intersection[0].n; ++j)
  126 &             Isend(processor( intersection[0][j],  ThComm, rq[ intersection[0].n + j]), eps);
  127 &     }
  128 &     else
        epsTab = 1.0e+30;
  129 &     suppSmooth = suppSmooth;
  130 & IFMACRO(!privateDmeshN2O)
  131 &     ThTab[ 1 - 1] = trunc( privateCreateMat, suppSmooth > 0.501, label =  -111111, new2old = n2oNeighbor);
  132 & IFMACRO(privateDmeshCartesianPartitioning)
  133 &     real[int] bb(2 * dimension);
  134 &     boundingbox(ThTab[ 1 - 1], bb);
  135 &     ThTab[ 1 - 1] = trunc( privateCreateMat, x > bb[0] && x < bb[1] && y > bb[2] && y < bb[3]
  136 & IFMACRO(dimension,3)
  137 &                                                                                              && z > bb[4] && z < bb[5]
  138 & ENDIFMACRO
                                                                                                                      , label =  -111111);
  139 &      privateCreateMat = ThTab[ 1 - 1];
  140 &     n2oNeighbor = 0: privateCreateMat.nt - 1;
  141 & ENDIFMACRO
ENDIFMACRO
IFMACRO(privateDmeshN2O)
  142 &     ThTab[ 1 - 1] = trunc( privateCreateMat, suppSmooth > 0.501, label =  -111111, new2old = privateDmeshN2O);
  143 & IFMACRO(privateDmeshCartesianPartitioning)
  144 &     real[int] bb(2 * dimension);
  145 &     boundingbox(ThTab[ 1 - 1], bb);
  146 &     ThTab[ 1 - 1] = trunc( privateCreateMat, x > bb[0] && x < bb[1] && y > bb[2] && y < bb[3]
  147 & IFMACRO(dimension,3)
  148 &                                                                                              && z > bb[4] && z < bb[5]
  149 & ENDIFMACRO
                                                                                                                      , label =  -111111, new2old = privateDmeshN2O);
  150 &      privateCreateMat = ThTab[ 1 - 1];
  151 &     n2oNeighbor = 0: privateCreateMat.nt - 1;
  152 & ENDIFMACRO
IFMACRO(!privateDmeshCartesianPartitioning)
  153 &     {
  154 &         int[int] backup = privateDmeshN2O;
  155 &         int[int] new = n2oGlobalPrivate(privateDmeshN2O);
  156 &         privateDmeshN2O.resize(new.n);
  157 &         privateDmeshN2O = new;
  158 &         n2oNeighbor.resize(backup.n);
  159 &         n2oNeighbor = backup;
  160 &     }
  161 & ENDIFMACRO
ENDIFMACRO
    if( 1 > 1) {
  162 &          privateCreateMat.resize( 1 - 1);
  163 &         if( 1 > 1) {
  164 &             meshN globalNameRefined =  privateCreateMat;
  165 &             for(int i =  1 - 1; i > 0; --i) {
  166 &                 globalNameRefined = trunc(globalNameRefined, 1, split =  1);
  167 &                 ThTab[i - 1] = trunc(globalNameRefined, suppSmooth > 0.501, label =  -111111);
  168 &                 fespace WhLocalRefinedPrivate(ThTab[i - 1],  P0);
  169 &                 fespace WhLocalCoarsePrivate(ThTab[i],  P0);
  170 &                  privateCreateMat[i - 1] = interpolate(WhLocalRefinedPrivate, WhLocalCoarsePrivate);
  171 &             }
  172 &         }
  173 &         else
            for(int i =  1 - 1; i > 0; --i)
  174 &                 ThTab[i - 1] = ThTab[i];
  175 &     }
  176 &     if(!removeZeros && ( -111111 != -111111 ||  1 != 1)) {
  177 &         if(suppSmooth[].min < 0.501) {
  178 &             supp = supp;
  179 &              privateCreateMat[ 1 - 1] = trunc( privateCreateMat, (suppSmooth > ( 1 - 0.999) / real(2 *  1)) && (suppSmooth < 0.501), label = (abs( -111111) + 1) * 100);
  180 &             if( 1 > 1)
  181 &                 for(int i =  1 - 2; i >= 0; --i) {
  182 &                      privateCreateMat[i] = trunc( privateCreateMat[i + 1], 1, split =  1, label = (abs( -111111) + 1) * 100);
  183 &                     meshN tempRefined = ThTab[i] +  privateCreateMat[i];
  184 &                     fespace PhRefinedPrivate(tempRefined, P0);
  185 &                     PhRefinedPrivate suppRefined = supp;
  186 &                     fespace VhBorderRefinedPrivate( privateCreateMat[i], P1);
  187 &                     VhBorderRefinedPrivate suppBorder = suppRefined;
  188 &                      privateCreateMat[i] = trunc( privateCreateMat[i], suppBorder > 0.01);
  189 &                 }
  190 &             else
                for(int i =  1 - 2; i >= 0; --i)
  191 &                      privateCreateMat[i] =  privateCreateMat[i + 1];
  192 &         }
  193 &     }
  194 &     fespace VhLocalPrivate(ThTab[ 1 - 1], P1);
  195 & IFMACRO(!privateDmeshThTab)
  196 & NewMacro privateDmeshThintersectionDef()partitionIntersectionTab EndMacro
    real[int][int] partitionIntersectionTab(1 +  intersection[0].n);
  197 &     privateDmeshThintersectionDef[0].resize( intersection[0].n);
  198 & ENDIFMACRO
IFMACRO(privateBuildDmesh)
  199 &     privateDmeshThintersectionDef.resize(1 +  intersection[0].n);
  200 &     privateDmeshThintersectionDef[0].resize( intersection[0].n);
  201 & ENDIFMACRO
    VhLocalPrivate khi = max(2 * suppSmooth - 1.0, 0.0);
  202 &     VhLocalPrivate sum;
  203 &     sum[] = khi[];
  204 &      privateCreateMat phi;
  205 &     if(n2oGlobalPrivate.n ==  privateCreateMat.nt &&  1 == 1) {
  206 &         real[int] restrictionPart(n2oGlobalPrivate.n);
  207 &         restrictionPart =  privateCreateMat[](n2oGlobalPrivate);
  208 &          privateCreateMat = 0.0;
  209 &          privateCreateMat[] = restrictionPart;
  210 &     }
  211 &     else
         privateCreateMat =  privateCreateMat;
  212 &     n2oGlobalPrivate.resize(0);
  213 &     int numberIntersection = 0;
  214 &     {
  215 &         int[int] restriction = restrict(VhLocalPrivate,  privateCreateMat, n2oNeighbor);
  216 &         n2oNeighbor.resize(0);
  217 &         mpiWaitAll(rq);
  218 &         for(int i = 0; i <  intersection[0].n; ++i) {
  219 &              privateCreateMat suppPartition = abs( privateCreateMat -  intersection[0][i]) < 0.1;
  220 &             AddLayers( privateCreateMat, suppPartition[],  1, phi[]);
  221 &             if(min(eps, epsTab[i]) > 0.0) {
  222 &                 if(intN( privateCreateMat, qforder = 2)(phi) / min(eps, epsTab[i]) > 1.0e-10) {
  223 &                     privateDmeshThintersectionDef[1 + numberIntersection].resize(restriction.n);
  224 &                     privateDmeshThintersectionDef[1 + numberIntersection] = phi[](restriction);
  225 &                     if(!trueRestrict)
  226 &                         sum[] += privateDmeshThintersectionDef[1 + numberIntersection];
  227 &                      intersection[0][numberIntersection++] =  intersection[0][i];
  228 &                 }
  229 &             }
  230 &         }
  231 &     }
  232 &     if(numberIntersection !=  intersection[0].n) {
  233 &          intersection[0].resize(numberIntersection);
  234 &         privateDmeshThintersectionDef.resize(1 + numberIntersection);
  235 &     }
  236 &      intersection.resize(1 +  1 * numberIntersection);
  237 & ENDIFMACRO
IFMACRO(privateCreateMat)
  238 &     assert( 1 == 1);
  239 &     int numberIntersection = privateDmeshThintersectionDef.n - 1;
  240 &      intersection.resize(1 +  1 * numberIntersection);
  241 &      intersection[0].resize(numberIntersection);
  242 &      intersection[0] = lround(privateDmeshThintersectionDef[0]);
  243 &     fespace VhLocalPrivate(ThTab[ 1 - 1], P1);
  244 & IFMACRO(privateDmeshN2O)
  245 & IFMACRO(privateDmeshOriginal)
  246 & IFMACRO(privateDmeshRestriction)
  247 &     {
  248 &         fespace WhLocalPrivate(ThTab[ 1 - 1],  P0);
  249 &         fespace WhOriginalPrivate(privateDmeshOriginal,  P0);
  250 &         privateDmeshRestriction.resize(WhOriginalPrivate.ndof);
  251 &         privateDmeshRestriction = restrict(WhLocalPrivate, WhOriginalPrivate, privateDmeshN2O);
  252 &     }
  253 & ENDIFMACRO
ENDIFMACRO
ENDIFMACRO
ENDIFMACRO
IFMACRO(privateBuildDmesh)
  254 &     privateDmeshThintersectionDef[0].resize(numberIntersection);
  255 &     for[i, value :  intersection[0]] privateDmeshThintersectionDef[0][i] = value;
  256 & ENDIFMACRO
    meshN[int] meshIntersection(numberIntersection);
  257 & IFMACRO(!privateCreateMat)
  258 &     int[int][int] n2oIntersection(0);
  259 &     if(trueRestrict && mpiSize( ThComm) ==  mpiSize(ThComm) && removeZeros)
  260 &         n2oIntersection.resize(numberIntersection);
  261 & ENDIFMACRO
    for(int j = 0; j < ( 1 == 1 ? 1 :  1); ++j) {
  262 &         for(int i = 0; i < numberIntersection; ++i) {
  263 &             int[int] n2o;
  264 &             VhLocalPrivate partitionIntersection;
  265 &             partitionIntersection[] = privateDmeshThintersectionDef[1 + i];
  266 &             meshIntersection[i] = trunc(ThTab[j], partitionIntersection > 1.0e-6, new2old = n2o, label = 9999);
  267 & IFMACRO(privateDmeshCartesianPartitioning)
  268 &             real[int] bb(2 * dimension);
  269 &             boundingbox(meshIntersection[i], bb);
  270 &             meshIntersection[i] = trunc(ThTab[j], x > bb[0] && x < bb[1] && y > bb[2] && y < bb[3]
  271 & IFMACRO(dimension,3)
  272 &                                                                                                       && z > bb[4] && z < bb[5]
  273 & ENDIFMACRO
                                                                                                                               , new2old = n2o, label = 9999);
  274 & ENDIFMACRO
IFMACRO(!privateCreateMat)
  275 &             if(j == 0 && trueRestrict && mpiSize( ThComm) ==  mpiSize(ThComm) && removeZeros) {
  276 &                 n2oIntersection[i].resize(n2o.n);
  277 &                 n2oIntersection[i] = n2o;
  278 &             }
  279 &             if(!removeZeros)
  280 & ENDIFMACRO
            {
  281 & IFMACRO(vectorialfe)
  282 &                 fespace singleComponentWhPrivate(ThTab[j], vectorialfe);
  283 &                 fespace WhIntersectionPrivate(meshIntersection[i], vectorialfe);
  284 & ENDIFMACRO
IFMACRO(!vectorialfe)
  285 &                 fespace singleComponentWhPrivate(ThTab[j],  P0);
  286 &                 fespace WhIntersectionPrivate(meshIntersection[i],  P0);
  287 & ENDIFMACRO
                 intersection[1 + i + j * numberIntersection] = restrict(WhIntersectionPrivate, singleComponentWhPrivate, n2o);
  288 &             }
  289 &         }
  290 &     }
  291 & IFMACRO(!privateCreateMat)
  292 &     if( 1 == 1 &&  1 > 1 && !removeZeros)
  293 &         for(int j = 1; j <  1; ++j)
  294 &             for(int i = 0; i < numberIntersection; ++i) {
  295 &                  intersection[1 + i + j * numberIntersection].resize( intersection[1 + i].n);
  296 &                  intersection[1 + i + j * numberIntersection] =  intersection[1 + i];
  297 &             }
  298 &     for(int i = 0; i <  1 - 1; ++i) {
  299 &         fespace VhRefinedPrivate(ThTab[i], P1);
  300 &         fespace PhRefinedPrivate(ThTab[i], P0);
  301 &         PhRefinedPrivate partRefined =  privateCreateMat;
  302 &         PhRefinedPrivate supp = abs(partRefined -  mpiRank(ThComm)) < 0.1;
  303 &         varf vSupp(uPrivate, vPrivate) = intN(ThTab[i], qforder = 1)(supp * vPrivate);
  304 &         VhRefinedPrivate khiL;
  305 &         khiL[] = vSupp(0, VhRefinedPrivate);
  306 &         khiL = khiL > 0.0;
  307 &         VhRefinedPrivate sum = khiL;
  308 &         for(int j = 0; j < numberIntersection; ++j) {
  309 &             supp = abs(partRefined -  intersection[0][j]) < 0.1;
  310 &             VhRefinedPrivate phiL;
  311 &             phiL[] = vSupp(0, VhRefinedPrivate);
  312 &             phiL = phiL > 0.0;
  313 &             sum[] += phiL[];
  314 &         }
  315 &         khiL[] ./= sum[];
  316 &         fespace WhRefinedPrivate(ThTab[i],  ThPkPart);
  317 &         WhRefinedPrivate  def(func2vec);
  318 &          def(func2vec) =  init(khiL);
  319 &          DTab[i].resize(WhRefinedPrivate.ndof);
  320 &          DTab[i] = func2vec[];
  321 &     }
  322 &     if(!trueRestrict)
  323 &         khi[] ./= sum[];
  324 &     else {
  325 &         khi = abs( privateCreateMat -  mpiRank(ThComm)) < 0.1;
  326 &         VhLocalPrivate sigma =  privateCreateMat;
  327 &         for(int i = 0; i < numberIntersection; ++i) {
  328 &             if( mpiRank(ThComm) <  intersection[0][i]) {
  329 &                 for[j, value : khi[]] {
  330 &                     if(value > 0.9 && abs(sigma[][j] -  intersection[0][i]) < 0.1)
  331 &                         value = 0.0;
  332 &                 }
  333 &             }
  334 &         }
  335 &     }
  336 &     if(trueRestrict && mpiSize( ThComm) ==  mpiSize(ThComm) && removeZeros) {
  337 &         assert( 1 == 1);
  338 &         meshN ThIntersection;
  339 &         mpiRequest[int] rq(2 * numberIntersection);
  340 &         int[int] skip(0);
  341 &         {
  342 &             fespace PhIntersectionPrivate(ThIntersection, P0);
  343 &             PhIntersectionPrivate[int] recv(numberIntersection);
  344 &             PhIntersectionPrivate[int] send(numberIntersection);
  345 &             for(int i = 0; i < numberIntersection; ++i) {
  346 &                 ThIntersection = meshIntersection[i];
  347 &                 Irecv(processor( intersection[0][i],  ThComm, rq[i]), recv[i][]);
  348 &                 send[i] = khi;
  349 &                 Isend(processor( intersection[0][i],  ThComm, rq[numberIntersection + i]), send[i][]);
  350 &             }
  351 &             real[int] tmpRemove(ThTab[0].nt);
  352 &             int[int] n2oRemove;
  353 & IFMACRO(!privateDmeshN2O)
  354 &             ThTab[0] = trunc(ThTab[0], khi > 1.0e-6, label = 9999, new2old = n2oRemove);
  355 & ENDIFMACRO
IFMACRO(privateDmeshN2O)
  356 &             {
  357 &                 int[int] n2oFilter;
  358 &                 ThTab[0] = trunc(ThTab[0], khi > 1.0e-6, label = 9999, new2old = n2oRemove);
  359 &                 n2oFilter.resize(n2oRemove.n);
  360 &                 n2oFilter = privateDmeshN2O(n2oRemove);
  361 &                 privateDmeshN2O.resize(n2oFilter.n);
  362 &                 privateDmeshN2O = n2oFilter;
  363 &             }
  364 & ENDIFMACRO
            khi = khi;
  365 &             fespace PhLocalPrivate(ThTab[0], P0);
  366 &             for(int k = 0; k < 2 * numberIntersection; ++k) {
  367 &                 int i = mpiWaitAny(rq);
  368 &                 if(i < numberIntersection) {
  369 &                     ThIntersection = meshIntersection[i];
  370 &                     PhIntersectionPrivate  intersection = send[i] > 1.0e-6 && recv[i] > 1.0e-6;
  371 &                     if( intersection[].l2 > 1.0e-6) {
  372 &                         tmpRemove = 0.0;
  373 &                         tmpRemove(n2oIntersection[i]) =  intersection[];
  374 &                         PhLocalPrivate afterTrunc;
  375 &                         afterTrunc[] = tmpRemove(n2oRemove);
  376 &                         meshIntersection[i] = trunc(ThTab[0], afterTrunc > 1.0e-6, label = 9999, new2old = n2oIntersection[i]);
  377 &                     }
  378 &                     else {
  379 &                         skip.resize(skip.n + 1);
  380 &                         skip[skip.n - 1] = i;
  381 &                     }
  382 &                 }
  383 &             }
  384 &         }
  385 &         skip.sort;
  386 &         real[int][int] recv(numberIntersection);
  387 &         real[int][int] send(numberIntersection);
  388 &         int j = 0;
  389 &         for(int i = 0; i < numberIntersection; ++i) {
  390 &             bool skipped = false;
  391 &             if(j < skip.n) {
  392 &                 if(skip[j] == i) {
  393 &                     ++j;
  394 &                     skipped = true;
  395 &                 }
  396 &             }
  397 &             if(!skipped) {
  398 &                 recv[i].resize(meshIntersection[i].nv);
  399 &                 Irecv(processor( intersection[0][i],  ThComm, rq[i]), recv[i]);
  400 &                 fespace VhIntersectionPrivate(meshIntersection[i], P1);
  401 &                 int[int] restriction = restrict(VhIntersectionPrivate, VhLocalPrivate, n2oIntersection[i]);
  402 &                 send[i].resize(meshIntersection[i].nv);
  403 &                 send[i] = khi[](restriction);
  404 &                 Isend(processor( intersection[0][i],  ThComm, rq[numberIntersection + i]), send[i]);
  405 &             }
  406 &         }
  407 &         mpiWaitAll(rq);
  408 &          intersection.resize(1 + numberIntersection - skip.n);
  409 &         j = 0;
  410 &         for(int i = 0; i < numberIntersection; ++i) {
  411 &             bool skipped = false;
  412 &             if(j < skip.n) {
  413 &                 if(skip[j] == i) {
  414 &                     ++j;
  415 &                     skipped = true;
  416 &                 }
  417 &             }
  418 &             if(!skipped) {
  419 & IFMACRO(vectorialfe)
  420 &                 fespace singleComponentWhPrivate(ThTab[0], vectorialfe);
  421 &                 fespace WhIntersectionPrivate(meshIntersection[i], vectorialfe);
  422 & ENDIFMACRO
IFMACRO(!vectorialfe)
  423 &                 fespace singleComponentWhPrivate(ThTab[0],  P0);
  424 &                 fespace WhIntersectionPrivate(meshIntersection[i],  P0);
  425 & ENDIFMACRO
                 intersection[1 + i - j] = restrict(WhIntersectionPrivate, singleComponentWhPrivate, n2oIntersection[i]);
  426 &                 fespace VhIntersectionPrivate(meshIntersection[i], P1);
  427 &                 int[int] restriction = restrict(VhIntersectionPrivate, VhLocalPrivate, n2oIntersection[i]);
  428 &                 privateDmeshThintersectionDef[1 + i - j].resize(VhLocalPrivate.ndof);
  429 &                 privateDmeshThintersectionDef[1 + i - j] = 0.0;
  430 &                 privateDmeshThintersectionDef[1 + i - j](restriction) = recv[i];
  431 &                  intersection[0][i - j] =  intersection[0][i];
  432 &             }
  433 &         }
  434 &         numberIntersection -= skip.n;
  435 &          intersection[0].resize(numberIntersection);
  436 &         privateDmeshThintersectionDef.resize(1 + numberIntersection);
  437 &         privateDmeshThintersectionDef[0].resize(numberIntersection);
  438 &         for[i, value :  intersection[0]] privateDmeshThintersectionDef[0][i] = value;
  439 &         if( -111111 != -111111 ||  1 != 1) {
  440 &              privateCreateMat suppPartition = khi > 0.1;
  441 &             AddLayers( privateCreateMat, suppPartition[], 1, phi[]);
  442 &              privateCreateMat[0] = trunc( privateCreateMat, phi > 0.001 && phi < 0.501, label = (abs( -111111) + 1) * 100);
  443 &         }
  444 &     }
  445 & ENDIFMACRO
IFMACRO(vectorialfe)
  446 &     if( 1 > 1)
  447 &         for(int i = 0; i <  intersection.n - 1; ++i) {
  448 &             int n =  intersection[1 + i].n;
  449 &              intersection[1 + i].resize(n *  1);
  450 &             for(int j = n - 1; j != -1; --j)
  451 &                 for(int k =  1 - 1; k != -1; --k)
  452 &                      intersection[1 + i][j *  1 + k] =  intersection[1 + i][j] *  1 + k;
  453 &         }
  454 & ENDIFMACRO
ENDIFMACRO
  455 @ IFMACRO(privateCreatePartition)
  456 &     fespace VhLocalPrivate(ThTab[ 1 - 1], P1);
  457 & IFMACRO(!privateCreateMat)
  458 &     VhLocalPrivate khi;
  459 & ENDIFMACRO
ENDIFMACRO
  456 @     fespace VhLocalPrivate(ThTab[ 1 - 1], P1);
  457 @ IFMACRO(!privateCreateMat)
  458 &     VhLocalPrivate khi;
  459 & ENDIFMACRO
  460 @ 
  460 @ IFMACRO(privateCreateMat)
  461 &     VhLocalPrivate khi;
  462 &     khi[] = privateDmeshThkhiDef[0];
  463 & ENDIFMACRO
  461 @     VhLocalPrivate khi;
  462 @     khi[] = privateDmeshThkhiDef[0];
  463 @ 
  464 @     fespace WhPartPrivate(ThTab[ 1 - 1],  ThPkPart   P0 );
  465 @     WhPartPrivate  def(func2vec) func2vec ;
  466 @      DTab[ 1 - 1].resize(WhPartPrivate.ndof);
  467 @     if((WhPartPrivate.ndof % ThTab[ 1 - 1].nt) == 0 && WhPartPrivate.ndof != ThTab[ 1 - 1].nv) {
  468 @         int constant =  mpiRank(ThComm mpiCommWorld );
  469 @ IFMACRO(privateCreateMat)
  470 &         fespace PhLocalPrivate(ThTab[ 1 - 1], P0);
  471 &         PhLocalPrivate partLocal;
  472 &         partLocal[] = privateDmeshThkhiDef[1];
  473 &          def(func2vec) =  init(abs(partLocal - constant) < 0.1);
  474 & ENDIFMACRO
  470 @         fespace PhLocalPrivate(ThTab[ 1 - 1], P0);
  471 @         PhLocalPrivate partLocal;
  472 @         partLocal[] = privateDmeshThkhiDef[1];
  473 @          def(func2vec) func2vec  =  init(abs(partLocal - constant) < 0.1) abs(partLocal - constant) < 0.1 ;
  474 @ 
  475 @ IFMACRO(!privateCreateMat)
  476 &          def(func2vec) =  init(abs( privateCreateMat - constant) < 0.1);
  477 & ENDIFMACRO
  478 @     }
  479 @     else if(WhPartPrivate.ndof == ThTab[ 1 - 1].nv && (WhPartPrivate.ndof % ThTab[ 1 - 1].nt) != 0)
  480 @         func2vec[] = khi[];
  481 @     else
  482 @          def(func2vec) func2vec  =  init(khi) khi ;
  483 @      DTab[ 1 - 1] = func2vec[];
  484 @ IFMACRO(privateDmeshPostProcessD)
  485 &     privateDmeshPostProcessD( DTab[ 1 - 1]);
  486 & ENDIFMACRO
  487 @ IFMACRO(!privateCreatePartition)
  488 & IFMACRO(!privateCreateMat)
  489 & IFMACRO(privateBuildDmesh)
  490 &     fespace PhLocalPrivate(ThTab[ 1 - 1], P0);
  491 &     PhLocalPrivate partLocal;
  492 &     partLocal =  privateCreateMat;
  493 &     privateDmeshThkhiDef[1].resize(partLocal[].n);
  494 &     privateDmeshThkhiDef[1] = partLocal[];
  495 & ENDIFMACRO
ENDIFMACRO
ENDIFMACRO
  496 @     searchMethod = backupSM;
  497 @ }
  792 @ }
  793 @ else {
  794 @     fespace WhGlobalPrivate(Th,  P0);
  795 @     DTab[0].resize(WhGlobalPrivate.ndof);
  796 @     DTab[0] = 1;
  797 @     intersection.resize(0);
  798 @ IFMACRO(ThN2O)
  799 & IFMACRO(ThOriginal)
  800 & IFMACRO(ThRestriction)
  801 &     ThRestriction.resize(WhGlobalPrivate.ndof);
  802 &     ThRestriction = 0:WhGlobalPrivate.ndof - 1;
  803 & ENDIFMACRO
ENDIFMACRO
ENDIFMACRO
  804 @ }
  805 @ IFMACRO(!privateCreatePartition)
  806 & constructor( privateCreatePartition, DTab[0].n, intersection, DTab[0], communicator = ThComm);
  807 & ENDIFMACRO
  808 @ IFMACRO(privateCreatePartition)
  809 & privateCreatePartition.resize(DTab[0].n);
  810 & privateCreatePartition = DTab[0];
  811 & ENDIFMACRO
  809 @ privateCreatePartition   part[] .resize(DTab[0].n);
  810 @ privateCreatePartition   part[]  = DTab[0];
  811 @ 
  812 @ }
  813 @ 
  798 @ IFMACRO(!privateDmeshTh)
  799 & DmeshCreate(Th)
  800 & {
  801 & IFMACRO(!meshN)
  802 & IFMACRO(dimension,3)
  803 &     NewMacro meshN()mesh3 EndMacro     /* three-dimensional problem             */
  804 &     NewMacro intN()int3d EndMacro      /* three-dimensional integral            */
  805 & ENDIFMACRO
IFMACRO(dimension,3S)
  806 &     NewMacro meshN()meshS EndMacro     /* three-dimensional surface problem     */
  807 &     NewMacro intN()int2d EndMacro      /* two-dimensional integral              */
  808 & ENDIFMACRO
IFMACRO(dimension,3L)
  809 &     NewMacro meshN()meshL EndMacro     /* three-dimensional line problem        */
  810 &     NewMacro intN()int1d EndMacro      /* one-dimensional integral              */
  811 & ENDIFMACRO
IFMACRO(!meshN)
  812 &     NewMacro meshN()mesh EndMacro      /* two-dimensional problem               */
  813 &     NewMacro intN()int2d EndMacro      /* two-dimensional integral              */
  814 & ENDIFMACRO
ENDIFMACRO
    NewMacro privateCreateMatCheckDmesh()1 EndMacro
    MatCreate(Th,  privateCreatePartition,  P0)
  815 & }
  816 & ENDIFMACRO
  817 @ 
  825 @ }
  826 @ 
   80 : 
   81 : int[int] n2o;
   82 : ThNo = trunc(Th, abs(part - 1.0) < 1e-1, new2old = n2o);
   83 : 
   84 : // -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
   85 : // (1) DEFINING
   86 : // -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
   87 : 
   88 : macro dofAll()Vh.ndof * cardTheta//// dof of FEM * number of conductor-groups
   89 : 
   90 : fespace Vh(Th, Pk);// Finite element space
   91 : 
   92 : Vh uh; real[int] U(dofAll  Vh.ndof * cardTheta);// Solution function and vector
   93 : 
   94 : Vh wh; real[int] W(dofAll  Vh.ndof * cardTheta), L(dofAll  Vh.ndof * cardTheta);// Boundary function and vectors
   95 : 
   96 : Mat A(Vh.ndof); real[int] l(Vh.ndof);// Stiffness matrix and rhs
   97 : 
   98 : // -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
   99 : // (2) SOLVING AND FILLING
  100 : // -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
  101 : 
  102 : fillA /* A = Stiffness Matrix */ 
   30 @  /* Fill Stiffness Matrix A */
   31 @             
   32 @ 
   33 @     
   34 @       
   35 @ 
   36 @     
   37 @           
   38 @ 
   39 @         
   40 @     /*set(A, sparams = "-pc_type hpddm -ksp_type gmres -ksp_rtol "+ string(solverEps));*/
   41 @ 
   42 @     
   43 @  /* A = Stiffness Matrix */ 
   30 @ { /* Fill Stiffness Matrix A */
   31 @     varf a(u, v) = H1(u, v, Th)       int3d( Th, qfV=DQFVqfV2)(dx(u)*dx( v) + dy(u)*dy( v) + dz(u)*dz( v)) + deltaUZero(u)deltaUZero1(u) on(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513, u=0)+deltaUZero2(u) on(513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025, u=0)+deltaUZero3(u) on(1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1444,1445,1446,1447,1448,1449,1450,1451,1452,1453,1454,1455,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482,1483,1484,1485,1486,1487,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1515,1516,1517,1518,1519,1520,1521,1522,1523,1524,1525,1526,1527,1528,1529,1530,1531,1532,1533,1534,1535,1536,1537, u=0)+deltaUZero4(u) on(1537,1538,1539,1540,1541,1542,1543,1544,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1558,1559,1560,1561,1562,1563,1564,1565,1566,1567,1568,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,1595,1596,1597,1598,1599,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1631,1632,1633,1634,1635,1636,1637,1638,1639,1640,1641,1642,1643,1644,1645,1646,1647,1648,1649,1650,1651,1652,1653,1654,1655,1656,1657,1658,1659,1660,1661,1662,1663,1664,1665,1666,1667,1668,1669,1670,1671,1672,1673,1674,1675,1676,1677,1678,1679,1680,1681,1682,1683,1684,1685,1686,1687,1688,1689,1690,1691,1692,1693,1694,1695,1696,1697,1698,1699,1700,1701,1702,1703,1704,1705,1706,1707,1708,1709,1710,1711,1712,1713,1714,1715,1716,1717,1718,1719,1720,1721,1722,1723,1724,1725,1726,1727,1728,1729,1730,1731,1732,1733,1734,1735,1736,1737,1738,1739,1740,1741,1742,1743,1744,1745,1746,1747,1748,1749,1750,1751,1752,1753,1754,1755,1756,1757,1758,1759,1760,1761,1762,1763,1764,1765,1766,1767,1768,1769,1770,1771,1772,1773,1774,1775,1776,1777,1778,1779,1780,1781,1782,1783,1784,1785,1786,1787,1788,1789,1790,1791,1792,1793,1794,1795,1796,1797,1798,1799,1800,1801,1802,1803,1804,1805,1806,1807,1808,1809,1810,1811,1812,1813,1814,1815,1816,1817,1818,1819,1820,1821,1822,1823,1824,1825,1826,1827,1828,1829,1830,1831,1832,1833,1834,1835,1836,1837,1838,1839,1840,1841,1842,1843,1844,1845,1846,1847,1848,1849,1850,1851,1852,1853,1854,1855,1856,1857,1858,1859,1860,1861,1862,1863,1864,1865,1866,1867,1868,1869,1870,1871,1872,1873,1874,1875,1876,1877,1878,1879,1880,1881,1882,1883,1884,1885,1886,1887,1888,1889,1890,1891,1892,1893,1894,1895,1896,1897,1898,1899,1900,1901,1902,1903,1904,1905,1906,1907,1908,1909,1910,1911,1912,1913,1914,1915,1916,1917,1918,1919,1920,1921,1922,1923,1924,1925,1926,1927,1928,1929,1930,1931,1932,1933,1934,1935,1936,1937,1938,1939,1940,1941,1942,1943,1944,1945,1946,1947,1948,1949,1950,1951,1952,1953,1954,1955,1956,1957,1958,1959,1960,1961,1962,1963,1964,1965,1966,1967,1968,1969,1970,1971,1972,1973,1974,1975,1976,1977,1978,1979,1980,1981,1982,1983,1984,1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049, u=0)+deltaUZero5(u) on(2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110,2111,2112,2113,2114,2115,2116,2117,2118,2119,2120,2121,2122,2123,2124,2125,2126,2127,2128,2129,2130,2131,2132,2133,2134,2135,2136,2137,2138,2139,2140,2141,2142,2143,2144,2145,2146,2147,2148,2149,2150,2151,2152,2153,2154,2155,2156,2157,2158,2159,2160,2161,2162,2163,2164,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,2182,2183,2184,2185,2186,2187,2188,2189,2190,2191,2192,2193,2194,2195,2196,2197,2198,2199,2200,2201,2202,2203,2204,2205,2206,2207,2208,2209,2210,2211,2212,2213,2214,2215,2216,2217,2218,2219,2220,2221,2222,2223,2224,2225,2226,2227,2228,2229,2230,2231,2232,2233,2234,2235,2236,2237,2238,2239,2240,2241,2242,2243,2244,2245,2246,2247,2248,2249,2250,2251,2252,2253,2254,2255,2256,2257,2258,2259,2260,2261,2262,2263,2264,2265,2266,2267,2268,2269,2270,2271,2272,2273,2274,2275,2276,2277,2278,2279,2280,2281,2282,2283,2284,2285,2286,2287,2288,2289,2290,2291,2292,2293,2294,2295,2296,2297,2298,2299,2300,2301,2302,2303,2304,2305,2306,2307,2308,2309,2310,2311,2312,2313,2314,2315,2316,2317,2318,2319,2320,2321,2322,2323,2324,2325,2326,2327,2328,2329,2330,2331,2332,2333,2334,2335,2336,2337,2338,2339,2340,2341,2342,2343,2344,2345,2346,2347,2348,2349,2350,2351,2352,2353,2354,2355,2356,2357,2358,2359,2360,2361,2362,2363,2364,2365,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2384,2385,2386,2387,2388,2389,2390,2391,2392,2393,2394,2395,2396,2397,2398,2399,2400,2401,2402,2403,2404,2405,2406,2407,2408,2409,2410,2411,2412,2413,2414,2415,2416,2417,2418,2419,2420,2421,2422,2423,2424,2425,2426,2427,2428,2429,2430,2431,2432,2433,2434,2435,2436,2437,2438,2439,2440,2441,2442,2443,2444,2445,2446,2447,2448,2449,2450,2451,2452,2453,2454,2455,2456,2457,2458,2459,2460,2461,2462,2463,2464,2465,2466,2467,2468,2469,2470,2471,2472,2473,2474,2475,2476,2477,2478,2479,2480,2481,2482,2483,2484,2485,2486,2487,2488,2489,2490,2491,2492,2493,2494,2495,2496,2497,2498,2499,2500,2501,2502,2503,2504,2505,2506,2507,2508,2509,2510,2511,2512,2513,2514,2515,2516,2517,2518,2519,2520,2521,2522,2523,2524,2525,2526,2527,2528,2529,2530,2531,2532,2533,2534,2535,2536,2537,2538,2539,2540,2541,2542,2543,2544,2545,2546,2547,2548,2549,2550,2551,2552,2553,2554,2555,2556,2557,2558,2559,2560,2561, u=0)+deltaUZero6(u) on(2561,2562,2563,2564,2565,2566,2567,2568,2569,2570,2571,2572,2573,2574,2575,2576,2577,2578,2579,2580,2581,2582,2583,2584,2585,2586,2587,2588,2589,2590,2591,2592,2593,2594,2595,2596,2597,2598,2599,2600,2601,2602,2603,2604,2605,2606,2607,2608,2609,2610,2611,2612,2613,2614,2615,2616,2617,2618,2619,2620,2621,2622,2623,2624,2625,2626,2627,2628,2629,2630,2631,2632,2633,2634,2635,2636,2637,2638,2639,2640,2641,2642,2643,2644,2645,2646,2647,2648,2649,2650,2651,2652,2653,2654,2655,2656,2657,2658,2659,2660,2661,2662,2663,2664,2665,2666,2667,2668,2669,2670,2671,2672,2673,2674,2675,2676,2677,2678,2679,2680,2681,2682,2683,2684,2685,2686,2687,2688,2689,2690,2691,2692,2693,2694,2695,2696,2697,2698,2699,2700,2701,2702,2703,2704,2705,2706,2707,2708,2709,2710,2711,2712,2713,2714,2715,2716,2717,2718,2719,2720,2721,2722,2723,2724,2725,2726,2727,2728,2729,2730,2731,2732,2733,2734,2735,2736,2737,2738,2739,2740,2741,2742,2743,2744,2745,2746,2747,2748,2749,2750,2751,2752,2753,2754,2755,2756,2757,2758,2759,2760,2761,2762,2763,2764,2765,2766,2767,2768,2769,2770,2771,2772,2773,2774,2775,2776,2777,2778,2779,2780,2781,2782,2783,2784,2785,2786,2787,2788,2789,2790,2791,2792,2793,2794,2795,2796,2797,2798,2799,2800,2801,2802,2803,2804,2805,2806,2807,2808,2809,2810,2811,2812,2813,2814,2815,2816,2817,2818,2819,2820,2821,2822,2823,2824,2825,2826,2827,2828,2829,2830,2831,2832,2833,2834,2835,2836,2837,2838,2839,2840,2841,2842,2843,2844,2845,2846,2847,2848,2849,2850,2851,2852,2853,2854,2855,2856,2857,2858,2859,2860,2861,2862,2863,2864,2865,2866,2867,2868,2869,2870,2871,2872,2873,2874,2875,2876,2877,2878,2879,2880,2881,2882,2883,2884,2885,2886,2887,2888,2889,2890,2891,2892,2893,2894,2895,2896,2897,2898,2899,2900,2901,2902,2903,2904,2905,2906,2907,2908,2909,2910,2911,2912,2913,2914,2915,2916,2917,2918,2919,2920,2921,2922,2923,2924,2925,2926,2927,2928,2929,2930,2931,2932,2933,2934,2935,2936,2937,2938,2939,2940,2941,2942,2943,2944,2945,2946,2947,2948,2949,2950,2951,2952,2953,2954,2955,2956,2957,2958,2959,2960,2961,2962,2963,2964,2965,2966,2967,2968,2969,2970,2971,2972,2973,2974,2975,2976,2977,2978,2979,2980,2981,2982,2983,2984,2985,2986,2987,2988,2989,2990,2991,2992,2993,2994,2995,2996,2997,2998,2999,3000,3001,3002,3003,3004,3005,3006,3007,3008,3009,3010,3011,3012,3013,3014,3015,3016,3017,3018,3019,3020,3021,3022,3023,3024,3025,3026,3027,3028,3029,3030,3031,3032,3033,3034,3035,3036,3037,3038,3039,3040,3041,3042,3043,3044,3045,3046,3047,3048,3049,3050,3051,3052,3053,3054,3055,3056,3057,3058,3059,3060,3061,3062,3063,3064,3065,3066,3067,3068,3069,3070,3071,3072,3073, u=0)+deltaUZero7(u) on(3073,3074,3075,3076,3077,3078,3079,3080,3081,3082,3083,3084,3085,3086,3087,3088,3089,3090,3091,3092,3093,3094,3095,3096,3097,3098,3099,3100,3101,3102,3103,3104,3105,3106,3107,3108,3109,3110,3111,3112,3113,3114,3115,3116,3117,3118,3119,3120,3121,3122,3123,3124,3125,3126,3127,3128,3129,3130,3131,3132,3133,3134,3135,3136,3137,3138,3139,3140,3141,3142,3143,3144,3145,3146,3147,3148,3149,3150,3151,3152,3153,3154,3155,3156,3157,3158,3159,3160,3161,3162,3163,3164,3165,3166,3167,3168,3169,3170,3171,3172,3173,3174,3175,3176,3177,3178,3179,3180,3181,3182,3183,3184,3185,3186,3187,3188,3189,3190,3191,3192,3193,3194,3195,3196,3197,3198,3199,3200,3201,3202,3203,3204,3205,3206,3207,3208,3209,3210,3211,3212,3213,3214,3215,3216,3217,3218,3219,3220,3221,3222,3223,3224,3225,3226,3227,3228,3229,3230,3231,3232,3233,3234,3235,3236,3237,3238,3239,3240,3241,3242,3243,3244,3245,3246,3247,3248,3249,3250,3251,3252,3253,3254,3255,3256,3257,3258,3259,3260,3261,3262,3263,3264,3265,3266,3267,3268,3269,3270,3271,3272,3273,3274,3275,3276,3277,3278,3279,3280,3281,3282,3283,3284,3285,3286,3287,3288,3289,3290,3291,3292,3293,3294,3295,3296,3297,3298,3299,3300,3301,3302,3303,3304,3305,3306,3307,3308,3309,3310,3311,3312,3313,3314,3315,3316,3317,3318,3319,3320,3321,3322,3323,3324,3325,3326,3327,3328,3329,3330,3331,3332,3333,3334,3335,3336,3337,3338,3339,3340,3341,3342,3343,3344,3345,3346,3347,3348,3349,3350,3351,3352,3353,3354,3355,3356,3357,3358,3359,3360,3361,3362,3363,3364,3365,3366,3367,3368,3369,3370,3371,3372,3373,3374,3375,3376,3377,3378,3379,3380,3381,3382,3383,3384,3385,3386,3387,3388,3389,3390,3391,3392,3393,3394,3395,3396,3397,3398,3399,3400,3401,3402,3403,3404,3405,3406,3407,3408,3409,3410,3411,3412,3413,3414,3415,3416,3417,3418,3419,3420,3421,3422,3423,3424,3425,3426,3427,3428,3429,3430,3431,3432,3433,3434,3435,3436,3437,3438,3439,3440,3441,3442,3443,3444,3445,3446,3447,3448,3449,3450,3451,3452,3453,3454,3455,3456,3457,3458,3459,3460,3461,3462,3463,3464,3465,3466,3467,3468,3469,3470,3471,3472,3473,3474,3475,3476,3477,3478,3479,3480,3481,3482,3483,3484,3485,3486,3487,3488,3489,3490,3491,3492,3493,3494,3495,3496,3497,3498,3499,3500,3501,3502,3503,3504,3505,3506,3507,3508,3509,3510,3511,3512,3513,3514,3515,3516,3517,3518,3519,3520,3521,3522,3523,3524,3525,3526,3527,3528,3529,3530,3531,3532,3533,3534,3535,3536,3537,3538,3539,3540,3541,3542,3543,3544,3545,3546,3547,3548,3549,3550,3551,3552,3553,3554,3555,3556,3557,3558,3559,3560,3561,3562,3563,3564,3565,3566,3567,3568,3569,3570,3571,3572,3573,3574,3575,3576,3577,3578,3579,3580,3581,3582,3583,3584,3585, u=0)+deltaUZero8(u) on(3585,3586,3587,3588,3589,3590,3591,3592,3593,3594,3595,3596,3597,3598,3599,3600,3601,3602,3603,3604,3605,3606,3607,3608,3609,3610,3611,3612,3613,3614,3615,3616,3617,3618,3619,3620,3621,3622,3623,3624,3625,3626,3627,3628,3629,3630,3631,3632,3633,3634,3635,3636,3637,3638,3639,3640,3641,3642,3643,3644,3645,3646,3647,3648,3649,3650,3651,3652,3653,3654,3655,3656,3657,3658,3659,3660,3661,3662,3663,3664,3665,3666,3667,3668,3669,3670,3671,3672,3673,3674,3675,3676,3677,3678,3679,3680,3681,3682,3683,3684,3685,3686,3687,3688,3689,3690,3691,3692,3693,3694,3695,3696,3697,3698,3699,3700,3701,3702,3703,3704,3705,3706,3707,3708,3709,3710,3711,3712,3713,3714,3715,3716,3717,3718,3719,3720,3721,3722,3723,3724,3725,3726,3727,3728,3729,3730,3731,3732,3733,3734,3735,3736,3737,3738,3739,3740,3741,3742,3743,3744,3745,3746,3747,3748,3749,3750,3751,3752,3753,3754,3755,3756,3757,3758,3759,3760,3761,3762,3763,3764,3765,3766,3767,3768,3769,3770,3771,3772,3773,3774,3775,3776,3777,3778,3779,3780,3781,3782,3783,3784,3785,3786,3787,3788,3789,3790,3791,3792,3793,3794,3795,3796,3797,3798,3799,3800,3801,3802,3803,3804,3805,3806,3807,3808,3809,3810,3811,3812,3813,3814,3815,3816,3817,3818,3819,3820,3821,3822,3823,3824,3825,3826,3827,3828,3829,3830,3831,3832,3833,3834,3835,3836,3837,3838,3839,3840,3841,3842,3843,3844,3845,3846,3847,3848,3849,3850,3851,3852,3853,3854,3855,3856,3857,3858,3859,3860,3861,3862,3863,3864,3865,3866,3867,3868,3869,3870,3871,3872,3873,3874,3875,3876,3877,3878,3879,3880,3881,3882,3883,3884,3885,3886,3887,3888,3889,3890,3891,3892,3893,3894,3895,3896,3897,3898,3899,3900,3901,3902,3903,3904,3905,3906,3907,3908,3909,3910,3911,3912,3913,3914,3915,3916,3917,3918,3919,3920,3921,3922,3923,3924,3925,3926,3927,3928,3929,3930,3931,3932,3933,3934,3935,3936,3937,3938,3939,3940,3941,3942,3943,3944,3945,3946,3947,3948,3949,3950,3951,3952,3953,3954,3955,3956,3957,3958,3959,3960,3961,3962,3963,3964,3965,3966,3967,3968,3969,3970,3971,3972,3973,3974,3975,3976,3977,3978,3979,3980,3981,3982,3983,3984,3985,3986,3987,3988,3989,3990,3991,3992,3993,3994,3995,3996,3997,3998,3999,4000,4001,4002,4003,4004,4005,4006,4007,4008,4009,4010,4011,4012,4013,4014,4015,4016,4017,4018,4019,4020,4021,4022,4023,4024,4025,4026,4027,4028,4029,4030,4031,4032,4033,4034,4035,4036,4037,4038,4039,4040,4041,4042,4043,4044,4045,4046,4047,4048,4049,4050,4051,4052,4053,4054,4055,4056,4057,4058,4059,4060,4061,4062,4063,4064,4065,4066,4067,4068,4069,4070,4071,4072,4073,4074,4075,4076,4077,4078,4079,4080,4081,4082,4083,4084,4085,4086,4087,4088,4089,4090,4091,4092,4093,4094,4095,4096,4097, u=0)+deltaUZero9(u) on(4097,4098,4099,4100,4101,4102,4103,4104,4105,4106,4107,4108,4109,4110,4111,4112,4113,4114,4115,4116,4117,4118,4119,4120,4121,4122,4123,4124,4125,4126,4127,4128,4129,4130,4131,4132,4133,4134,4135,4136,4137,4138,4139,4140,4141,4142,4143,4144,4145,4146,4147,4148,4149,4150,4151,4152,4153,4154,4155,4156,4157,4158,4159,4160,4161,4162,4163,4164,4165,4166,4167,4168,4169,4170,4171,4172,4173,4174,4175,4176,4177,4178,4179,4180,4181,4182,4183,4184,4185,4186,4187,4188,4189,4190,4191,4192,4193,4194,4195,4196,4197,4198,4199,4200,4201,4202,4203,4204,4205,4206,4207,4208,4209,4210,4211,4212,4213,4214,4215,4216,4217,4218,4219,4220,4221,4222,4223,4224,4225,4226,4227,4228,4229,4230,4231,4232,4233,4234,4235,4236,4237,4238,4239,4240,4241,4242,4243,4244,4245,4246,4247,4248,4249,4250,4251,4252,4253,4254,4255,4256,4257,4258,4259,4260,4261,4262,4263,4264,4265,4266,4267,4268,4269,4270,4271,4272,4273,4274,4275,4276,4277,4278,4279,4280,4281,4282,4283,4284,4285,4286,4287,4288,4289,4290,4291,4292,4293,4294,4295,4296,4297,4298,4299,4300,4301,4302,4303,4304,4305,4306,4307,4308,4309,4310,4311,4312,4313,4314,4315,4316,4317,4318,4319,4320,4321,4322,4323,4324,4325,4326,4327,4328,4329,4330,4331,4332,4333,4334,4335,4336,4337,4338,4339,4340,4341,4342,4343,4344,4345,4346,4347,4348,4349,4350,4351,4352,4353,4354,4355,4356,4357,4358,4359,4360,4361,4362,4363,4364,4365,4366,4367,4368,4369,4370,4371,4372,4373,4374,4375,4376,4377,4378,4379,4380,4381,4382,4383,4384,4385,4386,4387,4388,4389,4390,4391,4392,4393,4394,4395,4396,4397,4398,4399,4400,4401,4402,4403,4404,4405,4406,4407,4408,4409,4410,4411,4412,4413,4414,4415,4416,4417,4418,4419,4420,4421,4422,4423,4424,4425,4426,4427,4428,4429,4430,4431,4432,4433,4434,4435,4436,4437,4438,4439,4440,4441,4442,4443,4444,4445,4446,4447,4448,4449,4450,4451,4452,4453,4454,4455,4456,4457,4458,4459,4460,4461,4462,4463,4464,4465,4466,4467,4468,4469,4470,4471,4472,4473,4474,4475,4476,4477,4478,4479,4480,4481,4482,4483,4484,4485,4486,4487,4488,4489,4490,4491,4492,4493,4494,4495,4496,4497,4498,4499,4500,4501,4502,4503,4504,4505,4506,4507,4508,4509,4510,4511,4512,4513,4514,4515,4516,4517,4518,4519,4520,4521,4522,4523,4524,4525,4526,4527,4528,4529,4530,4531,4532,4533,4534,4535,4536,4537,4538,4539,4540,4541,4542,4543,4544,4545,4546,4547,4548,4549,4550,4551,4552,4553,4554,4555,4556,4557,4558,4559,4560,4561,4562,4563,4564,4565,4566,4567,4568,4569,4570,4571,4572,4573,4574,4575,4576,4577,4578,4579,4580,4581,4582,4583,4584,4585,4586,4587,4588,4589,4590,4591,4592,4593,4594,4595,4596,4597,4598,4599,4600,4601,4602,4603,4604,4605,4606,4607,4608,4609, u=0)+deltaUZero10(u) on(4609,4610,4611,4612,4613,4614,4615,4616,4617,4618,4619,4620,4621,4622,4623,4624,4625,4626,4627,4628,4629,4630,4631,4632,4633,4634,4635,4636,4637,4638,4639,4640,4641,4642,4643,4644,4645,4646,4647,4648,4649,4650,4651,4652,4653,4654,4655,4656,4657,4658,4659,4660,4661,4662,4663,4664,4665,4666,4667,4668,4669,4670,4671,4672,4673,4674,4675,4676,4677,4678,4679,4680,4681,4682,4683,4684,4685,4686,4687,4688,4689,4690,4691,4692,4693,4694,4695,4696,4697,4698,4699,4700,4701,4702,4703,4704,4705,4706,4707,4708,4709,4710,4711,4712,4713,4714,4715,4716,4717,4718,4719,4720,4721,4722,4723,4724,4725,4726,4727,4728,4729,4730,4731,4732,4733,4734,4735,4736,4737,4738,4739,4740,4741,4742,4743,4744,4745,4746,4747,4748,4749,4750,4751,4752,4753,4754,4755,4756,4757,4758,4759,4760,4761,4762,4763,4764,4765,4766,4767,4768,4769,4770,4771,4772,4773,4774,4775,4776,4777,4778,4779,4780,4781,4782,4783,4784,4785,4786,4787,4788,4789,4790,4791,4792,4793,4794,4795,4796,4797,4798,4799,4800,4801,4802,4803,4804,4805,4806,4807,4808,4809,4810,4811,4812,4813,4814,4815,4816,4817,4818,4819,4820,4821,4822,4823,4824,4825,4826,4827,4828,4829,4830,4831,4832,4833,4834,4835,4836,4837,4838,4839,4840,4841,4842,4843,4844,4845,4846,4847,4848,4849,4850,4851,4852,4853,4854,4855,4856,4857,4858,4859,4860,4861,4862,4863,4864,4865,4866,4867,4868,4869,4870,4871,4872,4873,4874,4875,4876,4877,4878,4879,4880,4881,4882,4883,4884,4885,4886,4887,4888,4889,4890,4891,4892,4893,4894,4895,4896,4897,4898,4899,4900,4901,4902,4903,4904,4905,4906,4907,4908,4909,4910,4911,4912,4913,4914,4915,4916,4917,4918,4919,4920,4921,4922,4923,4924,4925,4926,4927,4928,4929,4930,4931,4932,4933,4934,4935,4936,4937,4938,4939,4940,4941,4942,4943,4944,4945,4946,4947,4948,4949,4950,4951,4952,4953,4954,4955,4956,4957,4958,4959,4960,4961,4962,4963,4964,4965,4966,4967,4968,4969,4970,4971,4972,4973,4974,4975,4976,4977,4978,4979,4980,4981,4982,4983,4984,4985,4986,4987,4988,4989,4990,4991,4992,4993,4994,4995,4996,4997,4998,4999,5000,5001,5002,5003,5004,5005,5006,5007,5008,5009,5010,5011,5012,5013,5014,5015,5016,5017,5018,5019,5020,5021,5022,5023,5024,5025,5026,5027,5028,5029,5030,5031,5032,5033,5034,5035,5036,5037,5038,5039,5040,5041,5042,5043,5044,5045,5046,5047,5048,5049,5050,5051,5052,5053,5054,5055,5056,5057,5058,5059,5060,5061,5062,5063,5064,5065,5066,5067,5068,5069,5070,5071,5072,5073,5074,5075,5076,5077,5078,5079,5080,5081,5082,5083,5084,5085,5086,5087,5088,5089,5090,5091,5092,5093,5094,5095,5096,5097,5098,5099,5100,5101,5102,5103,5104,5105,5106,5107,5108,5109,5110,5111,5112,5113,5114,5115,5116,5117,5118,5119,5120,5121, u=0)+deltaUZero11(u) on(5121,5122,5123,5124,5125,5126,5127,5128,5129,5130,5131,5132,5133,5134,5135,5136,5137,5138,5139,5140,5141,5142,5143,5144,5145,5146,5147,5148,5149,5150,5151,5152,5153,5154,5155,5156,5157,5158,5159,5160,5161,5162,5163,5164,5165,5166,5167,5168,5169,5170,5171,5172,5173,5174,5175,5176,5177,5178,5179,5180,5181,5182,5183,5184,5185,5186,5187,5188,5189,5190,5191,5192,5193,5194,5195,5196,5197,5198,5199,5200,5201,5202,5203,5204,5205,5206,5207,5208,5209,5210,5211,5212,5213,5214,5215,5216,5217,5218,5219,5220,5221,5222,5223,5224,5225,5226,5227,5228,5229,5230,5231,5232,5233,5234,5235,5236,5237,5238,5239,5240,5241,5242,5243,5244,5245,5246,5247,5248,5249,5250,5251,5252,5253,5254,5255,5256,5257,5258,5259,5260,5261,5262,5263,5264,5265,5266,5267,5268,5269,5270,5271,5272,5273,5274,5275,5276,5277,5278,5279,5280,5281,5282,5283,5284,5285,5286,5287,5288,5289,5290,5291,5292,5293,5294,5295,5296,5297,5298,5299,5300,5301,5302,5303,5304,5305,5306,5307,5308,5309,5310,5311,5312,5313,5314,5315,5316,5317,5318,5319,5320,5321,5322,5323,5324,5325,5326,5327,5328,5329,5330,5331,5332,5333,5334,5335,5336,5337,5338,5339,5340,5341,5342,5343,5344,5345,5346,5347,5348,5349,5350,5351,5352,5353,5354,5355,5356,5357,5358,5359,5360,5361,5362,5363,5364,5365,5366,5367,5368,5369,5370,5371,5372,5373,5374,5375,5376,5377,5378,5379,5380,5381,5382,5383,5384,5385,5386,5387,5388,5389,5390,5391,5392,5393,5394,5395,5396,5397,5398,5399,5400,5401,5402,5403,5404,5405,5406,5407,5408,5409,5410,5411,5412,5413,5414,5415,5416,5417,5418,5419,5420,5421,5422,5423,5424,5425,5426,5427,5428,5429,5430,5431,5432,5433,5434,5435,5436,5437,5438,5439,5440,5441,5442,5443,5444,5445,5446,5447,5448,5449,5450,5451,5452,5453,5454,5455,5456,5457,5458,5459,5460,5461,5462,5463,5464,5465,5466,5467,5468,5469,5470,5471,5472,5473,5474,5475,5476,5477,5478,5479,5480,5481,5482,5483,5484,5485,5486,5487,5488,5489,5490,5491,5492,5493,5494,5495,5496,5497,5498,5499,5500,5501,5502,5503,5504,5505,5506,5507,5508,5509,5510,5511,5512,5513,5514,5515,5516,5517,5518,5519,5520,5521,5522,5523,5524,5525,5526,5527,5528,5529,5530,5531,5532,5533,5534,5535,5536,5537,5538,5539,5540,5541,5542,5543,5544,5545,5546,5547,5548,5549,5550,5551,5552,5553,5554,5555,5556,5557,5558,5559,5560,5561,5562,5563,5564,5565,5566,5567,5568,5569,5570,5571,5572,5573,5574,5575,5576,5577,5578,5579,5580,5581,5582,5583,5584,5585,5586,5587,5588,5589,5590,5591,5592,5593,5594,5595,5596,5597,5598,5599,5600,5601,5602,5603,5604,5605,5606,5607,5608,5609,5610,5611,5612,5613,5614,5615,5616,5617,5618,5619,5620,5621,5622,5623,5624,5625,5626,5627,5628,5629,5630,5631,5632,5633, u=0)+deltaUZero12(u) on(5633,5634,5635,5636,5637,5638,5639,5640,5641,5642,5643,5644,5645,5646,5647,5648,5649,5650,5651,5652,5653,5654,5655,5656,5657,5658,5659,5660,5661,5662,5663,5664,5665,5666,5667,5668,5669,5670,5671,5672,5673,5674,5675,5676,5677,5678,5679,5680,5681,5682,5683,5684,5685,5686,5687,5688,5689,5690,5691,5692,5693,5694,5695,5696,5697,5698,5699,5700,5701,5702,5703,5704,5705,5706,5707,5708,5709,5710,5711,5712,5713,5714,5715,5716,5717,5718,5719,5720,5721,5722,5723,5724,5725,5726,5727,5728,5729,5730,5731,5732,5733,5734,5735,5736,5737,5738,5739,5740,5741,5742,5743,5744,5745,5746,5747,5748,5749,5750,5751,5752,5753,5754,5755,5756,5757,5758,5759,5760,5761,5762,5763,5764,5765,5766,5767,5768,5769,5770,5771,5772,5773,5774,5775,5776,5777,5778,5779,5780,5781,5782,5783,5784,5785,5786,5787,5788,5789,5790,5791,5792,5793,5794,5795,5796,5797,5798,5799,5800,5801,5802,5803,5804,5805,5806,5807,5808,5809,5810,5811,5812,5813,5814,5815,5816,5817,5818,5819,5820,5821,5822,5823,5824,5825,5826,5827,5828,5829,5830,5831,5832,5833,5834,5835,5836,5837,5838,5839,5840,5841,5842,5843,5844,5845,5846,5847,5848,5849,5850,5851,5852,5853,5854,5855,5856,5857,5858,5859,5860,5861,5862,5863,5864,5865,5866,5867,5868,5869,5870,5871,5872,5873,5874,5875,5876,5877,5878,5879,5880,5881,5882,5883,5884,5885,5886,5887,5888,5889,5890,5891,5892,5893,5894,5895,5896,5897,5898,5899,5900,5901,5902,5903,5904,5905,5906,5907,5908,5909,5910,5911,5912,5913,5914,5915,5916,5917,5918,5919,5920,5921,5922,5923,5924,5925,5926,5927,5928,5929,5930,5931,5932,5933,5934,5935,5936,5937,5938,5939,5940,5941,5942,5943,5944,5945,5946,5947,5948,5949,5950,5951,5952,5953,5954,5955,5956,5957,5958,5959,5960,5961,5962,5963,5964,5965,5966,5967,5968,5969,5970,5971,5972,5973,5974,5975,5976,5977,5978,5979,5980,5981,5982,5983,5984,5985,5986,5987,5988,5989,5990,5991,5992,5993,5994,5995,5996,5997,5998,5999,6000,6001,6002,6003,6004,6005,6006,6007,6008,6009,6010,6011,6012,6013,6014,6015,6016,6017,6018,6019,6020,6021,6022,6023,6024,6025,6026,6027,6028,6029,6030,6031,6032,6033,6034,6035,6036,6037,6038,6039,6040,6041,6042,6043,6044,6045,6046,6047,6048,6049,6050,6051,6052,6053,6054,6055,6056,6057,6058,6059,6060,6061,6062,6063,6064,6065,6066,6067,6068,6069,6070,6071,6072,6073,6074,6075,6076,6077,6078,6079,6080,6081,6082,6083,6084,6085,6086,6087,6088,6089,6090,6091,6092,6093,6094,6095,6096,6097,6098,6099,6100,6101,6102,6103,6104,6105,6106,6107,6108,6109,6110,6111,6112,6113,6114,6115,6116,6117,6118,6119,6120,6121,6122,6123,6124,6125,6126,6127,6128,6129,6130,6131,6132,6133,6134,6135,6136,6137,6138,6139,6140,6141,6142,6143,6144,6145, u=0)+deltaUZero13(u) on(6145,6146,6147,6148,6149,6150,6151,6152,6153,6154,6155,6156,6157,6158,6159,6160,6161,6162,6163,6164,6165,6166,6167,6168,6169,6170,6171,6172,6173,6174,6175,6176,6177,6178,6179,6180,6181,6182,6183,6184,6185,6186,6187,6188,6189,6190,6191,6192,6193,6194,6195,6196,6197,6198,6199,6200,6201,6202,6203,6204,6205,6206,6207,6208,6209,6210,6211,6212,6213,6214,6215,6216,6217,6218,6219,6220,6221,6222,6223,6224,6225,6226,6227,6228,6229,6230,6231,6232,6233,6234,6235,6236,6237,6238,6239,6240,6241,6242,6243,6244,6245,6246,6247,6248,6249,6250,6251,6252,6253,6254,6255,6256,6257,6258,6259,6260,6261,6262,6263,6264,6265,6266,6267,6268,6269,6270,6271,6272,6273,6274,6275,6276,6277,6278,6279,6280,6281,6282,6283,6284,6285,6286,6287,6288,6289,6290,6291,6292,6293,6294,6295,6296,6297,6298,6299,6300,6301,6302,6303,6304,6305,6306,6307,6308,6309,6310,6311,6312,6313,6314,6315,6316,6317,6318,6319,6320,6321,6322,6323,6324,6325,6326,6327,6328,6329,6330,6331,6332,6333,6334,6335,6336,6337,6338,6339,6340,6341,6342,6343,6344,6345,6346,6347,6348,6349,6350,6351,6352,6353,6354,6355,6356,6357,6358,6359,6360,6361,6362,6363,6364,6365,6366,6367,6368,6369,6370,6371,6372,6373,6374,6375,6376,6377,6378,6379,6380,6381,6382,6383,6384,6385,6386,6387,6388,6389,6390,6391,6392,6393,6394,6395,6396,6397,6398,6399,6400,6401,6402,6403,6404,6405,6406,6407,6408,6409,6410,6411,6412,6413,6414,6415,6416,6417,6418,6419,6420,6421,6422,6423,6424,6425,6426,6427,6428,6429,6430,6431,6432,6433,6434,6435,6436,6437,6438,6439,6440,6441,6442,6443,6444,6445,6446,6447,6448,6449,6450,6451,6452,6453,6454,6455,6456,6457,6458,6459,6460,6461,6462,6463,6464,6465,6466,6467,6468,6469,6470,6471,6472,6473,6474,6475,6476,6477,6478,6479,6480,6481,6482,6483,6484,6485,6486,6487,6488,6489,6490,6491,6492,6493,6494,6495,6496,6497,6498,6499,6500,6501,6502,6503,6504,6505,6506,6507,6508,6509,6510,6511,6512,6513,6514,6515,6516,6517,6518,6519,6520,6521,6522,6523,6524,6525,6526,6527,6528,6529,6530,6531,6532,6533,6534,6535,6536,6537,6538,6539,6540,6541,6542,6543,6544,6545,6546,6547,6548,6549,6550,6551,6552,6553,6554,6555,6556,6557,6558,6559,6560,6561,6562,6563,6564,6565,6566,6567,6568,6569,6570,6571,6572,6573,6574,6575,6576,6577,6578,6579,6580,6581,6582,6583,6584,6585,6586,6587,6588,6589,6590,6591,6592,6593,6594,6595,6596,6597,6598,6599,6600,6601,6602,6603,6604,6605,6606,6607,6608,6609,6610,6611,6612,6613,6614,6615,6616,6617,6618,6619,6620,6621,6622,6623,6624,6625,6626,6627,6628,6629,6630,6631,6632,6633,6634,6635,6636,6637,6638,6639,6640,6641,6642,6643,6644,6645,6646,6647,6648,6649,6650,6651,6652,6653,6654,6655,6656,6657, u=0)+deltaUZero14(u) on(6657,6658,6659,6660,6661,6662,6663,6664,6665,6666,6667,6668,6669,6670,6671,6672,6673,6674,6675,6676,6677,6678,6679,6680,6681,6682,6683,6684,6685,6686,6687,6688,6689,6690,6691,6692,6693,6694,6695,6696,6697,6698,6699,6700,6701,6702,6703,6704,6705,6706,6707,6708,6709,6710,6711,6712,6713,6714,6715,6716,6717,6718,6719,6720,6721,6722,6723,6724,6725,6726,6727,6728,6729,6730,6731,6732,6733,6734,6735,6736,6737,6738,6739,6740,6741,6742,6743,6744,6745,6746,6747,6748,6749,6750,6751,6752,6753,6754,6755,6756,6757,6758,6759,6760,6761,6762,6763,6764,6765,6766,6767,6768,6769,6770,6771,6772,6773,6774,6775,6776,6777,6778,6779,6780,6781,6782,6783,6784,6785,6786,6787,6788,6789,6790,6791,6792,6793,6794,6795,6796,6797,6798,6799,6800,6801,6802,6803,6804,6805,6806,6807,6808,6809,6810,6811,6812,6813,6814,6815,6816,6817,6818,6819,6820,6821,6822,6823,6824,6825,6826,6827,6828,6829,6830,6831,6832,6833,6834,6835,6836,6837,6838,6839,6840,6841,6842,6843,6844,6845,6846,6847,6848,6849,6850,6851,6852,6853,6854,6855,6856,6857,6858,6859,6860,6861,6862,6863,6864,6865,6866,6867,6868,6869,6870,6871,6872,6873,6874,6875,6876,6877,6878,6879,6880,6881,6882,6883,6884,6885,6886,6887,6888,6889,6890,6891,6892,6893,6894,6895,6896,6897,6898,6899,6900,6901,6902,6903,6904,6905,6906,6907,6908,6909,6910,6911,6912,6913,6914,6915,6916,6917,6918,6919,6920,6921,6922,6923,6924,6925,6926,6927,6928,6929,6930,6931,6932,6933,6934,6935,6936,6937,6938,6939,6940,6941,6942,6943,6944,6945,6946,6947,6948,6949,6950,6951,6952,6953,6954,6955,6956,6957,6958,6959,6960,6961,6962,6963,6964,6965,6966,6967,6968,6969,6970,6971,6972,6973,6974,6975,6976,6977,6978,6979,6980,6981,6982,6983,6984,6985,6986,6987,6988,6989,6990,6991,6992,6993,6994,6995,6996,6997,6998,6999,7000,7001,7002,7003,7004,7005,7006,7007,7008,7009,7010,7011,7012,7013,7014,7015,7016,7017,7018,7019,7020,7021,7022,7023,7024,7025,7026,7027,7028,7029,7030,7031,7032,7033,7034,7035,7036,7037,7038,7039,7040,7041,7042,7043,7044,7045,7046,7047,7048,7049,7050,7051,7052,7053,7054,7055,7056,7057,7058,7059,7060,7061,7062,7063,7064,7065,7066,7067,7068,7069,7070,7071,7072,7073,7074,7075,7076,7077,7078,7079,7080,7081,7082,7083,7084,7085,7086,7087,7088,7089,7090,7091,7092,7093,7094,7095,7096,7097,7098,7099,7100,7101,7102,7103,7104,7105,7106,7107,7108,7109,7110,7111,7112,7113,7114,7115,7116,7117,7118,7119,7120,7121,7122,7123,7124,7125,7126,7127,7128,7129,7130,7131,7132,7133,7134,7135,7136,7137,7138,7139,7140,7141,7142,7143,7144,7145,7146,7147,7148,7149,7150,7151,7152,7153,7154,7155,7156,7157,7158,7159,7160,7161,7162,7163,7164,7165,7166,7167,7168,7169, u=0)+deltaUZero15(u) on(7169,7170,7171,7172,7173,7174,7175,7176,7177,7178,7179,7180,7181,7182,7183,7184,7185,7186,7187,7188,7189,7190,7191,7192,7193,7194,7195,7196,7197,7198,7199,7200,7201,7202,7203,7204,7205,7206,7207,7208,7209,7210,7211,7212,7213,7214,7215,7216,7217,7218,7219,7220,7221,7222,7223,7224,7225,7226,7227,7228,7229,7230,7231,7232,7233,7234,7235,7236,7237,7238,7239,7240,7241,7242,7243,7244,7245,7246,7247,7248,7249,7250,7251,7252,7253,7254,7255,7256,7257,7258,7259,7260,7261,7262,7263,7264,7265,7266,7267,7268,7269,7270,7271,7272,7273,7274,7275,7276,7277,7278,7279,7280,7281,7282,7283,7284,7285,7286,7287,7288,7289,7290,7291,7292,7293,7294,7295,7296,7297,7298,7299,7300,7301,7302,7303,7304,7305,7306,7307,7308,7309,7310,7311,7312,7313,7314,7315,7316,7317,7318,7319,7320,7321,7322,7323,7324,7325,7326,7327,7328,7329,7330,7331,7332,7333,7334,7335,7336,7337,7338,7339,7340,7341,7342,7343,7344,7345,7346,7347,7348,7349,7350,7351,7352,7353,7354,7355,7356,7357,7358,7359,7360,7361,7362,7363,7364,7365,7366,7367,7368,7369,7370,7371,7372,7373,7374,7375,7376,7377,7378,7379,7380,7381,7382,7383,7384,7385,7386,7387,7388,7389,7390,7391,7392,7393,7394,7395,7396,7397,7398,7399,7400,7401,7402,7403,7404,7405,7406,7407,7408,7409,7410,7411,7412,7413,7414,7415,7416,7417,7418,7419,7420,7421,7422,7423,7424,7425,7426,7427,7428,7429,7430,7431,7432,7433,7434,7435,7436,7437,7438,7439,7440,7441,7442,7443,7444,7445,7446,7447,7448,7449,7450,7451,7452,7453,7454,7455,7456,7457,7458,7459,7460,7461,7462,7463,7464,7465,7466,7467,7468,7469,7470,7471,7472,7473,7474,7475,7476,7477,7478,7479,7480,7481,7482,7483,7484,7485,7486,7487,7488,7489,7490,7491,7492,7493,7494,7495,7496,7497,7498,7499,7500,7501,7502,7503,7504,7505,7506,7507,7508,7509,7510,7511,7512,7513,7514,7515,7516,7517,7518,7519,7520,7521,7522,7523,7524,7525,7526,7527,7528,7529,7530,7531,7532,7533,7534,7535,7536,7537,7538,7539,7540,7541,7542,7543,7544,7545,7546,7547,7548,7549,7550,7551,7552,7553,7554,7555,7556,7557,7558,7559,7560,7561,7562,7563,7564,7565,7566,7567,7568,7569,7570,7571,7572,7573,7574,7575,7576,7577,7578,7579,7580,7581,7582,7583,7584,7585,7586,7587,7588,7589,7590,7591,7592,7593,7594,7595,7596,7597,7598,7599,7600,7601,7602,7603,7604,7605,7606,7607,7608,7609,7610,7611,7612,7613,7614,7615,7616,7617,7618,7619,7620,7621,7622,7623,7624,7625,7626,7627,7628,7629,7630,7631,7632,7633,7634,7635,7636,7637,7638,7639,7640,7641,7642,7643,7644,7645,7646,7647,7648,7649,7650,7651,7652,7653,7654,7655,7656,7657,7658,7659,7660,7661,7662,7663,7664,7665,7666,7667,7668,7669,7670,7671,7672,7673,7674,7675,7676,7677,7678,7679,7680,7681, u=0)+deltaUZero16(u) on(7681,7682,7683,7684,7685,7686,7687,7688,7689,7690,7691,7692,7693,7694,7695,7696,7697,7698,7699,7700,7701,7702,7703,7704,7705,7706,7707,7708,7709,7710,7711,7712,7713,7714,7715,7716,7717,7718,7719,7720,7721,7722,7723,7724,7725,7726,7727,7728,7729,7730,7731,7732,7733,7734,7735,7736,7737,7738,7739,7740,7741,7742,7743,7744,7745,7746,7747,7748,7749,7750,7751,7752,7753,7754,7755,7756,7757,7758,7759,7760,7761,7762,7763,7764,7765,7766,7767,7768,7769,7770,7771,7772,7773,7774,7775,7776,7777,7778,7779,7780,7781,7782,7783,7784,7785,7786,7787,7788,7789,7790,7791,7792,7793,7794,7795,7796,7797,7798,7799,7800,7801,7802,7803,7804,7805,7806,7807,7808,7809,7810,7811,7812,7813,7814,7815,7816,7817,7818,7819,7820,7821,7822,7823,7824,7825,7826,7827,7828,7829,7830,7831,7832,7833,7834,7835,7836,7837,7838,7839,7840,7841,7842,7843,7844,7845,7846,7847,7848,7849,7850,7851,7852,7853,7854,7855,7856,7857,7858,7859,7860,7861,7862,7863,7864,7865,7866,7867,7868,7869,7870,7871,7872,7873,7874,7875,7876,7877,7878,7879,7880,7881,7882,7883,7884,7885,7886,7887,7888,7889,7890,7891,7892,7893,7894,7895,7896,7897,7898,7899,7900,7901,7902,7903,7904,7905,7906,7907,7908,7909,7910,7911,7912,7913,7914,7915,7916,7917,7918,7919,7920,7921,7922,7923,7924,7925,7926,7927,7928,7929,7930,7931,7932,7933,7934,7935,7936,7937,7938,7939,7940,7941,7942,7943,7944,7945,7946,7947,7948,7949,7950,7951,7952,7953,7954,7955,7956,7957,7958,7959,7960,7961,7962,7963,7964,7965,7966,7967,7968,7969,7970,7971,7972,7973,7974,7975,7976,7977,7978,7979,7980,7981,7982,7983,7984,7985,7986,7987,7988,7989,7990,7991,7992,7993,7994,7995,7996,7997,7998,7999,8000,8001,8002,8003,8004,8005,8006,8007,8008,8009,8010,8011,8012,8013,8014,8015,8016,8017,8018,8019,8020,8021,8022,8023,8024,8025,8026,8027,8028,8029,8030,8031,8032,8033,8034,8035,8036,8037,8038,8039,8040,8041,8042,8043,8044,8045,8046,8047,8048,8049,8050,8051,8052,8053,8054,8055,8056,8057,8058,8059,8060,8061,8062,8063,8064,8065,8066,8067,8068,8069,8070,8071,8072,8073,8074,8075,8076,8077,8078,8079,8080,8081,8082,8083,8084,8085,8086,8087,8088,8089,8090,8091,8092,8093,8094,8095,8096,8097,8098,8099,8100,8101,8102,8103,8104,8105,8106,8107,8108,8109,8110,8111,8112,8113,8114,8115,8116,8117,8118,8119,8120,8121,8122,8123,8124,8125,8126,8127,8128,8129,8130,8131,8132,8133,8134,8135,8136,8137,8138,8139,8140,8141,8142,8143,8144,8145,8146,8147,8148,8149,8150,8151,8152,8153,8154,8155,8156,8157,8158,8159,8160,8161,8162,8163,8164,8165,8166,8167,8168,8169,8170,8171,8172,8173,8174,8175,8176,8177,8178,8179,8180,8181,8182,8183,8184,8185,8186,8187,8188,8189,8190,8191,8192,8193, u=0)+deltaUZero17(u) on(8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8203,8204,8205,8206,8207,8208,8209,8210,8211,8212,8213,8214,8215,8216,8217,8218,8219,8220,8221,8222,8223,8224,8225,8226,8227,8228,8229,8230,8231,8232,8233,8234,8235,8236,8237,8238,8239,8240,8241,8242,8243,8244,8245,8246,8247,8248,8249,8250,8251,8252,8253,8254,8255,8256,8257,8258,8259,8260,8261,8262,8263,8264,8265,8266,8267,8268,8269,8270,8271,8272,8273,8274,8275,8276,8277,8278,8279,8280,8281,8282,8283,8284,8285,8286,8287,8288,8289,8290,8291,8292,8293,8294,8295,8296,8297,8298,8299,8300,8301,8302,8303,8304,8305,8306,8307,8308,8309,8310,8311,8312,8313,8314,8315,8316,8317,8318,8319,8320,8321,8322,8323,8324,8325,8326,8327,8328,8329,8330,8331,8332,8333,8334,8335,8336,8337,8338,8339,8340,8341,8342,8343,8344,8345,8346,8347,8348,8349,8350,8351,8352,8353,8354,8355,8356,8357,8358,8359,8360,8361,8362,8363,8364,8365,8366,8367,8368,8369,8370,8371,8372,8373,8374,8375,8376,8377,8378,8379,8380,8381,8382,8383,8384,8385,8386,8387,8388,8389,8390,8391,8392,8393,8394,8395,8396,8397,8398,8399,8400,8401,8402,8403,8404,8405,8406,8407,8408,8409,8410,8411,8412,8413,8414,8415,8416,8417,8418,8419,8420,8421,8422,8423,8424,8425,8426,8427,8428,8429,8430,8431,8432,8433,8434,8435,8436,8437,8438,8439,8440,8441,8442,8443,8444,8445,8446,8447,8448,8449,8450,8451,8452,8453,8454,8455,8456,8457,8458,8459,8460,8461,8462,8463,8464,8465,8466,8467,8468,8469,8470,8471,8472,8473,8474,8475,8476,8477,8478,8479,8480,8481,8482,8483,8484,8485,8486,8487,8488,8489,8490,8491,8492,8493,8494,8495,8496,8497,8498,8499,8500,8501,8502,8503,8504,8505,8506,8507,8508,8509,8510,8511,8512,8513,8514,8515,8516,8517,8518,8519,8520,8521,8522,8523,8524,8525,8526,8527,8528,8529,8530,8531,8532,8533,8534,8535,8536,8537,8538,8539,8540,8541,8542,8543,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,8554,8555,8556,8557,8558,8559,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,8570,8571,8572,8573,8574,8575,8576,8577,8578,8579,8580,8581,8582,8583,8584,8585,8586,8587,8588,8589,8590,8591,8592,8593,8594,8595,8596,8597,8598,8599,8600,8601,8602,8603,8604,8605,8606,8607,8608,8609,8610,8611,8612,8613,8614,8615,8616,8617,8618,8619,8620,8621,8622,8623,8624,8625,8626,8627,8628,8629,8630,8631,8632,8633,8634,8635,8636,8637,8638,8639,8640,8641,8642,8643,8644,8645,8646,8647,8648,8649,8650,8651,8652,8653,8654,8655,8656,8657,8658,8659,8660,8661,8662,8663,8664,8665,8666,8667,8668,8669,8670,8671,8672,8673,8674,8675,8676,8677,8678,8679,8680,8681,8682,8683,8684,8685,8686,8687,8688,8689,8690,8691,8692,8693,8694,8695,8696,8697,8698,8699,8700,8701,8702,8703,8704,8705, u=0)+deltaUZero18(u) on(8705,8706,8707,8708,8709,8710,8711,8712,8713,8714,8715,8716,8717,8718,8719,8720,8721,8722,8723,8724,8725,8726,8727,8728,8729,8730,8731,8732,8733,8734,8735,8736,8737,8738,8739,8740,8741,8742,8743,8744,8745,8746,8747,8748,8749,8750,8751,8752,8753,8754,8755,8756,8757,8758,8759,8760,8761,8762,8763,8764,8765,8766,8767,8768,8769,8770,8771,8772,8773,8774,8775,8776,8777,8778,8779,8780,8781,8782,8783,8784,8785,8786,8787,8788,8789,8790,8791,8792,8793,8794,8795,8796,8797,8798,8799,8800,8801,8802,8803,8804,8805,8806,8807,8808,8809,8810,8811,8812,8813,8814,8815,8816,8817,8818,8819,8820,8821,8822,8823,8824,8825,8826,8827,8828,8829,8830,8831,8832,8833,8834,8835,8836,8837,8838,8839,8840,8841,8842,8843,8844,8845,8846,8847,8848,8849,8850,8851,8852,8853,8854,8855,8856,8857,8858,8859,8860,8861,8862,8863,8864,8865,8866,8867,8868,8869,8870,8871,8872,8873,8874,8875,8876,8877,8878,8879,8880,8881,8882,8883,8884,8885,8886,8887,8888,8889,8890,8891,8892,8893,8894,8895,8896,8897,8898,8899,8900,8901,8902,8903,8904,8905,8906,8907,8908,8909,8910,8911,8912,8913,8914,8915,8916,8917,8918,8919,8920,8921,8922,8923,8924,8925,8926,8927,8928,8929,8930,8931,8932,8933,8934,8935,8936,8937,8938,8939,8940,8941,8942,8943,8944,8945,8946,8947,8948,8949,8950,8951,8952,8953,8954,8955,8956,8957,8958,8959,8960,8961,8962,8963,8964,8965,8966,8967,8968,8969,8970,8971,8972,8973,8974,8975,8976,8977,8978,8979,8980,8981,8982,8983,8984,8985,8986,8987,8988,8989,8990,8991,8992,8993,8994,8995,8996,8997,8998,8999,9000,9001,9002,9003,9004,9005,9006,9007,9008,9009,9010,9011,9012,9013,9014,9015,9016,9017,9018,9019,9020,9021,9022,9023,9024,9025,9026,9027,9028,9029,9030,9031,9032,9033,9034,9035,9036,9037,9038,9039,9040,9041,9042,9043,9044,9045,9046,9047,9048,9049,9050,9051,9052,9053,9054,9055,9056,9057,9058,9059,9060,9061,9062,9063,9064,9065,9066,9067,9068,9069,9070,9071,9072,9073,9074,9075,9076,9077,9078,9079,9080,9081,9082,9083,9084,9085,9086,9087,9088,9089,9090,9091,9092,9093,9094,9095,9096,9097,9098,9099,9100,9101,9102,9103,9104,9105,9106,9107,9108,9109,9110,9111,9112,9113,9114,9115,9116,9117,9118,9119,9120,9121,9122,9123,9124,9125,9126,9127,9128,9129,9130,9131,9132,9133,9134,9135,9136,9137,9138,9139,9140,9141,9142,9143,9144,9145,9146,9147,9148,9149,9150,9151,9152,9153,9154,9155,9156,9157,9158,9159,9160,9161,9162,9163,9164,9165,9166,9167,9168,9169,9170,9171,9172,9173,9174,9175,9176,9177,9178,9179,9180,9181,9182,9183,9184,9185,9186,9187,9188,9189,9190,9191,9192,9193,9194,9195,9196,9197,9198,9199,9200,9201,9202,9203,9204,9205,9206,9207,9208,9209,9210,9211,9212,9213,9214,9215,9216,9217, u=0)+deltaUZero19(u) on(9217,9218,9219,9220,9221,9222,9223,9224,9225,9226,9227,9228,9229,9230,9231,9232,9233,9234,9235,9236,9237,9238,9239,9240,9241,9242,9243,9244,9245,9246,9247,9248,9249,9250,9251,9252,9253,9254,9255,9256,9257,9258,9259,9260,9261,9262,9263,9264,9265,9266,9267,9268,9269,9270,9271,9272,9273,9274,9275,9276,9277,9278,9279,9280,9281,9282,9283,9284,9285,9286,9287,9288,9289,9290,9291,9292,9293,9294,9295,9296,9297,9298,9299,9300,9301,9302,9303,9304,9305,9306,9307,9308,9309,9310,9311,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,9322,9323,9324,9325,9326,9327,9328,9329,9330,9331,9332,9333,9334,9335,9336,9337,9338,9339,9340,9341,9342,9343,9344,9345,9346,9347,9348,9349,9350,9351,9352,9353,9354,9355,9356,9357,9358,9359,9360,9361,9362,9363,9364,9365,9366,9367,9368,9369,9370,9371,9372,9373,9374,9375,9376,9377,9378,9379,9380,9381,9382,9383,9384,9385,9386,9387,9388,9389,9390,9391,9392,9393,9394,9395,9396,9397,9398,9399,9400,9401,9402,9403,9404,9405,9406,9407,9408,9409,9410,9411,9412,9413,9414,9415,9416,9417,9418,9419,9420,9421,9422,9423,9424,9425,9426,9427,9428,9429,9430,9431,9432,9433,9434,9435,9436,9437,9438,9439,9440,9441,9442,9443,9444,9445,9446,9447,9448,9449,9450,9451,9452,9453,9454,9455,9456,9457,9458,9459,9460,9461,9462,9463,9464,9465,9466,9467,9468,9469,9470,9471,9472,9473,9474,9475,9476,9477,9478,9479,9480,9481,9482,9483,9484,9485,9486,9487,9488,9489,9490,9491,9492,9493,9494,9495,9496,9497,9498,9499,9500,9501,9502,9503,9504,9505,9506,9507,9508,9509,9510,9511,9512,9513,9514,9515,9516,9517,9518,9519,9520,9521,9522,9523,9524,9525,9526,9527,9528,9529,9530,9531,9532,9533,9534,9535,9536,9537,9538,9539,9540,9541,9542,9543,9544,9545,9546,9547,9548,9549,9550,9551,9552,9553,9554,9555,9556,9557,9558,9559,9560,9561,9562,9563,9564,9565,9566,9567,9568,9569,9570,9571,9572,9573,9574,9575,9576,9577,9578,9579,9580,9581,9582,9583,9584,9585,9586,9587,9588,9589,9590,9591,9592,9593,9594,9595,9596,9597,9598,9599,9600,9601,9602,9603,9604,9605,9606,9607,9608,9609,9610,9611,9612,9613,9614,9615,9616,9617,9618,9619,9620,9621,9622,9623,9624,9625,9626,9627,9628,9629,9630,9631,9632,9633,9634,9635,9636,9637,9638,9639,9640,9641,9642,9643,9644,9645,9646,9647,9648,9649,9650,9651,9652,9653,9654,9655,9656,9657,9658,9659,9660,9661,9662,9663,9664,9665,9666,9667,9668,9669,9670,9671,9672,9673,9674,9675,9676,9677,9678,9679,9680,9681,9682,9683,9684,9685,9686,9687,9688,9689,9690,9691,9692,9693,9694,9695,9696,9697,9698,9699,9700,9701,9702,9703,9704,9705,9706,9707,9708,9709,9710,9711,9712,9713,9714,9715,9716,9717,9718,9719,9720,9721,9722,9723,9724,9725,9726,9727,9728,9729, u=0)+deltaUZero20(u) on(9729,9730,9731,9732,9733,9734,9735,9736,9737,9738,9739,9740,9741,9742,9743,9744,9745,9746,9747,9748,9749,9750,9751,9752,9753,9754,9755,9756,9757,9758,9759,9760,9761,9762,9763,9764,9765,9766,9767,9768,9769,9770,9771,9772,9773,9774,9775,9776,9777,9778,9779,9780,9781,9782,9783,9784,9785,9786,9787,9788,9789,9790,9791,9792,9793,9794,9795,9796,9797,9798,9799,9800,9801,9802,9803,9804,9805,9806,9807,9808,9809,9810,9811,9812,9813,9814,9815,9816,9817,9818,9819,9820,9821,9822,9823,9824,9825,9826,9827,9828,9829,9830,9831,9832,9833,9834,9835,9836,9837,9838,9839,9840,9841,9842,9843,9844,9845,9846,9847,9848,9849,9850,9851,9852,9853,9854,9855,9856,9857,9858,9859,9860,9861,9862,9863,9864,9865,9866,9867,9868,9869,9870,9871,9872,9873,9874,9875,9876,9877,9878,9879,9880,9881,9882,9883,9884,9885,9886,9887,9888,9889,9890,9891,9892,9893,9894,9895,9896,9897,9898,9899,9900,9901,9902,9903,9904,9905,9906,9907,9908,9909,9910,9911,9912,9913,9914,9915,9916,9917,9918,9919,9920,9921,9922,9923,9924,9925,9926,9927,9928,9929,9930,9931,9932,9933,9934,9935,9936,9937,9938,9939,9940,9941,9942,9943,9944,9945,9946,9947,9948,9949,9950,9951,9952,9953,9954,9955,9956,9957,9958,9959,9960,9961,9962,9963,9964,9965,9966,9967,9968,9969,9970,9971,9972,9973,9974,9975,9976,9977,9978,9979,9980,9981,9982,9983,9984,9985,9986,9987,9988,9989,9990,9991,9992,9993,9994,9995,9996,9997,9998,9999,10000,10001,10002,10003,10004,10005,10006,10007,10008,10009,10010,10011,10012,10013,10014,10015,10016,10017,10018,10019,10020,10021,10022,10023,10024,10025,10026,10027,10028,10029,10030,10031,10032,10033,10034,10035,10036,10037,10038,10039,10040,10041,10042,10043,10044,10045,10046,10047,10048,10049,10050,10051,10052,10053,10054,10055,10056,10057,10058,10059,10060,10061,10062,10063,10064,10065,10066,10067,10068,10069,10070,10071,10072,10073,10074,10075,10076,10077,10078,10079,10080,10081,10082,10083,10084,10085,10086,10087,10088,10089,10090,10091,10092,10093,10094,10095,10096,10097,10098,10099,10100,10101,10102,10103,10104,10105,10106,10107,10108,10109,10110,10111,10112,10113,10114,10115,10116,10117,10118,10119,10120,10121,10122,10123,10124,10125,10126,10127,10128,10129,10130,10131,10132,10133,10134,10135,10136,10137,10138,10139,10140,10141,10142,10143,10144,10145,10146,10147,10148,10149,10150,10151,10152,10153,10154,10155,10156,10157,10158,10159,10160,10161,10162,10163,10164,10165,10166,10167,10168,10169,10170,10171,10172,10173,10174,10175,10176,10177,10178,10179,10180,10181,10182,10183,10184,10185,10186,10187,10188,10189,10190,10191,10192,10193,10194,10195,10196,10197,10198,10199,10200,10201,10202,10203,10204,10205,10206,10207,10208,10209,10210,10211,10212,10213,10214,10215,10216,10217,10218,10219,10220,10221,10222,10223,10224,10225,10226,10227,10228,10229,10230,10231,10232,10233,10234,10235,10236,10237,10238,10239,10240,10241, u=0)+deltaUZero21(u) on(10241,10242,10243,10244,10245,10246,10247,10248,10249,10250,10251,10252,10253,10254,10255,10256,10257,10258,10259,10260,10261,10262,10263,10264,10265,10266,10267,10268,10269,10270,10271,10272,10273,10274,10275,10276,10277,10278,10279,10280,10281,10282,10283,10284,10285,10286,10287,10288,10289,10290,10291,10292,10293,10294,10295,10296,10297,10298,10299,10300,10301,10302,10303,10304,10305,10306,10307,10308,10309,10310,10311,10312,10313,10314,10315,10316,10317,10318,10319,10320,10321,10322,10323,10324,10325,10326,10327,10328,10329,10330,10331,10332,10333,10334,10335,10336,10337,10338,10339,10340,10341,10342,10343,10344,10345,10346,10347,10348,10349,10350,10351,10352,10353,10354,10355,10356,10357,10358,10359,10360,10361,10362,10363,10364,10365,10366,10367,10368,10369,10370,10371,10372,10373,10374,10375,10376,10377,10378,10379,10380,10381,10382,10383,10384,10385,10386,10387,10388,10389,10390,10391,10392,10393,10394,10395,10396,10397,10398,10399,10400,10401,10402,10403,10404,10405,10406,10407,10408,10409,10410,10411,10412,10413,10414,10415,10416,10417,10418,10419,10420,10421,10422,10423,10424,10425,10426,10427,10428,10429,10430,10431,10432,10433,10434,10435,10436,10437,10438,10439,10440,10441,10442,10443,10444,10445,10446,10447,10448,10449,10450,10451,10452,10453,10454,10455,10456,10457,10458,10459,10460,10461,10462,10463,10464,10465,10466,10467,10468,10469,10470,10471,10472,10473,10474,10475,10476,10477,10478,10479,10480,10481,10482,10483,10484,10485,10486,10487,10488,10489,10490,10491,10492,10493,10494,10495,10496,10497,10498,10499,10500,10501,10502,10503,10504,10505,10506,10507,10508,10509,10510,10511,10512,10513,10514,10515,10516,10517,10518,10519,10520,10521,10522,10523,10524,10525,10526,10527,10528,10529,10530,10531,10532,10533,10534,10535,10536,10537,10538,10539,10540,10541,10542,10543,10544,10545,10546,10547,10548,10549,10550,10551,10552,10553,10554,10555,10556,10557,10558,10559,10560,10561,10562,10563,10564,10565,10566,10567,10568,10569,10570,10571,10572,10573,10574,10575,10576,10577,10578,10579,10580,10581,10582,10583,10584,10585,10586,10587,10588,10589,10590,10591,10592,10593,10594,10595,10596,10597,10598,10599,10600,10601,10602,10603,10604,10605,10606,10607,10608,10609,10610,10611,10612,10613,10614,10615,10616,10617,10618,10619,10620,10621,10622,10623,10624,10625,10626,10627,10628,10629,10630,10631,10632,10633,10634,10635,10636,10637,10638,10639,10640,10641,10642,10643,10644,10645,10646,10647,10648,10649,10650,10651,10652,10653,10654,10655,10656,10657,10658,10659,10660,10661,10662,10663,10664,10665,10666,10667,10668,10669,10670,10671,10672,10673,10674,10675,10676,10677,10678,10679,10680,10681,10682,10683,10684,10685,10686,10687,10688,10689,10690,10691,10692,10693,10694,10695,10696,10697,10698,10699,10700,10701,10702,10703,10704,10705,10706,10707,10708,10709,10710,10711,10712,10713,10714,10715,10716,10717,10718,10719,10720,10721,10722,10723,10724,10725,10726,10727,10728,10729,10730,10731,10732,10733,10734,10735,10736,10737,10738,10739,10740,10741,10742,10743,10744,10745,10746,10747,10748,10749,10750,10751,10752,10753, u=0)+deltaUZero22(u) on(10753,10754,10755,10756,10757,10758,10759,10760,10761,10762,10763,10764,10765,10766,10767,10768,10769,10770,10771,10772,10773,10774,10775,10776,10777,10778,10779,10780,10781,10782,10783,10784,10785,10786,10787,10788,10789,10790,10791,10792,10793,10794,10795,10796,10797,10798,10799,10800,10801,10802,10803,10804,10805,10806,10807,10808,10809,10810,10811,10812,10813,10814,10815,10816,10817,10818,10819,10820,10821,10822,10823,10824,10825,10826,10827,10828,10829,10830,10831,10832,10833,10834,10835,10836,10837,10838,10839,10840,10841,10842,10843,10844,10845,10846,10847,10848,10849,10850,10851,10852,10853,10854,10855,10856,10857,10858,10859,10860,10861,10862,10863,10864,10865,10866,10867,10868,10869,10870,10871,10872,10873,10874,10875,10876,10877,10878,10879,10880,10881,10882,10883,10884,10885,10886,10887,10888,10889,10890,10891,10892,10893,10894,10895,10896,10897,10898,10899,10900,10901,10902,10903,10904,10905,10906,10907,10908,10909,10910,10911,10912,10913,10914,10915,10916,10917,10918,10919,10920,10921,10922,10923,10924,10925,10926,10927,10928,10929,10930,10931,10932,10933,10934,10935,10936,10937,10938,10939,10940,10941,10942,10943,10944,10945,10946,10947,10948,10949,10950,10951,10952,10953,10954,10955,10956,10957,10958,10959,10960,10961,10962,10963,10964,10965,10966,10967,10968,10969,10970,10971,10972,10973,10974,10975,10976,10977,10978,10979,10980,10981,10982,10983,10984,10985,10986,10987,10988,10989,10990,10991,10992,10993,10994,10995,10996,10997,10998,10999,11000,11001,11002,11003,11004,11005,11006,11007,11008,11009,11010,11011,11012,11013,11014,11015,11016,11017,11018,11019,11020,11021,11022,11023,11024,11025,11026,11027,11028,11029,11030,11031,11032,11033,11034,11035,11036,11037,11038,11039,11040,11041,11042,11043,11044,11045,11046,11047,11048,11049,11050,11051,11052,11053,11054,11055,11056,11057,11058,11059,11060,11061,11062,11063,11064,11065,11066,11067,11068,11069,11070,11071,11072,11073,11074,11075,11076,11077,11078,11079,11080,11081,11082,11083,11084,11085,11086,11087,11088,11089,11090,11091,11092,11093,11094,11095,11096,11097,11098,11099,11100,11101,11102,11103,11104,11105,11106,11107,11108,11109,11110,11111,11112,11113,11114,11115,11116,11117,11118,11119,11120,11121,11122,11123,11124,11125,11126,11127,11128,11129,11130,11131,11132,11133,11134,11135,11136,11137,11138,11139,11140,11141,11142,11143,11144,11145,11146,11147,11148,11149,11150,11151,11152,11153,11154,11155,11156,11157,11158,11159,11160,11161,11162,11163,11164,11165,11166,11167,11168,11169,11170,11171,11172,11173,11174,11175,11176,11177,11178,11179,11180,11181,11182,11183,11184,11185,11186,11187,11188,11189,11190,11191,11192,11193,11194,11195,11196,11197,11198,11199,11200,11201,11202,11203,11204,11205,11206,11207,11208,11209,11210,11211,11212,11213,11214,11215,11216,11217,11218,11219,11220,11221,11222,11223,11224,11225,11226,11227,11228,11229,11230,11231,11232,11233,11234,11235,11236,11237,11238,11239,11240,11241,11242,11243,11244,11245,11246,11247,11248,11249,11250,11251,11252,11253,11254,11255,11256,11257,11258,11259,11260,11261,11262,11263,11264,11265, u=0)+deltaUZero23(u) on(11265,11266,11267,11268,11269,11270,11271,11272,11273,11274,11275,11276,11277,11278,11279,11280,11281,11282,11283,11284,11285,11286,11287,11288,11289,11290,11291,11292,11293,11294,11295,11296,11297,11298,11299,11300,11301,11302,11303,11304,11305,11306,11307,11308,11309,11310,11311,11312,11313,11314,11315,11316,11317,11318,11319,11320,11321,11322,11323,11324,11325,11326,11327,11328,11329,11330,11331,11332,11333,11334,11335,11336,11337,11338,11339,11340,11341,11342,11343,11344,11345,11346,11347,11348,11349,11350,11351,11352,11353,11354,11355,11356,11357,11358,11359,11360,11361,11362,11363,11364,11365,11366,11367,11368,11369,11370,11371,11372,11373,11374,11375,11376,11377,11378,11379,11380,11381,11382,11383,11384,11385,11386,11387,11388,11389,11390,11391,11392,11393,11394,11395,11396,11397,11398,11399,11400,11401,11402,11403,11404,11405,11406,11407,11408,11409,11410,11411,11412,11413,11414,11415,11416,11417,11418,11419,11420,11421,11422,11423,11424,11425,11426,11427,11428,11429,11430,11431,11432,11433,11434,11435,11436,11437,11438,11439,11440,11441,11442,11443,11444,11445,11446,11447,11448,11449,11450,11451,11452,11453,11454,11455,11456,11457,11458,11459,11460,11461,11462,11463,11464,11465,11466,11467,11468,11469,11470,11471,11472,11473,11474,11475,11476,11477,11478,11479,11480,11481,11482,11483,11484,11485,11486,11487,11488,11489,11490,11491,11492,11493,11494,11495,11496,11497,11498,11499,11500,11501,11502,11503,11504,11505,11506,11507,11508,11509,11510,11511,11512,11513,11514,11515,11516,11517,11518,11519,11520,11521,11522,11523,11524,11525,11526,11527,11528,11529,11530,11531,11532,11533,11534,11535,11536,11537,11538,11539,11540,11541,11542,11543,11544,11545,11546,11547,11548,11549,11550,11551,11552,11553,11554,11555,11556,11557,11558,11559,11560,11561,11562,11563,11564,11565,11566,11567,11568,11569,11570,11571,11572,11573,11574,11575,11576,11577,11578,11579,11580,11581,11582,11583,11584,11585,11586,11587,11588,11589,11590,11591,11592,11593,11594,11595,11596,11597,11598,11599,11600,11601,11602,11603,11604,11605,11606,11607,11608,11609,11610,11611,11612,11613,11614,11615,11616,11617,11618,11619,11620,11621,11622,11623,11624,11625,11626,11627,11628,11629,11630,11631,11632,11633,11634,11635,11636,11637,11638,11639,11640,11641,11642,11643,11644,11645,11646,11647,11648,11649,11650,11651,11652,11653,11654,11655,11656,11657,11658,11659,11660,11661,11662,11663,11664,11665,11666,11667,11668,11669,11670,11671,11672,11673,11674,11675,11676,11677,11678,11679,11680,11681,11682,11683,11684,11685,11686,11687,11688,11689,11690,11691,11692,11693,11694,11695,11696,11697,11698,11699,11700,11701,11702,11703,11704,11705,11706,11707,11708,11709,11710,11711,11712,11713,11714,11715,11716,11717,11718,11719,11720,11721,11722,11723,11724,11725,11726,11727,11728,11729,11730,11731,11732,11733,11734,11735,11736,11737,11738,11739,11740,11741,11742,11743,11744,11745,11746,11747,11748,11749,11750,11751,11752,11753,11754,11755,11756,11757,11758,11759,11760,11761,11762,11763,11764,11765,11766,11767,11768,11769,11770,11771,11772,11773,11774,11775,11776,11777, u=0)+deltaUZero24(u) on(11777,11778,11779,11780,11781,11782,11783,11784,11785,11786,11787,11788,11789,11790,11791,11792,11793,11794,11795,11796,11797,11798,11799,11800,11801,11802,11803,11804,11805,11806,11807,11808,11809,11810,11811,11812,11813,11814,11815,11816,11817,11818,11819,11820,11821,11822,11823,11824,11825,11826,11827,11828,11829,11830,11831,11832,11833,11834,11835,11836,11837,11838,11839,11840,11841,11842,11843,11844,11845,11846,11847,11848,11849,11850,11851,11852,11853,11854,11855,11856,11857,11858,11859,11860,11861,11862,11863,11864,11865,11866,11867,11868,11869,11870,11871,11872,11873,11874,11875,11876,11877,11878,11879,11880,11881,11882,11883,11884,11885,11886,11887,11888,11889,11890,11891,11892,11893,11894,11895,11896,11897,11898,11899,11900,11901,11902,11903,11904,11905,11906,11907,11908,11909,11910,11911,11912,11913,11914,11915,11916,11917,11918,11919,11920,11921,11922,11923,11924,11925,11926,11927,11928,11929,11930,11931,11932,11933,11934,11935,11936,11937,11938,11939,11940,11941,11942,11943,11944,11945,11946,11947,11948,11949,11950,11951,11952,11953,11954,11955,11956,11957,11958,11959,11960,11961,11962,11963,11964,11965,11966,11967,11968,11969,11970,11971,11972,11973,11974,11975,11976,11977,11978,11979,11980,11981,11982,11983,11984,11985,11986,11987,11988,11989,11990,11991,11992,11993,11994,11995,11996,11997,11998,11999,12000,12001,12002,12003,12004,12005,12006,12007,12008,12009,12010,12011,12012,12013,12014,12015,12016,12017,12018,12019,12020,12021,12022,12023,12024,12025,12026,12027,12028,12029,12030,12031,12032,12033,12034,12035,12036,12037,12038,12039,12040,12041,12042,12043,12044,12045,12046,12047,12048,12049,12050,12051,12052,12053,12054,12055,12056,12057,12058,12059,12060,12061,12062,12063,12064,12065,12066,12067,12068,12069,12070,12071,12072,12073,12074,12075,12076,12077,12078,12079,12080,12081,12082,12083,12084,12085,12086,12087,12088,12089,12090,12091,12092,12093,12094,12095,12096,12097,12098,12099,12100,12101,12102,12103,12104,12105,12106,12107,12108,12109,12110,12111,12112,12113,12114,12115,12116,12117,12118,12119,12120,12121,12122,12123,12124,12125,12126,12127,12128,12129,12130,12131,12132,12133,12134,12135,12136,12137,12138,12139,12140,12141,12142,12143,12144,12145,12146,12147,12148,12149,12150,12151,12152,12153,12154,12155,12156,12157,12158,12159,12160,12161,12162,12163,12164,12165,12166,12167,12168,12169,12170,12171,12172,12173,12174,12175,12176,12177,12178,12179,12180,12181,12182,12183,12184,12185,12186,12187,12188,12189,12190,12191,12192,12193,12194,12195,12196,12197,12198,12199,12200,12201,12202,12203,12204,12205,12206,12207,12208,12209,12210,12211,12212,12213,12214,12215,12216,12217,12218,12219,12220,12221,12222,12223,12224,12225,12226,12227,12228,12229,12230,12231,12232,12233,12234,12235,12236,12237,12238,12239,12240,12241,12242,12243,12244,12245,12246,12247,12248,12249,12250,12251,12252,12253,12254,12255,12256,12257,12258,12259,12260,12261,12262,12263,12264,12265,12266,12267,12268,12269,12270,12271,12272,12273,12274,12275,12276,12277,12278,12279,12280,12281,12282,12283,12284,12285,12286,12287,12288,12289, u=0)+deltaUZero25(u) on(12289,12290,12291,12292,12293,12294,12295,12296,12297,12298,12299,12300,12301,12302,12303,12304,12305,12306,12307,12308,12309,12310,12311,12312,12313,12314,12315,12316,12317,12318,12319,12320,12321,12322,12323,12324,12325,12326,12327,12328,12329,12330,12331,12332,12333,12334,12335,12336,12337,12338,12339,12340,12341,12342,12343,12344,12345,12346,12347,12348,12349,12350,12351,12352,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,12436,12437,12438,12439,12440,12441,12442,12443,12444,12445,12446,12447,12448,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,12535,12536,12537,12538,12539,12540,12541,12542,12543,12544,12545,12546,12547,12548,12549,12550,12551,12552,12553,12554,12555,12556,12557,12558,12559,12560,12561,12562,12563,12564,12565,12566,12567,12568,12569,12570,12571,12572,12573,12574,12575,12576,12577,12578,12579,12580,12581,12582,12583,12584,12585,12586,12587,12588,12589,12590,12591,12592,12593,12594,12595,12596,12597,12598,12599,12600,12601,12602,12603,12604,12605,12606,12607,12608,12609,12610,12611,12612,12613,12614,12615,12616,12617,12618,12619,12620,12621,12622,12623,12624,12625,12626,12627,12628,12629,12630,12631,12632,12633,12634,12635,12636,12637,12638,12639,12640,12641,12642,12643,12644,12645,12646,12647,12648,12649,12650,12651,12652,12653,12654,12655,12656,12657,12658,12659,12660,12661,12662,12663,12664,12665,12666,12667,12668,12669,12670,12671,12672,12673,12674,12675,12676,12677,12678,12679,12680,12681,12682,12683,12684,12685,12686,12687,12688,12689,12690,12691,12692,12693,12694,12695,12696,12697,12698,12699,12700,12701,12702,12703,12704,12705,12706,12707,12708,12709,12710,12711,12712,12713,12714,12715,12716,12717,12718,12719,12720,12721,12722,12723,12724,12725,12726,12727,12728,12729,12730,12731,12732,12733,12734,12735,12736,12737,12738,12739,12740,12741,12742,12743,12744,12745,12746,12747,12748,12749,12750,12751,12752,12753,12754,12755,12756,12757,12758,12759,12760,12761,12762,12763,12764,12765,12766,12767,12768,12769,12770,12771,12772,12773,12774,12775,12776,12777,12778,12779,12780,12781,12782,12783,12784,12785,12786,12787,12788,12789,12790,12791,12792,12793,12794,12795,12796,12797,12798,12799,12800,12801, u=0)+deltaUZero26(u) on(12801,12802,12803,12804,12805,12806,12807,12808,12809,12810,12811,12812,12813,12814,12815,12816,12817,12818,12819,12820,12821,12822,12823,12824,12825,12826,12827,12828,12829,12830,12831,12832,12833,12834,12835,12836,12837,12838,12839,12840,12841,12842,12843,12844,12845,12846,12847,12848,12849,12850,12851,12852,12853,12854,12855,12856,12857,12858,12859,12860,12861,12862,12863,12864,12865,12866,12867,12868,12869,12870,12871,12872,12873,12874,12875,12876,12877,12878,12879,12880,12881,12882,12883,12884,12885,12886,12887,12888,12889,12890,12891,12892,12893,12894,12895,12896,12897,12898,12899,12900,12901,12902,12903,12904,12905,12906,12907,12908,12909,12910,12911,12912,12913,12914,12915,12916,12917,12918,12919,12920,12921,12922,12923,12924,12925,12926,12927,12928,12929,12930,12931,12932,12933,12934,12935,12936,12937,12938,12939,12940,12941,12942,12943,12944,12945,12946,12947,12948,12949,12950,12951,12952,12953,12954,12955,12956,12957,12958,12959,12960,12961,12962,12963,12964,12965,12966,12967,12968,12969,12970,12971,12972,12973,12974,12975,12976,12977,12978,12979,12980,12981,12982,12983,12984,12985,12986,12987,12988,12989,12990,12991,12992,12993,12994,12995,12996,12997,12998,12999,13000,13001,13002,13003,13004,13005,13006,13007,13008,13009,13010,13011,13012,13013,13014,13015,13016,13017,13018,13019,13020,13021,13022,13023,13024,13025,13026,13027,13028,13029,13030,13031,13032,13033,13034,13035,13036,13037,13038,13039,13040,13041,13042,13043,13044,13045,13046,13047,13048,13049,13050,13051,13052,13053,13054,13055,13056,13057,13058,13059,13060,13061,13062,13063,13064,13065,13066,13067,13068,13069,13070,13071,13072,13073,13074,13075,13076,13077,13078,13079,13080,13081,13082,13083,13084,13085,13086,13087,13088,13089,13090,13091,13092,13093,13094,13095,13096,13097,13098,13099,13100,13101,13102,13103,13104,13105,13106,13107,13108,13109,13110,13111,13112,13113,13114,13115,13116,13117,13118,13119,13120,13121,13122,13123,13124,13125,13126,13127,13128,13129,13130,13131,13132,13133,13134,13135,13136,13137,13138,13139,13140,13141,13142,13143,13144,13145,13146,13147,13148,13149,13150,13151,13152,13153,13154,13155,13156,13157,13158,13159,13160,13161,13162,13163,13164,13165,13166,13167,13168,13169,13170,13171,13172,13173,13174,13175,13176,13177,13178,13179,13180,13181,13182,13183,13184,13185,13186,13187,13188,13189,13190,13191,13192,13193,13194,13195,13196,13197,13198,13199,13200,13201,13202,13203,13204,13205,13206,13207,13208,13209,13210,13211,13212,13213,13214,13215,13216,13217,13218,13219,13220,13221,13222,13223,13224,13225,13226,13227,13228,13229,13230,13231,13232,13233,13234,13235,13236,13237,13238,13239,13240,13241,13242,13243,13244,13245,13246,13247,13248,13249,13250,13251,13252,13253,13254,13255,13256,13257,13258,13259,13260,13261,13262,13263,13264,13265,13266,13267,13268,13269,13270,13271,13272,13273,13274,13275,13276,13277,13278,13279,13280,13281,13282,13283,13284,13285,13286,13287,13288,13289,13290,13291,13292,13293,13294,13295,13296,13297,13298,13299,13300,13301,13302,13303,13304,13305,13306,13307,13308,13309,13310,13311,13312,13313, u=0)+deltaUZero27(u) on(13313,13314,13315,13316,13317,13318,13319,13320,13321,13322,13323,13324,13325,13326,13327,13328,13329,13330,13331,13332,13333,13334,13335,13336,13337,13338,13339,13340,13341,13342,13343,13344,13345,13346,13347,13348,13349,13350,13351,13352,13353,13354,13355,13356,13357,13358,13359,13360,13361,13362,13363,13364,13365,13366,13367,13368,13369,13370,13371,13372,13373,13374,13375,13376,13377,13378,13379,13380,13381,13382,13383,13384,13385,13386,13387,13388,13389,13390,13391,13392,13393,13394,13395,13396,13397,13398,13399,13400,13401,13402,13403,13404,13405,13406,13407,13408,13409,13410,13411,13412,13413,13414,13415,13416,13417,13418,13419,13420,13421,13422,13423,13424,13425,13426,13427,13428,13429,13430,13431,13432,13433,13434,13435,13436,13437,13438,13439,13440,13441,13442,13443,13444,13445,13446,13447,13448,13449,13450,13451,13452,13453,13454,13455,13456,13457,13458,13459,13460,13461,13462,13463,13464,13465,13466,13467,13468,13469,13470,13471,13472,13473,13474,13475,13476,13477,13478,13479,13480,13481,13482,13483,13484,13485,13486,13487,13488,13489,13490,13491,13492,13493,13494,13495,13496,13497,13498,13499,13500,13501,13502,13503,13504,13505,13506,13507,13508,13509,13510,13511,13512,13513,13514,13515,13516,13517,13518,13519,13520,13521,13522,13523,13524,13525,13526,13527,13528,13529,13530,13531,13532,13533,13534,13535,13536,13537,13538,13539,13540,13541,13542,13543,13544,13545,13546,13547,13548,13549,13550,13551,13552,13553,13554,13555,13556,13557,13558,13559,13560,13561,13562,13563,13564,13565,13566,13567,13568,13569,13570,13571,13572,13573,13574,13575,13576,13577,13578,13579,13580,13581,13582,13583,13584,13585,13586,13587,13588,13589,13590,13591,13592,13593,13594,13595,13596,13597,13598,13599,13600,13601,13602,13603,13604,13605,13606,13607,13608,13609,13610,13611,13612,13613,13614,13615,13616,13617,13618,13619,13620,13621,13622,13623,13624,13625,13626,13627,13628,13629,13630,13631,13632,13633,13634,13635,13636,13637,13638,13639,13640,13641,13642,13643,13644,13645,13646,13647,13648,13649,13650,13651,13652,13653,13654,13655,13656,13657,13658,13659,13660,13661,13662,13663,13664,13665,13666,13667,13668,13669,13670,13671,13672,13673,13674,13675,13676,13677,13678,13679,13680,13681,13682,13683,13684,13685,13686,13687,13688,13689,13690,13691,13692,13693,13694,13695,13696,13697,13698,13699,13700,13701,13702,13703,13704,13705,13706,13707,13708,13709,13710,13711,13712,13713,13714,13715,13716,13717,13718,13719,13720,13721,13722,13723,13724,13725,13726,13727,13728,13729,13730,13731,13732,13733,13734,13735,13736,13737,13738,13739,13740,13741,13742,13743,13744,13745,13746,13747,13748,13749,13750,13751,13752,13753,13754,13755,13756,13757,13758,13759,13760,13761,13762,13763,13764,13765,13766,13767,13768,13769,13770,13771,13772,13773,13774,13775,13776,13777,13778,13779,13780,13781,13782,13783,13784,13785,13786,13787,13788,13789,13790,13791,13792,13793,13794,13795,13796,13797,13798,13799,13800,13801,13802,13803,13804,13805,13806,13807,13808,13809,13810,13811,13812,13813,13814,13815,13816,13817,13818,13819,13820,13821,13822,13823,13824,13825, u=0)+deltaUZero28(u) on(13825,13826,13827,13828,13829,13830,13831,13832,13833,13834,13835,13836,13837,13838,13839,13840,13841,13842,13843,13844,13845,13846,13847,13848,13849,13850,13851,13852,13853,13854,13855,13856,13857,13858,13859,13860,13861,13862,13863,13864,13865,13866,13867,13868,13869,13870,13871,13872,13873,13874,13875,13876,13877,13878,13879,13880,13881,13882,13883,13884,13885,13886,13887,13888,13889,13890,13891,13892,13893,13894,13895,13896,13897,13898,13899,13900,13901,13902,13903,13904,13905,13906,13907,13908,13909,13910,13911,13912,13913,13914,13915,13916,13917,13918,13919,13920,13921,13922,13923,13924,13925,13926,13927,13928,13929,13930,13931,13932,13933,13934,13935,13936,13937,13938,13939,13940,13941,13942,13943,13944,13945,13946,13947,13948,13949,13950,13951,13952,13953,13954,13955,13956,13957,13958,13959,13960,13961,13962,13963,13964,13965,13966,13967,13968,13969,13970,13971,13972,13973,13974,13975,13976,13977,13978,13979,13980,13981,13982,13983,13984,13985,13986,13987,13988,13989,13990,13991,13992,13993,13994,13995,13996,13997,13998,13999,14000,14001,14002,14003,14004,14005,14006,14007,14008,14009,14010,14011,14012,14013,14014,14015,14016,14017,14018,14019,14020,14021,14022,14023,14024,14025,14026,14027,14028,14029,14030,14031,14032,14033,14034,14035,14036,14037,14038,14039,14040,14041,14042,14043,14044,14045,14046,14047,14048,14049,14050,14051,14052,14053,14054,14055,14056,14057,14058,14059,14060,14061,14062,14063,14064,14065,14066,14067,14068,14069,14070,14071,14072,14073,14074,14075,14076,14077,14078,14079,14080,14081,14082,14083,14084,14085,14086,14087,14088,14089,14090,14091,14092,14093,14094,14095,14096,14097,14098,14099,14100,14101,14102,14103,14104,14105,14106,14107,14108,14109,14110,14111,14112,14113,14114,14115,14116,14117,14118,14119,14120,14121,14122,14123,14124,14125,14126,14127,14128,14129,14130,14131,14132,14133,14134,14135,14136,14137,14138,14139,14140,14141,14142,14143,14144,14145,14146,14147,14148,14149,14150,14151,14152,14153,14154,14155,14156,14157,14158,14159,14160,14161,14162,14163,14164,14165,14166,14167,14168,14169,14170,14171,14172,14173,14174,14175,14176,14177,14178,14179,14180,14181,14182,14183,14184,14185,14186,14187,14188,14189,14190,14191,14192,14193,14194,14195,14196,14197,14198,14199,14200,14201,14202,14203,14204,14205,14206,14207,14208,14209,14210,14211,14212,14213,14214,14215,14216,14217,14218,14219,14220,14221,14222,14223,14224,14225,14226,14227,14228,14229,14230,14231,14232,14233,14234,14235,14236,14237,14238,14239,14240,14241,14242,14243,14244,14245,14246,14247,14248,14249,14250,14251,14252,14253,14254,14255,14256,14257,14258,14259,14260,14261,14262,14263,14264,14265,14266,14267,14268,14269,14270,14271,14272,14273,14274,14275,14276,14277,14278,14279,14280,14281,14282,14283,14284,14285,14286,14287,14288,14289,14290,14291,14292,14293,14294,14295,14296,14297,14298,14299,14300,14301,14302,14303,14304,14305,14306,14307,14308,14309,14310,14311,14312,14313,14314,14315,14316,14317,14318,14319,14320,14321,14322,14323,14324,14325,14326,14327,14328,14329,14330,14331,14332,14333,14334,14335,14336,14337, u=0)+deltaUZero29(u) on(14337,14338,14339,14340,14341,14342,14343,14344,14345,14346,14347,14348,14349,14350,14351,14352,14353,14354,14355,14356,14357,14358,14359,14360,14361,14362,14363,14364,14365,14366,14367,14368,14369,14370,14371,14372,14373,14374,14375,14376,14377,14378,14379,14380,14381,14382,14383,14384,14385,14386,14387,14388,14389,14390,14391,14392,14393,14394,14395,14396,14397,14398,14399,14400,14401,14402,14403,14404,14405,14406,14407,14408,14409,14410,14411,14412,14413,14414,14415,14416,14417,14418,14419,14420,14421,14422,14423,14424,14425,14426,14427,14428,14429,14430,14431,14432,14433,14434,14435,14436,14437,14438,14439,14440,14441,14442,14443,14444,14445,14446,14447,14448,14449,14450,14451,14452,14453,14454,14455,14456,14457,14458,14459,14460,14461,14462,14463,14464,14465,14466,14467,14468,14469,14470,14471,14472,14473,14474,14475,14476,14477,14478,14479,14480,14481,14482,14483,14484,14485,14486,14487,14488,14489,14490,14491,14492,14493,14494,14495,14496,14497,14498,14499,14500,14501,14502,14503,14504,14505,14506,14507,14508,14509,14510,14511,14512,14513,14514,14515,14516,14517,14518,14519,14520,14521,14522,14523,14524,14525,14526,14527,14528,14529,14530,14531,14532,14533,14534,14535,14536,14537,14538,14539,14540,14541,14542,14543,14544,14545,14546,14547,14548,14549,14550,14551,14552,14553,14554,14555,14556,14557,14558,14559,14560,14561,14562,14563,14564,14565,14566,14567,14568,14569,14570,14571,14572,14573,14574,14575,14576,14577,14578,14579,14580,14581,14582,14583,14584,14585,14586,14587,14588,14589,14590,14591,14592,14593,14594,14595,14596,14597,14598,14599,14600,14601,14602,14603,14604,14605,14606,14607,14608,14609,14610,14611,14612,14613,14614,14615,14616,14617,14618,14619,14620,14621,14622,14623,14624,14625,14626,14627,14628,14629,14630,14631,14632,14633,14634,14635,14636,14637,14638,14639,14640,14641,14642,14643,14644,14645,14646,14647,14648,14649,14650,14651,14652,14653,14654,14655,14656,14657,14658,14659,14660,14661,14662,14663,14664,14665,14666,14667,14668,14669,14670,14671,14672,14673,14674,14675,14676,14677,14678,14679,14680,14681,14682,14683,14684,14685,14686,14687,14688,14689,14690,14691,14692,14693,14694,14695,14696,14697,14698,14699,14700,14701,14702,14703,14704,14705,14706,14707,14708,14709,14710,14711,14712,14713,14714,14715,14716,14717,14718,14719,14720,14721,14722,14723,14724,14725,14726,14727,14728,14729,14730,14731,14732,14733,14734,14735,14736,14737,14738,14739,14740,14741,14742,14743,14744,14745,14746,14747,14748,14749,14750,14751,14752,14753,14754,14755,14756,14757,14758,14759,14760,14761,14762,14763,14764,14765,14766,14767,14768,14769,14770,14771,14772,14773,14774,14775,14776,14777,14778,14779,14780,14781,14782,14783,14784,14785,14786,14787,14788,14789,14790,14791,14792,14793,14794,14795,14796,14797,14798,14799,14800,14801,14802,14803,14804,14805,14806,14807,14808,14809,14810,14811,14812,14813,14814,14815,14816,14817,14818,14819,14820,14821,14822,14823,14824,14825,14826,14827,14828,14829,14830,14831,14832,14833,14834,14835,14836,14837,14838,14839,14840,14841,14842,14843,14844,14845,14846,14847,14848,14849, u=0)+deltaUZero30(u) on(14849,14850,14851,14852,14853,14854,14855,14856,14857,14858,14859,14860,14861,14862,14863,14864,14865,14866,14867,14868,14869,14870,14871,14872,14873,14874,14875,14876,14877,14878,14879,14880,14881,14882,14883,14884,14885,14886,14887,14888,14889,14890,14891,14892,14893,14894,14895,14896,14897,14898,14899,14900,14901,14902,14903,14904,14905,14906,14907,14908,14909,14910,14911,14912,14913,14914,14915,14916,14917,14918,14919,14920,14921,14922,14923,14924,14925,14926,14927,14928,14929,14930,14931,14932,14933,14934,14935,14936,14937,14938,14939,14940,14941,14942,14943,14944,14945,14946,14947,14948,14949,14950,14951,14952,14953,14954,14955,14956,14957,14958,14959,14960,14961,14962,14963,14964,14965,14966,14967,14968,14969,14970,14971,14972,14973,14974,14975,14976,14977,14978,14979,14980,14981,14982,14983,14984,14985,14986,14987,14988,14989,14990,14991,14992,14993,14994,14995,14996,14997,14998,14999,15000,15001,15002,15003,15004,15005,15006,15007,15008,15009,15010,15011,15012,15013,15014,15015,15016,15017,15018,15019,15020,15021,15022,15023,15024,15025,15026,15027,15028,15029,15030,15031,15032,15033,15034,15035,15036,15037,15038,15039,15040,15041,15042,15043,15044,15045,15046,15047,15048,15049,15050,15051,15052,15053,15054,15055,15056,15057,15058,15059,15060,15061,15062,15063,15064,15065,15066,15067,15068,15069,15070,15071,15072,15073,15074,15075,15076,15077,15078,15079,15080,15081,15082,15083,15084,15085,15086,15087,15088,15089,15090,15091,15092,15093,15094,15095,15096,15097,15098,15099,15100,15101,15102,15103,15104,15105,15106,15107,15108,15109,15110,15111,15112,15113,15114,15115,15116,15117,15118,15119,15120,15121,15122,15123,15124,15125,15126,15127,15128,15129,15130,15131,15132,15133,15134,15135,15136,15137,15138,15139,15140,15141,15142,15143,15144,15145,15146,15147,15148,15149,15150,15151,15152,15153,15154,15155,15156,15157,15158,15159,15160,15161,15162,15163,15164,15165,15166,15167,15168,15169,15170,15171,15172,15173,15174,15175,15176,15177,15178,15179,15180,15181,15182,15183,15184,15185,15186,15187,15188,15189,15190,15191,15192,15193,15194,15195,15196,15197,15198,15199,15200,15201,15202,15203,15204,15205,15206,15207,15208,15209,15210,15211,15212,15213,15214,15215,15216,15217,15218,15219,15220,15221,15222,15223,15224,15225,15226,15227,15228,15229,15230,15231,15232,15233,15234,15235,15236,15237,15238,15239,15240,15241,15242,15243,15244,15245,15246,15247,15248,15249,15250,15251,15252,15253,15254,15255,15256,15257,15258,15259,15260,15261,15262,15263,15264,15265,15266,15267,15268,15269,15270,15271,15272,15273,15274,15275,15276,15277,15278,15279,15280,15281,15282,15283,15284,15285,15286,15287,15288,15289,15290,15291,15292,15293,15294,15295,15296,15297,15298,15299,15300,15301,15302,15303,15304,15305,15306,15307,15308,15309,15310,15311,15312,15313,15314,15315,15316,15317,15318,15319,15320,15321,15322,15323,15324,15325,15326,15327,15328,15329,15330,15331,15332,15333,15334,15335,15336,15337,15338,15339,15340,15341,15342,15343,15344,15345,15346,15347,15348,15349,15350,15351,15352,15353,15354,15355,15356,15357,15358,15359,15360,15361, u=0)+deltaUZero31(u) on(15361,15362,15363,15364,15365,15366,15367,15368,15369,15370,15371,15372,15373,15374,15375,15376,15377,15378,15379,15380,15381,15382,15383,15384,15385,15386,15387,15388,15389,15390,15391,15392,15393,15394,15395,15396,15397,15398,15399,15400,15401,15402,15403,15404,15405,15406,15407,15408,15409,15410,15411,15412,15413,15414,15415,15416,15417,15418,15419,15420,15421,15422,15423,15424,15425,15426,15427,15428,15429,15430,15431,15432,15433,15434,15435,15436,15437,15438,15439,15440,15441,15442,15443,15444,15445,15446,15447,15448,15449,15450,15451,15452,15453,15454,15455,15456,15457,15458,15459,15460,15461,15462,15463,15464,15465,15466,15467,15468,15469,15470,15471,15472,15473,15474,15475,15476,15477,15478,15479,15480,15481,15482,15483,15484,15485,15486,15487,15488,15489,15490,15491,15492,15493,15494,15495,15496,15497,15498,15499,15500,15501,15502,15503,15504,15505,15506,15507,15508,15509,15510,15511,15512,15513,15514,15515,15516,15517,15518,15519,15520,15521,15522,15523,15524,15525,15526,15527,15528,15529,15530,15531,15532,15533,15534,15535,15536,15537,15538,15539,15540,15541,15542,15543,15544,15545,15546,15547,15548,15549,15550,15551,15552,15553,15554,15555,15556,15557,15558,15559,15560,15561,15562,15563,15564,15565,15566,15567,15568,15569,15570,15571,15572,15573,15574,15575,15576,15577,15578,15579,15580,15581,15582,15583,15584,15585,15586,15587,15588,15589,15590,15591,15592,15593,15594,15595,15596,15597,15598,15599,15600,15601,15602,15603,15604,15605,15606,15607,15608,15609,15610,15611,15612,15613,15614,15615,15616,15617,15618,15619,15620,15621,15622,15623,15624,15625,15626,15627,15628,15629,15630,15631,15632,15633,15634,15635,15636,15637,15638,15639,15640,15641,15642,15643,15644,15645,15646,15647,15648,15649,15650,15651,15652,15653,15654,15655,15656,15657,15658,15659,15660,15661,15662,15663,15664,15665,15666,15667,15668,15669,15670,15671,15672,15673,15674,15675,15676,15677,15678,15679,15680,15681,15682,15683,15684,15685,15686,15687,15688,15689,15690,15691,15692,15693,15694,15695,15696,15697,15698,15699,15700,15701,15702,15703,15704,15705,15706,15707,15708,15709,15710,15711,15712,15713,15714,15715,15716,15717,15718,15719,15720,15721,15722,15723,15724,15725,15726,15727,15728,15729,15730,15731,15732,15733,15734,15735,15736,15737,15738,15739,15740,15741,15742,15743,15744,15745,15746,15747,15748,15749,15750,15751,15752,15753,15754,15755,15756,15757,15758,15759,15760,15761,15762,15763,15764,15765,15766,15767,15768,15769,15770,15771,15772,15773,15774,15775,15776,15777,15778,15779,15780,15781,15782,15783,15784,15785,15786,15787,15788,15789,15790,15791,15792,15793,15794,15795,15796,15797,15798,15799,15800,15801,15802,15803,15804,15805,15806,15807,15808,15809,15810,15811,15812,15813,15814,15815,15816,15817,15818,15819,15820,15821,15822,15823,15824,15825,15826,15827,15828,15829,15830,15831,15832,15833,15834,15835,15836,15837,15838,15839,15840,15841,15842,15843,15844,15845,15846,15847,15848,15849,15850,15851,15852,15853,15854,15855,15856,15857,15858,15859,15860,15861,15862,15863,15864,15865,15866,15867,15868,15869,15870,15871,15872,15873, u=0)+deltaUZero32(u) on(15873,15874,15875,15876,15877,15878,15879,15880,15881,15882,15883,15884,15885,15886,15887,15888,15889,15890,15891,15892,15893,15894,15895,15896,15897,15898,15899,15900,15901,15902,15903,15904,15905,15906,15907,15908,15909,15910,15911,15912,15913,15914,15915,15916,15917,15918,15919,15920,15921,15922,15923,15924,15925,15926,15927,15928,15929,15930,15931,15932,15933,15934,15935,15936,15937,15938,15939,15940,15941,15942,15943,15944,15945,15946,15947,15948,15949,15950,15951,15952,15953,15954,15955,15956,15957,15958,15959,15960,15961,15962,15963,15964,15965,15966,15967,15968,15969,15970,15971,15972,15973,15974,15975,15976,15977,15978,15979,15980,15981,15982,15983,15984,15985,15986,15987,15988,15989,15990,15991,15992,15993,15994,15995,15996,15997,15998,15999,16000,16001,16002,16003,16004,16005,16006,16007,16008,16009,16010,16011,16012,16013,16014,16015,16016,16017,16018,16019,16020,16021,16022,16023,16024,16025,16026,16027,16028,16029,16030,16031,16032,16033,16034,16035,16036,16037,16038,16039,16040,16041,16042,16043,16044,16045,16046,16047,16048,16049,16050,16051,16052,16053,16054,16055,16056,16057,16058,16059,16060,16061,16062,16063,16064,16065,16066,16067,16068,16069,16070,16071,16072,16073,16074,16075,16076,16077,16078,16079,16080,16081,16082,16083,16084,16085,16086,16087,16088,16089,16090,16091,16092,16093,16094,16095,16096,16097,16098,16099,16100,16101,16102,16103,16104,16105,16106,16107,16108,16109,16110,16111,16112,16113,16114,16115,16116,16117,16118,16119,16120,16121,16122,16123,16124,16125,16126,16127,16128,16129,16130,16131,16132,16133,16134,16135,16136,16137,16138,16139,16140,16141,16142,16143,16144,16145,16146,16147,16148,16149,16150,16151,16152,16153,16154,16155,16156,16157,16158,16159,16160,16161,16162,16163,16164,16165,16166,16167,16168,16169,16170,16171,16172,16173,16174,16175,16176,16177,16178,16179,16180,16181,16182,16183,16184,16185,16186,16187,16188,16189,16190,16191,16192,16193,16194,16195,16196,16197,16198,16199,16200,16201,16202,16203,16204,16205,16206,16207,16208,16209,16210,16211,16212,16213,16214,16215,16216,16217,16218,16219,16220,16221,16222,16223,16224,16225,16226,16227,16228,16229,16230,16231,16232,16233,16234,16235,16236,16237,16238,16239,16240,16241,16242,16243,16244,16245,16246,16247,16248,16249,16250,16251,16252,16253,16254,16255,16256,16257,16258,16259,16260,16261,16262,16263,16264,16265,16266,16267,16268,16269,16270,16271,16272,16273,16274,16275,16276,16277,16278,16279,16280,16281,16282,16283,16284,16285,16286,16287,16288,16289,16290,16291,16292,16293,16294,16295,16296,16297,16298,16299,16300,16301,16302,16303,16304,16305,16306,16307,16308,16309,16310,16311,16312,16313,16314,16315,16316,16317,16318,16319,16320,16321,16322,16323,16324,16325,16326,16327,16328,16329,16330,16331,16332,16333,16334,16335,16336,16337,16338,16339,16340,16341,16342,16343,16344,16345,16346,16347,16348,16349,16350,16351,16352,16353,16354,16355,16356,16357,16358,16359,16360,16361,16362,16363,16364,16365,16366,16367,16368,16369,16370,16371,16372,16373,16374,16375,16376,16377,16378,16379,16380,16381,16382,16383,16384,16385, u=0)+deltaUZero33(u) on(16385,16386,16387,16388,16389,16390, u=0);
   32 @ 
   33 @     INFO("initiate structure for partitioning matrix")             if(mpirank == 0){ cout << "INFO: "; cout << "initiate structure for partitioning matrix" << endl; }
   34 @     createMat(Th, A, Pk)
  740 @ 
  741 @ 
  742 @ 
  743 @ 
  744 @        /* three-dimensional problem             */
  745 @         /* three-dimensional integral            */
  746 @ 
  747 @ 
  748 @        /* three-dimensional surface problem     */
  749 @         /* two-dimensional integral              */
  750 @ 
  751 @ 
  752 @        /* three-dimensional line problem        */
  753 @         /* one-dimensional integral              */
  754 @ 
  755 @ 
  756 @         /* two-dimensional problem               */
  757 @         /* two-dimensional integral              */
  758 @ 
  759 @ 
  760 @ 
  761 @   
  762 @ 
  763 @ 
  764 @          
  765 @     
  766 @ 
  767 @ 
  768 @   
  769 @  
  770 @  
  771 @  
  772 @   
  773 @   
  774 @   
  775 @   
  776 @ 
  777 @   
  778 @ 
  779 @ 
  780 @   
  781 @ 
  782 @    
  783 @ 
  784 @ 
  785 @ 
  786 @       
  787 @       
  788 @       
  789 @ 
  790 @ 
  791 @ 
  792 @ 
  793 @       
  794 @ 
  795 @ 
  796 @       
  797 @ 
  798 @       
  799 @ 
  800 @ 
  801 @ 
  802 @       
  803 @ 
  804 @      /* not currently implemented */
  805 @ 
  806 @ 
  807 @      /* not currently implemented */
  808 @ 
  809 @ 
  810 @                         
  811 @ 
  812 @  
  813 @       
  814 @     
  815 @       
  816 @     
  817 @ 
  818 @ 
  819 @ 
  820 @     
  821 @         
  822 @ 
  823 @ 
  824 @ 
  825 @ 
  826 @ 
  827 @       
  828 @ 
  829 @ 
  830 @ 
  831 @   
  832 @ 
  833 @ 
  834 @ 
  835 @ 
  836 @ 
  837 @ 
  838 @ 
  839 @ 
  840 @            /* three-dimensional problem             */
  841 @             /* three-dimensional integral            */
  842 @ 
  843 @ 
  844 @            /* three-dimensional surface problem     */
  845 @             /* two-dimensional integral              */
  846 @ 
  847 @ 
  848 @            /* three-dimensional line problem        */
  849 @             /* one-dimensional integral              */
  850 @ 
  851 @ 
  852 @             /* two-dimensional problem               */
  853 @             /* two-dimensional integral              */
  854 @ 
  855 @ 
  856 @       
  857 @       
  858 @ 
  859 @ 
  860 @ 
  740 @ IFMACRO(privateDmeshTh)
  741 & {
  742 & IFMACRO(!meshN)
  743 & IFMACRO(dimension,3)
  744 & NewMacro meshN()mesh3 EndMacro     /* three-dimensional problem             */
  745 & NewMacro intN()int3d EndMacro      /* three-dimensional integral            */
  746 & ENDIFMACRO
IFMACRO(dimension,3S)
  747 & NewMacro meshN()meshS EndMacro     /* three-dimensional surface problem     */
  748 & NewMacro intN()int2d EndMacro      /* two-dimensional integral              */
  749 & ENDIFMACRO
IFMACRO(dimension,3L)
  750 & NewMacro meshN()meshL EndMacro     /* three-dimensional line problem        */
  751 & NewMacro intN()int1d EndMacro      /* one-dimensional integral              */
  752 & ENDIFMACRO
IFMACRO(!meshN)
  753 & NewMacro meshN()mesh EndMacro      /* two-dimensional problem               */
  754 & NewMacro intN()int2d EndMacro      /* two-dimensional integral              */
  755 & ENDIFMACRO
ENDIFMACRO
IFMACRO(!ThComm)
  756 & NewMacro ThComm()mpiCommWorld EndMacro
ENDIFMACRO
IFMACRO(!privateCreateMatCheckDmesh)
  757 & if(Th.nv != privateDmeshThkhiDef[0].n || (privateDmeshThkhiDef[1].n && Th.nt != privateDmeshThkhiDef[1].n)) {
  758 &     DmeshCreate(Th)
  759 & }
  760 & ENDIFMACRO
NewMacro privateCreateMat()1 EndMacro
int[int][int] intersection;
  761 & real[int][int] DTab(1);
  762 & meshN[int] ThTab(1);
  763 & ThTab[0] = Th;
  764 & NewMacro privateDmeshThTab()privateDmeshTh EndMacro
NewMacro privateDmeshThTabkhi()privateDmeshThkhiDef EndMacro
NewMacro privateDmeshThTabintersection()privateDmeshThintersectionDef EndMacro
IFMACRO(!def)
  765 & NewMacro def(i)i EndMacro
ENDIFMACRO
IFMACRO(!init)
  766 & NewMacro init(i)i EndMacro
ENDIFMACRO
if(mpiSize(ThComm) > 1) {
  767 & IFMACRO(ThN2O)
  768 & IFMACRO(ThOriginal)
  769 & IFMACRO(ThRestriction)
  770 &     NewMacro privateDmeshN2O()ThN2O EndMacro
    NewMacro privateDmeshOriginal()ThOriginal EndMacro
    NewMacro privateDmeshRestriction()ThRestriction EndMacro
ENDIFMACRO
ENDIFMACRO
ENDIFMACRO
IFMACRO(!ThPkPart)
  771 &     NewMacro ThPkPart() Pk EndMacro
ENDIFMACRO
IFMACRO(ThCartesianPartitioning)
  772 &     NewMacro privateDmeshCartesianPartitioning() EndMacro
IFMACRO(!dimension)
  773 &     NewMacro dimension()2 EndMacro
ENDIFMACRO
ENDIFMACRO
IFMACRO(ThPostProcessD)
  774 &     NewMacro privateDmeshPostProcessD(arg)ThPostProcessD(arg) EndMacro
IFMACRO(removeZeros,true)
  775 &     exit(105); /* not currently implemented */
  776 & ENDIFMACRO
IFMACRO(trueRestrict,true)
  777 &     exit(105); /* not currently implemented */
  778 & ENDIFMACRO
ENDIFMACRO
    partitionPrivate(ThTab, privateCreateMat, privateCreateMat, privateCreateMat, privateCreateMat, privateCreateMat, mpiRank(ThComm), mpiSize(ThComm), 1, 1, 1, privateCreateMat, DTab,  Pk, intersection, ThComm, -111111, ThPkPart, def, init, 1)
  779 & }
  780 & else {
  781 &     fespace WhGlobalPrivate(Th,  Pk);
  782 &     DTab[0].resize(WhGlobalPrivate.ndof);
  783 &     DTab[0] = 1;
  784 &     intersection.resize(0);
  785 & IFMACRO(ThN2O)
  786 & IFMACRO(ThOriginal)
  787 & IFMACRO(ThRestriction)
  788 &     ThRestriction.resize(WhGlobalPrivate.ndof);
  789 &     ThRestriction = 0:WhGlobalPrivate.ndof - 1;
  790 & ENDIFMACRO
ENDIFMACRO
ENDIFMACRO
}
  791 & IFMACRO(!privateCreatePartition)
  792 & constructor( A, DTab[0].n, intersection, DTab[0], communicator = ThComm);
  793 & ENDIFMACRO
IFMACRO(privateCreatePartition)
  794 & privateCreatePartition.resize(DTab[0].n);
  795 & privateCreatePartition = DTab[0];
  796 & ENDIFMACRO
}
  797 & ENDIFMACRO
  741 @ {
  742 @ IFMACRO(!meshN)
  743 & IFMACRO(dimension,3)
  744 & NewMacro meshN()mesh3 EndMacro     /* three-dimensional problem             */
  745 & NewMacro intN()int3d EndMacro      /* three-dimensional integral            */
  746 & ENDIFMACRO
IFMACRO(dimension,3S)
  747 & NewMacro meshN()meshS EndMacro     /* three-dimensional surface problem     */
  748 & NewMacro intN()int2d EndMacro      /* two-dimensional integral              */
  749 & ENDIFMACRO
IFMACRO(dimension,3L)
  750 & NewMacro meshN()meshL EndMacro     /* three-dimensional line problem        */
  751 & NewMacro intN()int1d EndMacro      /* one-dimensional integral              */
  752 & ENDIFMACRO
IFMACRO(!meshN)
  753 & NewMacro meshN()mesh EndMacro      /* two-dimensional problem               */
  754 & NewMacro intN()int2d EndMacro      /* two-dimensional integral              */
  755 & ENDIFMACRO
ENDIFMACRO
  756 @ IFMACRO(!ThComm)
  757 & NewMacro ThComm()mpiCommWorld EndMacro
ENDIFMACRO
  757 @ NewMacro ThComm()mpiCommWorld EndMacro
  758 @ 
  758 @ IFMACRO(!privateCreateMatCheckDmesh)
  759 & if(Th.nv != privateDmeshThkhiDef[0].n || (privateDmeshThkhiDef[1].n && Th.nt != privateDmeshThkhiDef[1].n)) {
  760 &     DmeshCreate(Th)
  761 & }
  762 & ENDIFMACRO
  759 @ if(Th.nv != privateDmeshThkhiDef[0].n || (privateDmeshThkhiDef[1].n && Th.nt != privateDmeshThkhiDef[1].n)) {
  760 @     DmeshCreate(Th)buildDmesh(Th)
  553 @ 
  554 @   
  555 @   
  556 @   
  557 @  
  558 @  
  559 @ 
  560 @ 
  561 @ 
  562 @ 
  563 @        /* three-dimensional problem             */
  564 @         /* three-dimensional integral            */
  565 @ 
  566 @ 
  567 @        /* three-dimensional surface problem     */
  568 @         /* two-dimensional integral              */
  569 @ 
  570 @ 
  571 @        /* three-dimensional line problem        */
  572 @         /* one-dimensional integral              */
  573 @ 
  574 @ 
  575 @         /* two-dimensional problem               */
  576 @         /* two-dimensional integral              */
  577 @ 
  578 @ 
  579 @ 
  580 @   
  581 @ 
  582 @   
  583 @  
  584 @   
  585 @   
  586 @   
  587 @ 
  588 @   
  589 @ 
  590 @  /* not currently implemented */
  591 @ 
  592 @ 
  593 @ 
  594 @ 
  595 @  /* not currently implemented */
  596 @ 
  597 @       
  598 @ 
  599 @ 
  600 @ 
  601 @  /* not currently implemented */
  602 @ 
  603 @       
  604 @ 
  605 @ 
  606 @ 
  607 @ 
  608 @ 
  609 @   
  610 @ 
  611 @   
  612 @ 
  613 @  /* not currently implemented */
  614 @ 
  615 @ 
  616 @  /* not currently implemented */
  617 @ 
  618 @ 
  619 @  /* not currently implemented */
  620 @ 
  621 @ 
  622 @ 
  623 @    
  624 @ 
  625 @ 
  626 @    
  627 @ 
  628 @ 
  629 @  
  630 @          
  631 @ 
  632 @ 
  633 @      
  634 @ 
  635 @ 
  636 @ 
  637 @ 
  638 @ 
  553 @ IFMACRO(!privateDmeshTh)
  554 & NewMacro privateDmeshTh()privateDmeshTh EndMacro
NewMacro privateDmeshThkhiDef()privateDmeshThkhiDef EndMacro
NewMacro privateDmeshThintersectionDef()privateDmeshThintersectionDef EndMacro
real[int][int] privateDmeshThkhiDef(2);
  555 & real[int][int] privateDmeshThintersectionDef;
  556 & ENDIFMACRO
  557 @ {
  558 @ IFMACRO(!meshN)
  559 & IFMACRO(dimension,3)
  560 & NewMacro meshN()mesh3 EndMacro     /* three-dimensional problem             */
  561 & NewMacro intN()int3d EndMacro      /* three-dimensional integral            */
  562 & ENDIFMACRO
IFMACRO(dimension,3S)
  563 & NewMacro meshN()meshS EndMacro     /* three-dimensional surface problem     */
  564 & NewMacro intN()int2d EndMacro      /* two-dimensional integral              */
  565 & ENDIFMACRO
IFMACRO(dimension,3L)
  566 & NewMacro meshN()meshL EndMacro     /* three-dimensional line problem        */
  567 & NewMacro intN()int1d EndMacro      /* one-dimensional integral              */
  568 & ENDIFMACRO
IFMACRO(!meshN)
  569 & NewMacro meshN()mesh EndMacro      /* two-dimensional problem               */
  570 & NewMacro intN()int2d EndMacro      /* two-dimensional integral              */
  571 & ENDIFMACRO
ENDIFMACRO
  572 @ IFMACRO(!ThComm)
  573 & NewMacro mpiCommWorld()mpiCommWorld EndMacro
ENDIFMACRO
  574 @ NewMacro privateBuildDmesh()1 EndMacro
  575 @ int[int][int] intersection;
  576 @ NewMacro privateDmeshThTab()privateDmeshTh EndMacro
  577 @ NewMacro privateDmeshThTabkhi()privateDmeshThkhiDef EndMacro
  578 @ NewMacro privateDmeshThTabintersection()privateDmeshThintersectionDef EndMacro
  579 @ IFMACRO(ThN2O)
  580 & NewMacro privateDmeshN2O()ThN2O EndMacro
IFMACRO(ThRefinementFactor)
  581 & exit(10); /* not currently implemented */
  582 & ENDIFMACRO
ENDIFMACRO
  583 @ IFMACRO(ThUserPartitioning)
  584 & IFMACRO(ThRefinementFactor)
  585 & exit(11); /* not currently implemented */
  586 & ENDIFMACRO
buildWithPartitioning(Th, ThUserPartitioning, 1, intersection, privateDmeshThkhiDef[0], P1, mpiCommWorld);
  587 & ENDIFMACRO
  588 @ IFMACRO(ThPeriodicity)
  589 & IFMACRO(ThRefinementFactor)
  590 & exit(12); /* not currently implemented */
  591 & ENDIFMACRO
buildPeriodic(Th, 1, intersection, privateDmeshThkhiDef[0], P1, mpiCommWorld, ThPeriodicity);
  592 & ENDIFMACRO
  593 @ IFMACRO(!ThUserPartitioning)
  594 & IFMACRO(!ThPeriodicity)
  595 & IFMACRO(ThCartesianPartitioning)
  596 & IFMACRO(!dimension)
  597 & NewMacro dimension()2 EndMacro
ENDIFMACRO
NewMacro privateDmeshCartesianPartitioning() EndMacro
IFMACRO(ThRefinementFactor)
  598 & exit(13); /* not currently implemented */
  599 & ENDIFMACRO
IFMACRO(removeZeros,true)
  600 & exit(103); /* not currently implemented */
  601 & ENDIFMACRO
IFMACRO(trueRestrict,true)
  602 & exit(103); /* not currently implemented */
  603 & ENDIFMACRO
ENDIFMACRO
IFMACRO(!ThRefinementFactor)
  604 & int privateS = 1;
  605 & ENDIFMACRO
IFMACRO(ThRefinementFactor)
  606 & int privateS = ThRefinementFactor;
  607 & ENDIFMACRO
IFMACRO(ThOverlap)
  608 & meshN privateBorder;
  609 & buildOverlap(Th, privateBorder, -111111, privateS, ThOverlap, intersection, privateDmeshThkhiDef[0], P1, mpiCommWorld, false);
  610 & ENDIFMACRO
IFMACRO(!ThOverlap)
  611 & build(Th, privateS, intersection, privateDmeshThkhiDef[0], P1, mpiCommWorld);
  612 & ENDIFMACRO
ENDIFMACRO
ENDIFMACRO
  594 @ IFMACRO(!ThPeriodicity)
  595 & IFMACRO(ThCartesianPartitioning)
  596 & IFMACRO(!dimension)
  597 & NewMacro dimension()2 EndMacro
ENDIFMACRO
NewMacro privateDmeshCartesianPartitioning() EndMacro
IFMACRO(ThRefinementFactor)
  598 & exit(13); /* not currently implemented */
  599 & ENDIFMACRO
IFMACRO(removeZeros,true)
  600 & exit(103); /* not currently implemented */
  601 & ENDIFMACRO
IFMACRO(trueRestrict,true)
  602 & exit(103); /* not currently implemented */
  603 & ENDIFMACRO
ENDIFMACRO
IFMACRO(!ThRefinementFactor)
  604 & int privateS = 1;
  605 & ENDIFMACRO
IFMACRO(ThRefinementFactor)
  606 & int privateS = ThRefinementFactor;
  607 & ENDIFMACRO
IFMACRO(ThOverlap)
  608 & meshN privateBorder;
  609 & buildOverlap(Th, privateBorder, -111111, privateS, ThOverlap, intersection, privateDmeshThkhiDef[0], P1, mpiCommWorld, false);
  610 & ENDIFMACRO
IFMACRO(!ThOverlap)
  611 & build(Th, privateS, intersection, privateDmeshThkhiDef[0], P1, mpiCommWorld);
  612 & ENDIFMACRO
ENDIFMACRO
  595 @ IFMACRO(ThCartesianPartitioning)
  596 & IFMACRO(!dimension)
  597 & NewMacro dimension()2 EndMacro
ENDIFMACRO
NewMacro privateDmeshCartesianPartitioning() EndMacro
IFMACRO(ThRefinementFactor)
  598 & exit(13); /* not currently implemented */
  599 & ENDIFMACRO
IFMACRO(removeZeros,true)
  600 & exit(103); /* not currently implemented */
  601 & ENDIFMACRO
IFMACRO(trueRestrict,true)
  602 & exit(103); /* not currently implemented */
  603 & ENDIFMACRO
ENDIFMACRO
  604 @ IFMACRO(!ThRefinementFactor)
  605 & int privateS = 1;
  606 & ENDIFMACRO
  605 @ int privateS = 1;
  606 @ 
  607 @ IFMACRO(ThRefinementFactor)
  608 & int privateS = ThRefinementFactor;
  609 & ENDIFMACRO
  610 @ IFMACRO(ThOverlap)
  611 & meshN privateBorder;
  612 & buildOverlap(Th, privateBorder, -111111, privateS, ThOverlap, intersection, privateDmeshThkhiDef[0], P1, mpiCommWorld, false);
  613 & ENDIFMACRO
  614 @ IFMACRO(!ThOverlap)
  615 & build(Th, privateS, intersection, privateDmeshThkhiDef[0], P1, mpiCommWorld);
  616 & ENDIFMACRO
  615 @ build(Th, privateS, intersection, privateDmeshThkhiDef[0], P1, mpiCommWorld) 
 1143 @      
 1144 @      
 1145 @      
 1146 @        
 1147 @        
 1148 @        
 1149 @                    
 1150 @  {
 1143 @     int[int] emptyArray(0);
 1144 @     real[int] emptyRealArray(0);
 1145 @     meshNmesh3 ThBorder;
 1146 @     int fakeInterface = -111111;
 1147 @     int overlap = 1;
 1148 @     bool excluded = false;
 1149 @     buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface,  privateS, overlap,  intersection,  privateDmeshThkhiDef[0],  P1,  mpiCommWorld, excluded,  P1, def, init, emptyArray, emptyRealArray, 1) 
  968 @      
  969 @      
  970 @      
  971 @       
  972 @      
  973 @                      
  974 @       
  975 @       
  976 @     
  977 @       
  978 @  {
  968 @     meshNmesh3[int] ThTab(1);
  969 @     meshNmesh3[int] ThBorderTab(1);
  970 @     real[int][int] DTab(1);
  971 @     ThTab[0] = Th;
  972 @     matrix[int] prolongation(0);
  973 @     buildOverlapEdgePeriodicRecursive(ThTab, ThBorderTab,  fakeInterface,  privateS,  overlap, 1, prolongation,  intersection, DTab,  P1,  mpiCommWorld,  excluded,  P1,  def,  init,  emptyArray,  emptyRealArray,  1) 
  826 @ 
  827 @       
  828 @ 
  829 @ 
  830 @       
  831 @ 
  832 @     
  833 @     
  834 @       
  835 @        
  836 @          
  837 @              
  838 @           
  839 @           
  840 @          
  841 @ 
  842 @ 
  843 @         
  844 @                
  845 @              
  846 @                           
  847 @ 
  848 @                                                                               
  849 @                
  850 @                 
  851 @                 
  852 @                  
  853 @                       
  854 @ 
  855 @ 
  856 @                                                                                      
  857 @               
  858 @                 
  859 @                 
  860 @                  
  861 @               
  862 @                 
  863 @                 
  864 @                  
  865 @                               
  866 @ 
  867 @         
  868 @ 
  869 @ 
  870 @                
  871 @               
  872 @              
  873 @                
  874 @                  
  875 @                         
  876 @                            
  877 @                           
  878 @                 
  879 @                      
  880 @                  
  881 @                          
  882 @                         
  883 @                          
  884 @                             
  885 @                         
  886 @                 
  887 @             
  888 @                
  889 @                   
  890 @                             
  891 @                    
  892 @                       
  893 @                      
  894 @                        
  895 @                             
  896 @                           
  897 @                     
  898 @                     
  899 @                           
  900 @                       
  901 @                 
  902 @                  
  903 @                       
  904 @                 
  905 @             
  906 @                        
  907 @                   
  908 @                  
  909 @                    
  910 @                          
  911 @                       
  912 @                 
  913 @                 
  914 @                       
  915 @                   
  916 @             
  917 @             
  918 @                    
  919 @                   
  920 @                           
  921 @               
  922 @         
  923 @          
  924 @               
  925 @         
  926 @ 
  927 @ 
  928 @ 
  929 @           
  930 @ 
  931 @ 
  932 @              
  933 @ 
  934 @ 
  935 @                    
  936 @ 
  937 @            
  938 @             
  939 @               
  940 @         
  941 @ 
  942 @           
  943 @           
  944 @                             
  945 @ 
  946 @ 
  947 @                             
  948 @ 
  949 @     
  950 @         
  951 @                   
  952 @                     
  953 @                 
  954 @               
  955 @                  
  956 @             
  957 @               
  958 @         
  959 @            
  960 @ 
  961 @ 
  962 @               
  963 @                          
  964 @              
  965 @                 
  966 @                   
  967 @             
  968 @ 
  969 @ 
  970 @               
  971 @                       
  972 @ 
  973 @ 
  974 @ 
  975 @               
  976 @                       
  977 @ 
  978 @         
  979 @           
  980 @         
  981 @           
  982 @     
  983 @        
  984 @         
  985 @           
  986 @                       
  987 @     
  988 @  {
  826 @ IFMACRO(!def)
  827 &     NewMacro def(i)i EndMacro
ENDIFMACRO
  827 @     NewMacro def(i)i EndMacro )  
  828 @ 
  828 @ IFMACRO(!init)
  829 &     NewMacro init(i)i EndMacro
ENDIFMACRO
  829 @     NewMacro init(i)i EndMacro )  
  830 @ 
  830 @     ThTab.resize( 1);
  831 @      ThBorderTab.resize( 1);
  832 @      prolongation.resize( 1 - 1);
  833 @     real timerPartition = mpiWtime();
  834 @     if(mpiSize( mpiCommWorld) > 1 && ! excluded) {
  835 @         meshNmesh3 ThGlobal = ThTab[ 1 - 1];
  836 @         fespace PhGlobalPrivate(ThGlobal, P0);
  837 @         fespace VhGlobalPrivate(ThGlobal, P1);
  838 @         PhGlobalPrivate partGlobal;
  839 @ IFMACRO(!privateReconstructDmesh)
  840 & IFMACRO(privateDmeshCartesianPartitioning)
  841 &         {
  842 &             real[int] bb(2 * dimension);
  843 &             boundingbox(ThGlobal, bb);
  844 &             PhGlobalPrivate xx = x / (bb[1] - bb[0]), yy = y / (bb[3] - bb[2])
  845 & IFMACRO(dimension,2)
  846 &                                                                               ;
  847 &             int i = int(sqrt(mpiSize( mpiCommWorld)));
  848 &             while(mpiSize( mpiCommWorld) % i != 0)
  849 &                 --i;
  850 &             int j = mpiSize( mpiCommWorld) / i;
  851 &             partGlobal = int(j * xx) + int(i * yy) * j;
  852 & ENDIFMACRO
IFMACRO(dimension,3)
  853 &                                                                               , zz = z / (bb[5] - bb[4]);
  854 &             i = int(mpiSize( mpiCommWorld)^(0.333333333333333));
  855 &             while(mpiSize( mpiCommWorld) % i != 0)
  856 &                 --i;
  857 &             real p = mpiSize( mpiCommWorld) / i;
  858 &             j = int(sqrt(p));
  859 &             while(p % j != 0)
  860 &                 --j;
  861 &             real k = int(p / j);
  862 &             partGlobal = int(i * zz) * k * j + int(j * yy) * k + int(k * xx);
  863 & ENDIFMACRO
        }
  864 & ENDIFMACRO
IFMACRO(!privateDmeshCartesianPartitioning)
  865 &         if( emptyRealArray.n != PhGlobalPrivate.ndof ||  emptyArray.n > 0) {
  866 &             timerPartition = mpiWtime();
  867 &             meshN ThGlobalPeriodic;
  868 &             if( emptyArray.n > 0) {
  869 &                 VhGlobalPrivate marker;
  870 &                 for(int i = 0; i <  emptyArray.n; ++i) {
  871 &                     varf vMarker(uPrivate, vPrivate) = on( emptyArray[i], uPrivate = 1.0);
  872 &                     marker[] += vMarker(0, VhGlobalPrivate, tgv = -1);
  873 &                 }
  874 &                 PhGlobalPrivate partPeriodic = marker > 0.1;
  875 &                 while(1) {
  876 &                     AddLayers(ThGlobal, partPeriodic[], 1 +  overlap, marker[]);
  877 &                     partPeriodic = marker > 0.001;
  878 &                     ThGlobalPeriodic = trunc(ThGlobal, partPeriodic < 0.999);
  879 &                     if(ThGlobal.nt / real(ThGlobalPeriodic.nt) > mpisize / real(mpisize - 1))
  880 &                         break;
  881 &                 }
  882 &             }
  883 &             if(mpiRank( mpiCommWorld) == 0) {
  884 &                 if(verbosity > 0)
  885 &                     cout.scientific << " --- global mesh of " << ThGlobal.nt << " elements (prior to refinement) partitioned with " << Stringification(partitioner);
  886 &                 if( emptyArray.n > 0) {
  887 &                     fespace PhPeriodicPrivate(ThGlobalPeriodic, P0);
  888 &                     PhPeriodicPrivate partPeriodic;
  889 &                     if(mpiSize( mpiCommWorld) > 2) {
  890 &                         partitionerSeq(partPeriodic[], ThGlobalPeriodic, mpiSize( mpiCommWorld) - 1);
  891 &                         partPeriodic[] += 1.0;
  892 &                     }
  893 &                     else
                        partPeriodic[] = 1.0;
  894 &                     partGlobal = partPeriodic;
  895 &                 }
  896 &                 else {
  897 &                     partitionerSeq(partGlobal[], ThGlobal, mpiSize( mpiCommWorld));
  898 &                 }
  899 &             }
  900 &             if( emptyArray.n > 0 && Stringification(partitioner) != "metis" && Stringification(partitioner) != "scotch") {
  901 &                 fespace PhPeriodicPrivate(ThGlobalPeriodic, P0);
  902 &                 PhPeriodicPrivate partPeriodic;
  903 &                 if(mpiSize( mpiCommWorld) > 2) {
  904 &                     partitionerPar(partPeriodic[], ThGlobalPeriodic,  mpiCommWorld, mpiSize( mpiCommWorld) - 1);
  905 &                     partPeriodic[] += 1.0;
  906 &                 }
  907 &                 else
                    partPeriodic[] = 1.0;
  908 &                 partGlobal = partPeriodic;
  909 &             }
  910 &             else
                partitionerPar(partGlobal[], ThGlobal,  mpiCommWorld, mpiSize( mpiCommWorld));
  911 &             if(mpiRank( mpiCommWorld) == 0 && verbosity > 0)
  912 &                 cout.scientific << " (in " << mpiWtime() - timerPartition << ")" << endl;
  913 &             timerPartition = mpiWtime();
  914 &         }
  915 &         else {
  916 &             partGlobal[] =  emptyRealArray;
  917 &         }
  918 & ENDIFMACRO
ENDIFMACRO
  840 @ IFMACRO(privateDmeshCartesianPartitioning)
  841 &         {
  842 &             real[int] bb(2 * dimension);
  843 &             boundingbox(ThGlobal, bb);
  844 &             PhGlobalPrivate xx = x / (bb[1] - bb[0]), yy = y / (bb[3] - bb[2])
  845 & IFMACRO(dimension,2)
  846 &                                                                               ;
  847 &             int i = int(sqrt(mpiSize( mpiCommWorld)));
  848 &             while(mpiSize( mpiCommWorld) % i != 0)
  849 &                 --i;
  850 &             int j = mpiSize( mpiCommWorld) / i;
  851 &             partGlobal = int(j * xx) + int(i * yy) * j;
  852 & ENDIFMACRO
IFMACRO(dimension,3)
  853 &                                                                               , zz = z / (bb[5] - bb[4]);
  854 &             i = int(mpiSize( mpiCommWorld)^(0.333333333333333));
  855 &             while(mpiSize( mpiCommWorld) % i != 0)
  856 &                 --i;
  857 &             real p = mpiSize( mpiCommWorld) / i;
  858 &             j = int(sqrt(p));
  859 &             while(p % j != 0)
  860 &                 --j;
  861 &             real k = int(p / j);
  862 &             partGlobal = int(i * zz) * k * j + int(j * yy) * k + int(k * xx);
  863 & ENDIFMACRO
        }
  864 & ENDIFMACRO
  865 @ IFMACRO(!privateDmeshCartesianPartitioning)
  866 &         if( emptyRealArray.n != PhGlobalPrivate.ndof ||  emptyArray.n > 0) {
  867 &             timerPartition = mpiWtime();
  868 &             meshN ThGlobalPeriodic;
  869 &             if( emptyArray.n > 0) {
  870 &                 VhGlobalPrivate marker;
  871 &                 for(int i = 0; i <  emptyArray.n; ++i) {
  872 &                     varf vMarker(uPrivate, vPrivate) = on( emptyArray[i], uPrivate = 1.0);
  873 &                     marker[] += vMarker(0, VhGlobalPrivate, tgv = -1);
  874 &                 }
  875 &                 PhGlobalPrivate partPeriodic = marker > 0.1;
  876 &                 while(1) {
  877 &                     AddLayers(ThGlobal, partPeriodic[], 1 +  overlap, marker[]);
  878 &                     partPeriodic = marker > 0.001;
  879 &                     ThGlobalPeriodic = trunc(ThGlobal, partPeriodic < 0.999);
  880 &                     if(ThGlobal.nt / real(ThGlobalPeriodic.nt) > mpisize / real(mpisize - 1))
  881 &                         break;
  882 &                 }
  883 &             }
  884 &             if(mpiRank( mpiCommWorld) == 0) {
  885 &                 if(verbosity > 0)
  886 &                     cout.scientific << " --- global mesh of " << ThGlobal.nt << " elements (prior to refinement) partitioned with " << Stringification(partitioner);
  887 &                 if( emptyArray.n > 0) {
  888 &                     fespace PhPeriodicPrivate(ThGlobalPeriodic, P0);
  889 &                     PhPeriodicPrivate partPeriodic;
  890 &                     if(mpiSize( mpiCommWorld) > 2) {
  891 &                         partitionerSeq(partPeriodic[], ThGlobalPeriodic, mpiSize( mpiCommWorld) - 1);
  892 &                         partPeriodic[] += 1.0;
  893 &                     }
  894 &                     else
                        partPeriodic[] = 1.0;
  895 &                     partGlobal = partPeriodic;
  896 &                 }
  897 &                 else {
  898 &                     partitionerSeq(partGlobal[], ThGlobal, mpiSize( mpiCommWorld));
  899 &                 }
  900 &             }
  901 &             if( emptyArray.n > 0 && Stringification(partitioner) != "metis" && Stringification(partitioner) != "scotch") {
  902 &                 fespace PhPeriodicPrivate(ThGlobalPeriodic, P0);
  903 &                 PhPeriodicPrivate partPeriodic;
  904 &                 if(mpiSize( mpiCommWorld) > 2) {
  905 &                     partitionerPar(partPeriodic[], ThGlobalPeriodic,  mpiCommWorld, mpiSize( mpiCommWorld) - 1);
  906 &                     partPeriodic[] += 1.0;
  907 &                 }
  908 &                 else
                    partPeriodic[] = 1.0;
  909 &                 partGlobal = partPeriodic;
  910 &             }
  911 &             else
                partitionerPar(partGlobal[], ThGlobal,  mpiCommWorld, mpiSize( mpiCommWorld));
  912 &             if(mpiRank( mpiCommWorld) == 0 && verbosity > 0)
  913 &                 cout.scientific << " (in " << mpiWtime() - timerPartition << ")" << endl;
  914 &             timerPartition = mpiWtime();
  915 &         }
  916 &         else {
  917 &             partGlobal[] =  emptyRealArray;
  918 &         }
  919 & ENDIFMACRO
  866 @         if( emptyRealArray.n != PhGlobalPrivate.ndof ||  emptyArray.n > 0) {
  867 @             timerPartition = mpiWtime();
  868 @             meshNmesh3 ThGlobalPeriodic;
  869 @             if( emptyArray.n > 0) {
  870 @                 VhGlobalPrivate marker;
  871 @                 for(int i = 0; i <  emptyArray.n; ++i) {
  872 @                     varf vMarker(uPrivate, vPrivate) = on( emptyArray[i], uPrivate = 1.0);
  873 @                     marker[] += vMarker(0, VhGlobalPrivate, tgv = -1);
  874 @                 }
  875 @                 PhGlobalPrivate partPeriodic = marker > 0.1;
  876 @                 while(1) {
  877 @                     AddLayers(ThGlobal, partPeriodic[], 1 +  overlap, marker[]);
  878 @                     partPeriodic = marker > 0.001;
  879 @                     ThGlobalPeriodic = trunc(ThGlobal, partPeriodic < 0.999);
  880 @                     if(ThGlobal.nt / real(ThGlobalPeriodic.nt) > mpisize / real(mpisize - 1))
  881 @                         break;
  882 @                 }
  883 @             }
  884 @             if(mpiRank( mpiCommWorld) == 0) {
  885 @                 if(verbosity > 0)
  886 @                     cout.scientific << " --- global mesh of " << ThGlobal.nt << " elements (prior to refinement) partitioned with 
  ... : " << Stringification((partitionerparmetisparmetis));
  887 @                 if( emptyArray.n > 0) {
  888 @                     fespace PhPeriodicPrivate(ThGlobalPeriodic, P0);
  889 @                     PhPeriodicPrivate partPeriodic;
  890 @                     if(mpiSize( mpiCommWorld) > 2) {
  891 @                         partitionerSeq(partPeriodic[], ThGlobalPeriodic, mpiSize( mpiCommWorld) - 1);
  892 @                         partPeriodic[] += 1.0;
  893 @                     }
  894 @                     else
  895 @                         partPeriodic[] = 1.0;
  896 @                     partGlobal = partPeriodic;
  897 @                 }
  898 @                 else {
  899 @                     partitionerSeq(partGlobal[], ThGlobal, mpiSize( mpiCommWorld));
  900 @                 }
  901 @             }
  902 @             if( emptyArray.n > 0 && Stringification((partitionerparmetisparmetis)) != "metis" && Stringification((partitionerparmetisparmetis)) != "scotch") {
  903 @                 fespace PhPeriodicPrivate(ThGlobalPeriodic, P0);
  904 @                 PhPeriodicPrivate partPeriodic;
  905 @                 if(mpiSize( mpiCommWorld) > 2) {
  906 @                     partitionerPar(partPeriodic[], ThGlobalPeriodic,  mpiCommWorld, mpiSize( mpiCommWorld) - 1)         parmetis(partPeriodic[],  ThGlobalPeriodic,  mpiSize( mpiCommWorld) - 1, communicator =  mpiCommWorld, worker = getARGV("-parmetis_worker", 1));
  907 @                     partPeriodic[] += 1.0;
  908 @                 }
  909 @                 else
  910 @                     partPeriodic[] = 1.0;
  911 @                 partGlobal = partPeriodic;
  912 @             }
  913 @             else
  914 @                 partitionerPar(partGlobal[], ThGlobal,  mpiCommWorld, mpiSize( mpiCommWorld))         parmetis(partGlobal[],  ThGlobal,  mpiSize( mpiCommWorld), communicator =  mpiCommWorld, worker = getARGV("-parmetis_worker", 1));
  915 @             if(mpiRank( mpiCommWorld) == 0 && verbosity > 0)
  916 @                 cout.scientific << " (in " << mpiWtime() - timerPartition << ")" << endl;
  917 @             timerPartition = mpiWtime();
  918 @         }
  919 @         else {
  920 @             partGlobal[] =  emptyRealArray;
  921 @         }
  922 @ 
  920 @ 
  919 @ IFMACRO(privateReconstructDmesh)
  920 &         partGlobal[] =  emptyRealArray;
  921 & ENDIFMACRO
  922 @ IFMACRO(!trueRestrict)
  923 &         bool trueRestrict = usedARGV("-true_restrict") != -1;
  924 & ENDIFMACRO
  923 @         bool trueRestrict = usedARGV("-true_restrict") != -1;
  924 @ 
  925 @ IFMACRO(!removeZeros)
  926 &         bool removeZeros = trueRestrict &&  overlap == 1 && usedARGV("-remove_zeros") != -1;
  927 & ENDIFMACRO
  926 @         bool removeZeros = trueRestrict &&  overlap == 1 && usedARGV("-remove_zeros") != -1;
  927 @ 
  928 @         if(verbosity > 0) {
  929 @             mpiBarrier( mpiCommWorld);
  930 @             timerPartition = mpiWtime();
  931 @         }
  932 @ IFMACRO(privateBuildDmesh)
  933 &         NewMacro defP1(i)i EndMacro
        NewMacro initP1(i)i EndMacro
        partitionPrivate(ThTab,  ThBorderTab, ThGlobal, PhGlobalPrivate, VhGlobalPrivate, partGlobal, mpiRank( mpiCommWorld), mpiSize( mpiCommWorld),  privateS,  overlap,  1,  prolongation,  DTab,  P1,  intersection,  mpiCommWorld,  fakeInterface,  P1, defP1, initP1,  1)
  934 & ENDIFMACRO
  933 @         NewMacro defP1(i)i EndMacro )  
  934 @         NewMacro initP1(i)i EndMacro )  
  935 @         partitionPrivate(ThTab,  ThBorderTab, ThGlobal, PhGlobalPrivate, VhGlobalPrivate, partGlobal, mpiRank( mpiCommWorld), mpiSize( mpiCommWorld),  privateS,  overlap,  1,  prolongation,  DTab,  P1,  intersection,  mpiCommWorld,  fakeInterface,  P1, defP1, initP1,  1) 
   86 @        
   87 @       
   88 @       
   89 @ 
   90 @ 
   91 @     
   92 @     
   93 @      
   94 @      
   95 @     
   96 @            
   97 @                   
   98 @              
   99 @          
  100 @          
  101 @            
  102 @                    
  103 @         
  104 @             
  105 @         
  106 @                         
  107 @          
  108 @               
  109 @             
  110 @                
  111 @                     
  112 @                   
  113 @               
  114 @                  
  115 @         
  116 @     
  117 @       
  118 @ 
  119 @                
  120 @ 
  121 @        
  122 @      
  123 @        
  124 @        
  125 @                
  126 @                
  127 @                
  128 @                  
  129 @     
  130 @     
  131 @           
  132 @       
  133 @ 
  134 @                  
  135 @ 
  136 @        
  137 @        
  138 @                        
  139 @ 
  140 @                                                                                                     
  141 @ 
  142 @                                                                                                                          
  143 @         
  144 @         
  145 @ 
  146 @ 
  147 @ 
  148 @                  
  149 @ 
  150 @        
  151 @        
  152 @                        
  153 @ 
  154 @                                                                                                     
  155 @ 
  156 @                                                                                                                             
  157 @         
  158 @         
  159 @ 
  160 @ 
  161 @     
  162 @            
  163 @            
  164 @         
  165 @           
  166 @         
  167 @           
  168 @     
  169 @ 
  170 @ 
  171 @        
  172 @           
  173 @            
  174 @                
  175 @                       
  176 @                       
  177 @                           
  178 @                     
  179 @                   
  180 @                      
  181 @             
  182 @         
  183 @         
  184 @                      
  185 @                     
  186 @     
  187 @              
  188 @            
  189 @               
  190 @                                     
  191 @               
  192 @                           
  193 @                                    
  194 @                          
  195 @                       
  196 @                        
  197 @                       
  198 @                        
  199 @                          
  200 @                 
  201 @             
  202 @                          
  203 @                         
  204 @         
  205 @     
  206 @         
  207 @ 
  208 @   
  209 @        
  210 @     
  211 @ 
  212 @ 
  213 @       
  214 @     
  215 @ 
  216 @             
  217 @      
  218 @       
  219 @      
  220 @            
  221 @          
  222 @           
  223 @           
  224 @           
  225 @     
  226 @     
  227 @           
  228 @     
  229 @        
  230 @     
  231 @              
  232 @         
  233 @         
  234 @                 
  235 @                    
  236 @                
  237 @                 
  238 @                          
  239 @                       
  240 @                         
  241 @                     
  242 @                             
  243 @                       
  244 @                 
  245 @             
  246 @         
  247 @     
  248 @        
  249 @         
  250 @           
  251 @     
  252 @         
  253 @ 
  254 @ 
  255 @       
  256 @          
  257 @         
  258 @     
  259 @       
  260 @         
  261 @ 
  262 @ 
  263 @ 
  264 @     
  265 @             
  266 @           
  267 @         
  268 @             
  269 @     
  270 @ 
  271 @ 
  272 @ 
  273 @ 
  274 @ 
  275 @     
  276 @           
  277 @ 
  278 @      
  279 @ 
  280 @      
  281 @           
  282 @         
  283 @ 
  284 @                   
  285 @                 
  286 @              
  287 @              
  288 @                 
  289 @                        
  290 @ 
  291 @                
  292 @              
  293 @                              
  294 @ 
  295 @                                                                                                              
  296 @ 
  297 @                                                                                                                                      
  298 @ 
  299 @ 
  300 @                        
  301 @                 
  302 @                   
  303 @             
  304 @             
  305 @ 
  306 @             
  307 @ 
  308 @                   
  309 @                   
  310 @ 
  311 @ 
  312 @                   
  313 @                   
  314 @ 
  315 @                           
  316 @             
  317 @         
  318 @     
  319 @ 
  320 @             
  321 @                
  322 @                     
  323 @                         
  324 @                           
  325 @             
  326 @               
  327 @           
  328 @           
  329 @            
  330 @                
  331 @                  
  332 @          
  333 @            
  334 @             
  335 @            
  336 @                 
  337 @                   
  338 @              
  339 @                
  340 @                 
  341 @               
  342 @         
  343 @           
  344 @           
  345 @          
  346 @           
  347 @         
  348 @           
  349 @     
  350 @     
  351 @           
  352 @      
  353 @               
  354 @            
  355 @                 
  356 @                
  357 @                     
  358 @                             
  359 @                           
  360 @                 
  361 @             
  362 @         
  363 @     
  364 @            
  365 @           
  366 @          
  367 @            
  368 @          
  369 @         
  370 @               
  371 @              
  372 @              
  373 @                     
  374 @                   
  375 @                    
  376 @                   
  377 @                      
  378 @             
  379 @              
  380 @              
  381 @ 
  382 @                        
  383 @ 
  384 @ 
  385 @             
  386 @                  
  387 @                            
  388 @                 
  389 @                   
  390 @                 
  391 @                   
  392 @             
  393 @ 
  394 @               
  395 @               
  396 @                       
  397 @                    
  398 @                    
  399 @                       
  400 @                              
  401 @                        
  402 @                           
  403 @                           
  404 @                          
  405 @                           
  406 @                                    
  407 @                     
  408 @                      
  409 @                           
  410 @                             
  411 @                     
  412 @                 
  413 @             
  414 @         
  415 @         
  416 @          
  417 @          
  418 @            
  419 @                 
  420 @                
  421 @                
  422 @                    
  423 @                     
  424 @                       
  425 @                 
  426 @             
  427 @              
  428 @                 
  429 @                    
  430 @                   
  431 @                      
  432 @                 
  433 @                   
  434 @                      
  435 @             
  436 @         
  437 @         
  438 @             
  439 @           
  440 @                 
  441 @                
  442 @                
  443 @                    
  444 @                     
  445 @                       
  446 @                 
  447 @             
  448 @              
  449 @ 
  450 @                   
  451 @                   
  452 @ 
  453 @ 
  454 @                   
  455 @                   
  456 @ 
  457 @                         
  458 @                   
  459 @                      
  460 @                     
  461 @                       
  462 @                       
  463 @                     
  464 @             
  465 @         
  466 @           
  467 @         
  468 @           
  469 @         
  470 @               
  471 @                
  472 @                  
  473 @                
  474 @                             
  475 @         
  476 @     
  477 @ 
  478 @ 
  479 @       
  480 @                   
  481 @                  
  482 @                 
  483 @                      
  484 @                          
  485 @                                   
  486 @         
  487 @ 
  488 @ 
  489 @ 
  490 @         
  491 @ 
  492 @      
  493 @ 
  494 @ 
  495 @ 
  496 @      
  497 @       
  498 @ 
  499 @         
  500 @      
  501 @       
  502 @                  
  503 @            
  504 @ 
  505 @             
  506 @          
  507 @           
  508 @               
  509 @ 
  510 @ 
  511 @               
  512 @ 
  513 @     
  514 @                  
  515 @           
  516 @     
  517 @           
  518 @         
  519 @ 
  520 @       
  521 @ 
  522 @ 
  523 @ 
  524 @ 
  525 @         
  526 @      
  527 @       
  528 @     
  529 @       
  530 @ 
  531 @ 
  532 @ 
  533 @       
  534 @  {
   86 @     int backupSM = searchMethod;
   87 @     searchMethod = 1;
   88 @     assert( 1 >= 1);
   89 @ IFMACRO(!privateCreatePartition)
   90 & IFMACRO(!privateCreateMat)
   91 &      intersection.resize(1);
   92 &      intersection[0].resize(0);
   93 &      PhGlobalPrivate supp;
   94 &      VhGlobalPrivate suppSmooth;
   95 &     {
   96 &         int constant =  mpiRank( mpiCommWorld);
   97 &         for[i, value : supp[]] value = abs( partGlobal[][i] - constant) < 0.1;
   98 &         AddLayers( ThGlobal, supp[], 2 *  overlap, suppSmooth[]);
   99 &         int[int] n2o;
  100 &         meshN neighbors;
  101 &         bool connected = false;
  102 &         for[i, value : suppSmooth[]] if(abs(value - 0.5) < 0.5) connected = true;
  103 &         if(!connected)
  104 &             n2o.resize(0);
  105 &         else
            neighbors = trunc( ThGlobal, suppSmooth > 0.001 && suppSmooth < 0.999, new2old = n2o);
  106 &         int[int] partOverlap(n2o.n);
  107 &         for[i, value : n2o] partOverlap[i] =  partGlobal[][value];
  108 &         Unique(partOverlap,  intersection[0], remove = constant);
  109 &         if( privateS > 1 &&  1 <= 1) {
  110 &              ThGlobal = trunc( ThGlobal, suppSmooth > 0.001, split =  privateS);
  111 &             supp = abs( partGlobal - constant) < 0.1;
  112 &             suppSmooth = 0;
  113 &             AddLayers( ThGlobal, supp[], 2 *  overlap, suppSmooth[]);
  114 &         }
  115 &     }
  116 &     int[int] n2oGlobalPrivate, n2oNeighbor;
  117 & IFMACRO(!privateDmeshCartesianPartitioning)
  118 &      ThGlobal = trunc( ThGlobal, suppSmooth > 0.001, label = 9999, new2old = n2oGlobalPrivate);
  119 & ENDIFMACRO
    real eps =  ThGlobal.measure;
  120 &     real[int] epsTab( intersection[0].n);
  121 &     mpiRequest[int] rq(2 *  intersection[0].n);
  122 &     if(mpiSize( mpiCommWorld) ==  mpiSize( mpiCommWorld)) {
  123 &         for(int j = 0; j <  intersection[0].n; ++j)
  124 &             Irecv(processor( intersection[0][j],  mpiCommWorld, rq[j]), epsTab[j]);
  125 &         for(int j = 0; j <  intersection[0].n; ++j)
  126 &             Isend(processor( intersection[0][j],  mpiCommWorld, rq[ intersection[0].n + j]), eps);
  127 &     }
  128 &     else
        epsTab = 1.0e+30;
  129 &     suppSmooth = suppSmooth;
  130 & IFMACRO(!privateDmeshN2O)
  131 &     ThTab[ 1 - 1] = trunc( ThGlobal, suppSmooth > 0.501, label =  fakeInterface, new2old = n2oNeighbor);
  132 & IFMACRO(privateDmeshCartesianPartitioning)
  133 &     real[int] bb(2 * dimension);
  134 &     boundingbox(ThTab[ 1 - 1], bb);
  135 &     ThTab[ 1 - 1] = trunc( ThGlobal, x > bb[0] && x < bb[1] && y > bb[2] && y < bb[3]
  136 & IFMACRO(dimension,3)
  137 &                                                                                              && z > bb[4] && z < bb[5]
  138 & ENDIFMACRO
                                                                                                                      , label =  fakeInterface);
  139 &      ThGlobal = ThTab[ 1 - 1];
  140 &     n2oNeighbor = 0: ThGlobal.nt - 1;
  141 & ENDIFMACRO
ENDIFMACRO
IFMACRO(privateDmeshN2O)
  142 &     ThTab[ 1 - 1] = trunc( ThGlobal, suppSmooth > 0.501, label =  fakeInterface, new2old = privateDmeshN2O);
  143 & IFMACRO(privateDmeshCartesianPartitioning)
  144 &     real[int] bb(2 * dimension);
  145 &     boundingbox(ThTab[ 1 - 1], bb);
  146 &     ThTab[ 1 - 1] = trunc( ThGlobal, x > bb[0] && x < bb[1] && y > bb[2] && y < bb[3]
  147 & IFMACRO(dimension,3)
  148 &                                                                                              && z > bb[4] && z < bb[5]
  149 & ENDIFMACRO
                                                                                                                      , label =  fakeInterface, new2old = privateDmeshN2O);
  150 &      ThGlobal = ThTab[ 1 - 1];
  151 &     n2oNeighbor = 0: ThGlobal.nt - 1;
  152 & ENDIFMACRO
IFMACRO(!privateDmeshCartesianPartitioning)
  153 &     {
  154 &         int[int] backup = privateDmeshN2O;
  155 &         int[int] new = n2oGlobalPrivate(privateDmeshN2O);
  156 &         privateDmeshN2O.resize(new.n);
  157 &         privateDmeshN2O = new;
  158 &         n2oNeighbor.resize(backup.n);
  159 &         n2oNeighbor = backup;
  160 &     }
  161 & ENDIFMACRO
ENDIFMACRO
    if( 1 > 1) {
  162 &          prolongation.resize( 1 - 1);
  163 &         if( privateS > 1) {
  164 &             meshN globalNameRefined =  ThGlobal;
  165 &             for(int i =  1 - 1; i > 0; --i) {
  166 &                 globalNameRefined = trunc(globalNameRefined, 1, split =  privateS);
  167 &                 ThTab[i - 1] = trunc(globalNameRefined, suppSmooth > 0.501, label =  fakeInterface);
  168 &                 fespace WhLocalRefinedPrivate(ThTab[i - 1],  P1);
  169 &                 fespace WhLocalCoarsePrivate(ThTab[i],  P1);
  170 &                  prolongation[i - 1] = interpolate(WhLocalRefinedPrivate, WhLocalCoarsePrivate);
  171 &             }
  172 &         }
  173 &         else
            for(int i =  1 - 1; i > 0; --i)
  174 &                 ThTab[i - 1] = ThTab[i];
  175 &     }
  176 &     if(!removeZeros && ( fakeInterface != -111111 ||  overlap != 1)) {
  177 &         if(suppSmooth[].min < 0.501) {
  178 &             supp = supp;
  179 &              ThBorderTab[ 1 - 1] = trunc( ThGlobal, (suppSmooth > ( overlap - 0.999) / real(2 *  overlap)) && (suppSmooth < 0.501), label = (abs( fakeInterface) + 1) * 100);
  180 &             if( privateS > 1)
  181 &                 for(int i =  1 - 2; i >= 0; --i) {
  182 &                      ThBorderTab[i] = trunc( ThBorderTab[i + 1], 1, split =  privateS, label = (abs( fakeInterface) + 1) * 100);
  183 &                     meshN tempRefined = ThTab[i] +  ThBorderTab[i];
  184 &                     fespace PhRefinedPrivate(tempRefined, P0);
  185 &                     PhRefinedPrivate suppRefined = supp;
  186 &                     fespace VhBorderRefinedPrivate( ThBorderTab[i], P1);
  187 &                     VhBorderRefinedPrivate suppBorder = suppRefined;
  188 &                      ThBorderTab[i] = trunc( ThBorderTab[i], suppBorder > 0.01);
  189 &                 }
  190 &             else
                for(int i =  1 - 2; i >= 0; --i)
  191 &                      ThBorderTab[i] =  ThBorderTab[i + 1];
  192 &         }
  193 &     }
  194 &     fespace VhLocalPrivate(ThTab[ 1 - 1], P1);
  195 & IFMACRO(!privateDmeshThTab)
  196 & NewMacro privateDmeshThintersectionDef()partitionIntersectionTab EndMacro
    real[int][int] partitionIntersectionTab(1 +  intersection[0].n);
  197 &     privateDmeshThintersectionDef[0].resize( intersection[0].n);
  198 & ENDIFMACRO
IFMACRO(privateBuildDmesh)
  199 &     privateDmeshThintersectionDef.resize(1 +  intersection[0].n);
  200 &     privateDmeshThintersectionDef[0].resize( intersection[0].n);
  201 & ENDIFMACRO
    VhLocalPrivate khi = max(2 * suppSmooth - 1.0, 0.0);
  202 &     VhLocalPrivate sum;
  203 &     sum[] = khi[];
  204 &      VhGlobalPrivate phi;
  205 &     if(n2oGlobalPrivate.n ==  ThGlobal.nt &&  privateS == 1) {
  206 &         real[int] restrictionPart(n2oGlobalPrivate.n);
  207 &         restrictionPart =  partGlobal[](n2oGlobalPrivate);
  208 &          partGlobal = 0.0;
  209 &          partGlobal[] = restrictionPart;
  210 &     }
  211 &     else
         partGlobal =  partGlobal;
  212 &     n2oGlobalPrivate.resize(0);
  213 &     int numberIntersection = 0;
  214 &     {
  215 &         int[int] restriction = restrict(VhLocalPrivate,  VhGlobalPrivate, n2oNeighbor);
  216 &         n2oNeighbor.resize(0);
  217 &         mpiWaitAll(rq);
  218 &         for(int i = 0; i <  intersection[0].n; ++i) {
  219 &              PhGlobalPrivate suppPartition = abs( partGlobal -  intersection[0][i]) < 0.1;
  220 &             AddLayers( ThGlobal, suppPartition[],  overlap, phi[]);
  221 &             if(min(eps, epsTab[i]) > 0.0) {
  222 &                 if(intN( ThGlobal, qforder = 2)(phi) / min(eps, epsTab[i]) > 1.0e-10) {
  223 &                     privateDmeshThintersectionDef[1 + numberIntersection].resize(restriction.n);
  224 &                     privateDmeshThintersectionDef[1 + numberIntersection] = phi[](restriction);
  225 &                     if(!trueRestrict)
  226 &                         sum[] += privateDmeshThintersectionDef[1 + numberIntersection];
  227 &                      intersection[0][numberIntersection++] =  intersection[0][i];
  228 &                 }
  229 &             }
  230 &         }
  231 &     }
  232 &     if(numberIntersection !=  intersection[0].n) {
  233 &          intersection[0].resize(numberIntersection);
  234 &         privateDmeshThintersectionDef.resize(1 + numberIntersection);
  235 &     }
  236 &      intersection.resize(1 +  1 * numberIntersection);
  237 & ENDIFMACRO
IFMACRO(privateCreateMat)
  238 &     assert( 1 == 1);
  239 &     int numberIntersection = privateDmeshThintersectionDef.n - 1;
  240 &      intersection.resize(1 +  1 * numberIntersection);
  241 &      intersection[0].resize(numberIntersection);
  242 &      intersection[0] = lround(privateDmeshThintersectionDef[0]);
  243 &     fespace VhLocalPrivate(ThTab[ 1 - 1], P1);
  244 & IFMACRO(privateDmeshN2O)
  245 & IFMACRO(privateDmeshOriginal)
  246 & IFMACRO(privateDmeshRestriction)
  247 &     {
  248 &         fespace WhLocalPrivate(ThTab[ 1 - 1],  P1);
  249 &         fespace WhOriginalPrivate(privateDmeshOriginal,  P1);
  250 &         privateDmeshRestriction.resize(WhOriginalPrivate.ndof);
  251 &         privateDmeshRestriction = restrict(WhLocalPrivate, WhOriginalPrivate, privateDmeshN2O);
  252 &     }
  253 & ENDIFMACRO
ENDIFMACRO
ENDIFMACRO
ENDIFMACRO
IFMACRO(privateBuildDmesh)
  254 &     privateDmeshThintersectionDef[0].resize(numberIntersection);
  255 &     for[i, value :  intersection[0]] privateDmeshThintersectionDef[0][i] = value;
  256 & ENDIFMACRO
    meshN[int] meshIntersection(numberIntersection);
  257 & IFMACRO(!privateCreateMat)
  258 &     int[int][int] n2oIntersection(0);
  259 &     if(trueRestrict && mpiSize( mpiCommWorld) ==  mpiSize( mpiCommWorld) && removeZeros)
  260 &         n2oIntersection.resize(numberIntersection);
  261 & ENDIFMACRO
    for(int j = 0; j < ( privateS == 1 ? 1 :  1); ++j) {
  262 &         for(int i = 0; i < numberIntersection; ++i) {
  263 &             int[int] n2o;
  264 &             VhLocalPrivate partitionIntersection;
  265 &             partitionIntersection[] = privateDmeshThintersectionDef[1 + i];
  266 &             meshIntersection[i] = trunc(ThTab[j], partitionIntersection > 1.0e-6, new2old = n2o, label = 9999);
  267 & IFMACRO(privateDmeshCartesianPartitioning)
  268 &             real[int] bb(2 * dimension);
  269 &             boundingbox(meshIntersection[i], bb);
  270 &             meshIntersection[i] = trunc(ThTab[j], x > bb[0] && x < bb[1] && y > bb[2] && y < bb[3]
  271 & IFMACRO(dimension,3)
  272 &                                                                                                       && z > bb[4] && z < bb[5]
  273 & ENDIFMACRO
                                                                                                                               , new2old = n2o, label = 9999);
  274 & ENDIFMACRO
IFMACRO(!privateCreateMat)
  275 &             if(j == 0 && trueRestrict && mpiSize( mpiCommWorld) ==  mpiSize( mpiCommWorld) && removeZeros) {
  276 &                 n2oIntersection[i].resize(n2o.n);
  277 &                 n2oIntersection[i] = n2o;
  278 &             }
  279 &             if(!removeZeros)
  280 & ENDIFMACRO
            {
  281 & IFMACRO(vectorialfe)
  282 &                 fespace singleComponentWhPrivate(ThTab[j], vectorialfe);
  283 &                 fespace WhIntersectionPrivate(meshIntersection[i], vectorialfe);
  284 & ENDIFMACRO
IFMACRO(!vectorialfe)
  285 &                 fespace singleComponentWhPrivate(ThTab[j],  P1);
  286 &                 fespace WhIntersectionPrivate(meshIntersection[i],  P1);
  287 & ENDIFMACRO
                 intersection[1 + i + j * numberIntersection] = restrict(WhIntersectionPrivate, singleComponentWhPrivate, n2o);
  288 &             }
  289 &         }
  290 &     }
  291 & IFMACRO(!privateCreateMat)
  292 &     if( privateS == 1 &&  1 > 1 && !removeZeros)
  293 &         for(int j = 1; j <  1; ++j)
  294 &             for(int i = 0; i < numberIntersection; ++i) {
  295 &                  intersection[1 + i + j * numberIntersection].resize( intersection[1 + i].n);
  296 &                  intersection[1 + i + j * numberIntersection] =  intersection[1 + i];
  297 &             }
  298 &     for(int i = 0; i <  1 - 1; ++i) {
  299 &         fespace VhRefinedPrivate(ThTab[i], P1);
  300 &         fespace PhRefinedPrivate(ThTab[i], P0);
  301 &         PhRefinedPrivate partRefined =  partGlobal;
  302 &         PhRefinedPrivate supp = abs(partRefined -  mpiRank( mpiCommWorld)) < 0.1;
  303 &         varf vSupp(uPrivate, vPrivate) = intN(ThTab[i], qforder = 1)(supp * vPrivate);
  304 &         VhRefinedPrivate khiL;
  305 &         khiL[] = vSupp(0, VhRefinedPrivate);
  306 &         khiL = khiL > 0.0;
  307 &         VhRefinedPrivate sum = khiL;
  308 &         for(int j = 0; j < numberIntersection; ++j) {
  309 &             supp = abs(partRefined -  intersection[0][j]) < 0.1;
  310 &             VhRefinedPrivate phiL;
  311 &             phiL[] = vSupp(0, VhRefinedPrivate);
  312 &             phiL = phiL > 0.0;
  313 &             sum[] += phiL[];
  314 &         }
  315 &         khiL[] ./= sum[];
  316 &         fespace WhRefinedPrivate(ThTab[i],  P1);
  317 &         WhRefinedPrivate  defP1(func2vec);
  318 &          defP1(func2vec) =  initP1(khiL);
  319 &          DTab[i].resize(WhRefinedPrivate.ndof);
  320 &          DTab[i] = func2vec[];
  321 &     }
  322 &     if(!trueRestrict)
  323 &         khi[] ./= sum[];
  324 &     else {
  325 &         khi = abs( partGlobal -  mpiRank( mpiCommWorld)) < 0.1;
  326 &         VhLocalPrivate sigma =  partGlobal;
  327 &         for(int i = 0; i < numberIntersection; ++i) {
  328 &             if( mpiRank( mpiCommWorld) <  intersection[0][i]) {
  329 &                 for[j, value : khi[]] {
  330 &                     if(value > 0.9 && abs(sigma[][j] -  intersection[0][i]) < 0.1)
  331 &                         value = 0.0;
  332 &                 }
  333 &             }
  334 &         }
  335 &     }
  336 &     if(trueRestrict && mpiSize( mpiCommWorld) ==  mpiSize( mpiCommWorld) && removeZeros) {
  337 &         assert( 1 == 1);
  338 &         meshN ThIntersection;
  339 &         mpiRequest[int] rq(2 * numberIntersection);
  340 &         int[int] skip(0);
  341 &         {
  342 &             fespace PhIntersectionPrivate(ThIntersection, P0);
  343 &             PhIntersectionPrivate[int] recv(numberIntersection);
  344 &             PhIntersectionPrivate[int] send(numberIntersection);
  345 &             for(int i = 0; i < numberIntersection; ++i) {
  346 &                 ThIntersection = meshIntersection[i];
  347 &                 Irecv(processor( intersection[0][i],  mpiCommWorld, rq[i]), recv[i][]);
  348 &                 send[i] = khi;
  349 &                 Isend(processor( intersection[0][i],  mpiCommWorld, rq[numberIntersection + i]), send[i][]);
  350 &             }
  351 &             real[int] tmpRemove(ThTab[0].nt);
  352 &             int[int] n2oRemove;
  353 & IFMACRO(!privateDmeshN2O)
  354 &             ThTab[0] = trunc(ThTab[0], khi > 1.0e-6, label = 9999, new2old = n2oRemove);
  355 & ENDIFMACRO
IFMACRO(privateDmeshN2O)
  356 &             {
  357 &                 int[int] n2oFilter;
  358 &                 ThTab[0] = trunc(ThTab[0], khi > 1.0e-6, label = 9999, new2old = n2oRemove);
  359 &                 n2oFilter.resize(n2oRemove.n);
  360 &                 n2oFilter = privateDmeshN2O(n2oRemove);
  361 &                 privateDmeshN2O.resize(n2oFilter.n);
  362 &                 privateDmeshN2O = n2oFilter;
  363 &             }
  364 & ENDIFMACRO
            khi = khi;
  365 &             fespace PhLocalPrivate(ThTab[0], P0);
  366 &             for(int k = 0; k < 2 * numberIntersection; ++k) {
  367 &                 int i = mpiWaitAny(rq);
  368 &                 if(i < numberIntersection) {
  369 &                     ThIntersection = meshIntersection[i];
  370 &                     PhIntersectionPrivate  intersection = send[i] > 1.0e-6 && recv[i] > 1.0e-6;
  371 &                     if( intersection[].l2 > 1.0e-6) {
  372 &                         tmpRemove = 0.0;
  373 &                         tmpRemove(n2oIntersection[i]) =  intersection[];
  374 &                         PhLocalPrivate afterTrunc;
  375 &                         afterTrunc[] = tmpRemove(n2oRemove);
  376 &                         meshIntersection[i] = trunc(ThTab[0], afterTrunc > 1.0e-6, label = 9999, new2old = n2oIntersection[i]);
  377 &                     }
  378 &                     else {
  379 &                         skip.resize(skip.n + 1);
  380 &                         skip[skip.n - 1] = i;
  381 &                     }
  382 &                 }
  383 &             }
  384 &         }
  385 &         skip.sort;
  386 &         real[int][int] recv(numberIntersection);
  387 &         real[int][int] send(numberIntersection);
  388 &         int j = 0;
  389 &         for(int i = 0; i < numberIntersection; ++i) {
  390 &             bool skipped = false;
  391 &             if(j < skip.n) {
  392 &                 if(skip[j] == i) {
  393 &                     ++j;
  394 &                     skipped = true;
  395 &                 }
  396 &             }
  397 &             if(!skipped) {
  398 &                 recv[i].resize(meshIntersection[i].nv);
  399 &                 Irecv(processor( intersection[0][i],  mpiCommWorld, rq[i]), recv[i]);
  400 &                 fespace VhIntersectionPrivate(meshIntersection[i], P1);
  401 &                 int[int] restriction = restrict(VhIntersectionPrivate, VhLocalPrivate, n2oIntersection[i]);
  402 &                 send[i].resize(meshIntersection[i].nv);
  403 &                 send[i] = khi[](restriction);
  404 &                 Isend(processor( intersection[0][i],  mpiCommWorld, rq[numberIntersection + i]), send[i]);
  405 &             }
  406 &         }
  407 &         mpiWaitAll(rq);
  408 &          intersection.resize(1 + numberIntersection - skip.n);
  409 &         j = 0;
  410 &         for(int i = 0; i < numberIntersection; ++i) {
  411 &             bool skipped = false;
  412 &             if(j < skip.n) {
  413 &                 if(skip[j] == i) {
  414 &                     ++j;
  415 &                     skipped = true;
  416 &                 }
  417 &             }
  418 &             if(!skipped) {
  419 & IFMACRO(vectorialfe)
  420 &                 fespace singleComponentWhPrivate(ThTab[0], vectorialfe);
  421 &                 fespace WhIntersectionPrivate(meshIntersection[i], vectorialfe);
  422 & ENDIFMACRO
IFMACRO(!vectorialfe)
  423 &                 fespace singleComponentWhPrivate(ThTab[0],  P1);
  424 &                 fespace WhIntersectionPrivate(meshIntersection[i],  P1);
  425 & ENDIFMACRO
                 intersection[1 + i - j] = restrict(WhIntersectionPrivate, singleComponentWhPrivate, n2oIntersection[i]);
  426 &                 fespace VhIntersectionPrivate(meshIntersection[i], P1);
  427 &                 int[int] restriction = restrict(VhIntersectionPrivate, VhLocalPrivate, n2oIntersection[i]);
  428 &                 privateDmeshThintersectionDef[1 + i - j].resize(VhLocalPrivate.ndof);
  429 &                 privateDmeshThintersectionDef[1 + i - j] = 0.0;
  430 &                 privateDmeshThintersectionDef[1 + i - j](restriction) = recv[i];
  431 &                  intersection[0][i - j] =  intersection[0][i];
  432 &             }
  433 &         }
  434 &         numberIntersection -= skip.n;
  435 &          intersection[0].resize(numberIntersection);
  436 &         privateDmeshThintersectionDef.resize(1 + numberIntersection);
  437 &         privateDmeshThintersectionDef[0].resize(numberIntersection);
  438 &         for[i, value :  intersection[0]] privateDmeshThintersectionDef[0][i] = value;
  439 &         if( fakeInterface != -111111 ||  overlap != 1) {
  440 &              PhGlobalPrivate suppPartition = khi > 0.1;
  441 &             AddLayers( ThGlobal, suppPartition[], 1, phi[]);
  442 &              ThBorderTab[0] = trunc( ThGlobal, phi > 0.001 && phi < 0.501, label = (abs( fakeInterface) + 1) * 100);
  443 &         }
  444 &     }
  445 & ENDIFMACRO
IFMACRO(vectorialfe)
  446 &     if( 1 > 1)
  447 &         for(int i = 0; i <  intersection.n - 1; ++i) {
  448 &             int n =  intersection[1 + i].n;
  449 &              intersection[1 + i].resize(n *  1);
  450 &             for(int j = n - 1; j != -1; --j)
  451 &                 for(int k =  1 - 1; k != -1; --k)
  452 &                      intersection[1 + i][j *  1 + k] =  intersection[1 + i][j] *  1 + k;
  453 &         }
  454 & ENDIFMACRO
ENDIFMACRO
   90 @ IFMACRO(!privateCreateMat)
   91 &      intersection.resize(1);
   92 &      intersection[0].resize(0);
   93 &      PhGlobalPrivate supp;
   94 &      VhGlobalPrivate suppSmooth;
   95 &     {
   96 &         int constant =  mpiRank( mpiCommWorld);
   97 &         for[i, value : supp[]] value = abs( partGlobal[][i] - constant) < 0.1;
   98 &         AddLayers( ThGlobal, supp[], 2 *  overlap, suppSmooth[]);
   99 &         int[int] n2o;
  100 &         meshN neighbors;
  101 &         bool connected = false;
  102 &         for[i, value : suppSmooth[]] if(abs(value - 0.5) < 0.5) connected = true;
  103 &         if(!connected)
  104 &             n2o.resize(0);
  105 &         else
            neighbors = trunc( ThGlobal, suppSmooth > 0.001 && suppSmooth < 0.999, new2old = n2o);
  106 &         int[int] partOverlap(n2o.n);
  107 &         for[i, value : n2o] partOverlap[i] =  partGlobal[][value];
  108 &         Unique(partOverlap,  intersection[0], remove = constant);
  109 &         if( privateS > 1 &&  1 <= 1) {
  110 &              ThGlobal = trunc( ThGlobal, suppSmooth > 0.001, split =  privateS);
  111 &             supp = abs( partGlobal - constant) < 0.1;
  112 &             suppSmooth = 0;
  113 &             AddLayers( ThGlobal, supp[], 2 *  overlap, suppSmooth[]);
  114 &         }
  115 &     }
  116 &     int[int] n2oGlobalPrivate, n2oNeighbor;
  117 & IFMACRO(!privateDmeshCartesianPartitioning)
  118 &      ThGlobal = trunc( ThGlobal, suppSmooth > 0.001, label = 9999, new2old = n2oGlobalPrivate);
  119 & ENDIFMACRO
    real eps =  ThGlobal.measure;
  120 &     real[int] epsTab( intersection[0].n);
  121 &     mpiRequest[int] rq(2 *  intersection[0].n);
  122 &     if(mpiSize( mpiCommWorld) ==  mpiSize( mpiCommWorld)) {
  123 &         for(int j = 0; j <  intersection[0].n; ++j)
  124 &             Irecv(processor( intersection[0][j],  mpiCommWorld, rq[j]), epsTab[j]);
  125 &         for(int j = 0; j <  intersection[0].n; ++j)
  126 &             Isend(processor( intersection[0][j],  mpiCommWorld, rq[ intersection[0].n + j]), eps);
  127 &     }
  128 &     else
        epsTab = 1.0e+30;
  129 &     suppSmooth = suppSmooth;
  130 & IFMACRO(!privateDmeshN2O)
  131 &     ThTab[ 1 - 1] = trunc( ThGlobal, suppSmooth > 0.501, label =  fakeInterface, new2old = n2oNeighbor);
  132 & IFMACRO(privateDmeshCartesianPartitioning)
  133 &     real[int] bb(2 * dimension);
  134 &     boundingbox(ThTab[ 1 - 1], bb);
  135 &     ThTab[ 1 - 1] = trunc( ThGlobal, x > bb[0] && x < bb[1] && y > bb[2] && y < bb[3]
  136 & IFMACRO(dimension,3)
  137 &                                                                                              && z > bb[4] && z < bb[5]
  138 & ENDIFMACRO
                                                                                                                      , label =  fakeInterface);
  139 &      ThGlobal = ThTab[ 1 - 1];
  140 &     n2oNeighbor = 0: ThGlobal.nt - 1;
  141 & ENDIFMACRO
ENDIFMACRO
IFMACRO(privateDmeshN2O)
  142 &     ThTab[ 1 - 1] = trunc( ThGlobal, suppSmooth > 0.501, label =  fakeInterface, new2old = privateDmeshN2O);
  143 & IFMACRO(privateDmeshCartesianPartitioning)
  144 &     real[int] bb(2 * dimension);
  145 &     boundingbox(ThTab[ 1 - 1], bb);
  146 &     ThTab[ 1 - 1] = trunc( ThGlobal, x > bb[0] && x < bb[1] && y > bb[2] && y < bb[3]
  147 & IFMACRO(dimension,3)
  148 &                                                                                              && z > bb[4] && z < bb[5]
  149 & ENDIFMACRO
                                                                                                                      , label =  fakeInterface, new2old = privateDmeshN2O);
  150 &      ThGlobal = ThTab[ 1 - 1];
  151 &     n2oNeighbor = 0: ThGlobal.nt - 1;
  152 & ENDIFMACRO
IFMACRO(!privateDmeshCartesianPartitioning)
  153 &     {
  154 &         int[int] backup = privateDmeshN2O;
  155 &         int[int] new = n2oGlobalPrivate(privateDmeshN2O);
  156 &         privateDmeshN2O.resize(new.n);
  157 &         privateDmeshN2O = new;
  158 &         n2oNeighbor.resize(backup.n);
  159 &         n2oNeighbor = backup;
  160 &     }
  161 & ENDIFMACRO
ENDIFMACRO
    if( 1 > 1) {
  162 &          prolongation.resize( 1 - 1);
  163 &         if( privateS > 1) {
  164 &             meshN globalNameRefined =  ThGlobal;
  165 &             for(int i =  1 - 1; i > 0; --i) {
  166 &                 globalNameRefined = trunc(globalNameRefined, 1, split =  privateS);
  167 &                 ThTab[i - 1] = trunc(globalNameRefined, suppSmooth > 0.501, label =  fakeInterface);
  168 &                 fespace WhLocalRefinedPrivate(ThTab[i - 1],  P1);
  169 &                 fespace WhLocalCoarsePrivate(ThTab[i],  P1);
  170 &                  prolongation[i - 1] = interpolate(WhLocalRefinedPrivate, WhLocalCoarsePrivate);
  171 &             }
  172 &         }
  173 &         else
            for(int i =  1 - 1; i > 0; --i)
  174 &                 ThTab[i - 1] = ThTab[i];
  175 &     }
  176 &     if(!removeZeros && ( fakeInterface != -111111 ||  overlap != 1)) {
  177 &         if(suppSmooth[].min < 0.501) {
  178 &             supp = supp;
  179 &              ThBorderTab[ 1 - 1] = trunc( ThGlobal, (suppSmooth > ( overlap - 0.999) / real(2 *  overlap)) && (suppSmooth < 0.501), label = (abs( fakeInterface) + 1) * 100);
  180 &             if( privateS > 1)
  181 &                 for(int i =  1 - 2; i >= 0; --i) {
  182 &                      ThBorderTab[i] = trunc( ThBorderTab[i + 1], 1, split =  privateS, label = (abs( fakeInterface) + 1) * 100);
  183 &                     meshN tempRefined = ThTab[i] +  ThBorderTab[i];
  184 &                     fespace PhRefinedPrivate(tempRefined, P0);
  185 &                     PhRefinedPrivate suppRefined = supp;
  186 &                     fespace VhBorderRefinedPrivate( ThBorderTab[i], P1);
  187 &                     VhBorderRefinedPrivate suppBorder = suppRefined;
  188 &                      ThBorderTab[i] = trunc( ThBorderTab[i], suppBorder > 0.01);
  189 &                 }
  190 &             else
                for(int i =  1 - 2; i >= 0; --i)
  191 &                      ThBorderTab[i] =  ThBorderTab[i + 1];
  192 &         }
  193 &     }
  194 &     fespace VhLocalPrivate(ThTab[ 1 - 1], P1);
  195 & IFMACRO(!privateDmeshThTab)
  196 & NewMacro privateDmeshThintersectionDef()partitionIntersectionTab EndMacro
    real[int][int] partitionIntersectionTab(1 +  intersection[0].n);
  197 &     privateDmeshThintersectionDef[0].resize( intersection[0].n);
  198 & ENDIFMACRO
IFMACRO(privateBuildDmesh)
  199 &     privateDmeshThintersectionDef.resize(1 +  intersection[0].n);
  200 &     privateDmeshThintersectionDef[0].resize( intersection[0].n);
  201 & ENDIFMACRO
    VhLocalPrivate khi = max(2 * suppSmooth - 1.0, 0.0);
  202 &     VhLocalPrivate sum;
  203 &     sum[] = khi[];
  204 &      VhGlobalPrivate phi;
  205 &     if(n2oGlobalPrivate.n ==  ThGlobal.nt &&  privateS == 1) {
  206 &         real[int] restrictionPart(n2oGlobalPrivate.n);
  207 &         restrictionPart =  partGlobal[](n2oGlobalPrivate);
  208 &          partGlobal = 0.0;
  209 &          partGlobal[] = restrictionPart;
  210 &     }
  211 &     else
         partGlobal =  partGlobal;
  212 &     n2oGlobalPrivate.resize(0);
  213 &     int numberIntersection = 0;
  214 &     {
  215 &         int[int] restriction = restrict(VhLocalPrivate,  VhGlobalPrivate, n2oNeighbor);
  216 &         n2oNeighbor.resize(0);
  217 &         mpiWaitAll(rq);
  218 &         for(int i = 0; i <  intersection[0].n; ++i) {
  219 &              PhGlobalPrivate suppPartition = abs( partGlobal -  intersection[0][i]) < 0.1;
  220 &             AddLayers( ThGlobal, suppPartition[],  overlap, phi[]);
  221 &             if(min(eps, epsTab[i]) > 0.0) {
  222 &                 if(intN( ThGlobal, qforder = 2)(phi) / min(eps, epsTab[i]) > 1.0e-10) {
  223 &                     privateDmeshThintersectionDef[1 + numberIntersection].resize(restriction.n);
  224 &                     privateDmeshThintersectionDef[1 + numberIntersection] = phi[](restriction);
  225 &                     if(!trueRestrict)
  226 &                         sum[] += privateDmeshThintersectionDef[1 + numberIntersection];
  227 &                      intersection[0][numberIntersection++] =  intersection[0][i];
  228 &                 }
  229 &             }
  230 &         }
  231 &     }
  232 &     if(numberIntersection !=  intersection[0].n) {
  233 &          intersection[0].resize(numberIntersection);
  234 &         privateDmeshThintersectionDef.resize(1 + numberIntersection);
  235 &     }
  236 &      intersection.resize(1 +  1 * numberIntersection);
  237 & ENDIFMACRO
   91 @      intersection.resize(1);
   92 @      intersection[0].resize(0);
   93 @      PhGlobalPrivate supp;
   94 @      VhGlobalPrivate suppSmooth;
   95 @     {
   96 @         int constant =  mpiRank( mpiCommWorld);
   97 @         for[i, value : supp[]] value = abs( partGlobal[][i] - constant) < 0.1;
   98 @         AddLayers( ThGlobal, supp[], 2 *  overlap, suppSmooth[]);
   99 @         int[int] n2o;
  100 @         meshNmesh3 neighbors;
  101 @         bool connected = false;
  102 @         for[i, value : suppSmooth[]] if(abs(value - 0.5) < 0.5) connected = true;
  103 @         if(!connected)
  104 @             n2o.resize(0);
  105 @         else
  106 @             neighbors = trunc( ThGlobal, suppSmooth > 0.001 && suppSmooth < 0.999, new2old = n2o);
  107 @         int[int] partOverlap(n2o.n);
  108 @         for[i, value : n2o] partOverlap[i] =  partGlobal[][value];
  109 @         Unique(partOverlap,  intersection[0], remove = constant);
  110 @         if( privateS > 1 &&  1 <= 1) {
  111 @              ThGlobal = trunc( ThGlobal, suppSmooth > 0.001, split =  privateS);
  112 @             supp = abs( partGlobal - constant) < 0.1;
  113 @             suppSmooth = 0;
  114 @             AddLayers( ThGlobal, supp[], 2 *  overlap, suppSmooth[]);
  115 @         }
  116 @     }
  117 @     int[int] n2oGlobalPrivate, n2oNeighbor;
  118 @ IFMACRO(!privateDmeshCartesianPartitioning)
  119 &      ThGlobal = trunc( ThGlobal, suppSmooth > 0.001, label = 9999, new2old = n2oGlobalPrivate);
  120 & ENDIFMACRO
  119 @      ThGlobal = trunc( ThGlobal, suppSmooth > 0.001, label = 9999, new2old = n2oGlobalPrivate);
  120 @ 
  121 @     real eps =  ThGlobal.measure;
  122 @     real[int] epsTab( intersection[0].n);
  123 @     mpiRequest[int] rq(2 *  intersection[0].n);
  124 @     if(mpiSize( mpiCommWorld) ==  mpiSize( mpiCommWorld)) {
  125 @         for(int j = 0; j <  intersection[0].n; ++j)
  126 @             Irecv(processor( intersection[0][j],  mpiCommWorld, rq[j]), epsTab[j]);
  127 @         for(int j = 0; j <  intersection[0].n; ++j)
  128 @             Isend(processor( intersection[0][j],  mpiCommWorld, rq[ intersection[0].n + j]), eps);
  129 @     }
  130 @     else
  131 @         epsTab = 1.0e+30;
  132 @     suppSmooth = suppSmooth;
  133 @ IFMACRO(!privateDmeshN2O)
  134 &     ThTab[ 1 - 1] = trunc( ThGlobal, suppSmooth > 0.501, label =  fakeInterface, new2old = n2oNeighbor);
  135 & IFMACRO(privateDmeshCartesianPartitioning)
  136 &     real[int] bb(2 * dimension);
  137 &     boundingbox(ThTab[ 1 - 1], bb);
  138 &     ThTab[ 1 - 1] = trunc( ThGlobal, x > bb[0] && x < bb[1] && y > bb[2] && y < bb[3]
  139 & IFMACRO(dimension,3)
  140 &                                                                                              && z > bb[4] && z < bb[5]
  141 & ENDIFMACRO
                                                                                                                      , label =  fakeInterface);
  142 &      ThGlobal = ThTab[ 1 - 1];
  143 &     n2oNeighbor = 0: ThGlobal.nt - 1;
  144 & ENDIFMACRO
ENDIFMACRO
  134 @     ThTab[ 1 - 1] = trunc( ThGlobal, suppSmooth > 0.501, label =  fakeInterface, new2old = n2oNeighbor);
  135 @ IFMACRO(privateDmeshCartesianPartitioning)
  136 &     real[int] bb(2 * dimension);
  137 &     boundingbox(ThTab[ 1 - 1], bb);
  138 &     ThTab[ 1 - 1] = trunc( ThGlobal, x > bb[0] && x < bb[1] && y > bb[2] && y < bb[3]
  139 & IFMACRO(dimension,3)
  140 &                                                                                              && z > bb[4] && z < bb[5]
  141 & ENDIFMACRO
                                                                                                                      , label =  fakeInterface);
  142 &      ThGlobal = ThTab[ 1 - 1];
  143 &     n2oNeighbor = 0: ThGlobal.nt - 1;
  144 & ENDIFMACRO
  145 @ 
  145 @ IFMACRO(privateDmeshN2O)
  146 &     ThTab[ 1 - 1] = trunc( ThGlobal, suppSmooth > 0.501, label =  fakeInterface, new2old = privateDmeshN2O);
  147 & IFMACRO(privateDmeshCartesianPartitioning)
  148 &     real[int] bb(2 * dimension);
  149 &     boundingbox(ThTab[ 1 - 1], bb);
  150 &     ThTab[ 1 - 1] = trunc( ThGlobal, x > bb[0] && x < bb[1] && y > bb[2] && y < bb[3]
  151 & IFMACRO(dimension,3)
  152 &                                                                                              && z > bb[4] && z < bb[5]
  153 & ENDIFMACRO
                                                                                                                      , label =  fakeInterface, new2old = privateDmeshN2O);
  154 &      ThGlobal = ThTab[ 1 - 1];
  155 &     n2oNeighbor = 0: ThGlobal.nt - 1;
  156 & ENDIFMACRO
IFMACRO(!privateDmeshCartesianPartitioning)
  157 &     {
  158 &         int[int] backup = privateDmeshN2O;
  159 &         int[int] new = n2oGlobalPrivate(privateDmeshN2O);
  160 &         privateDmeshN2O.resize(new.n);
  161 &         privateDmeshN2O = new;
  162 &         n2oNeighbor.resize(backup.n);
  163 &         n2oNeighbor = backup;
  164 &     }
  165 & ENDIFMACRO
ENDIFMACRO
  166 @     if( 1 > 1) {
  167 @          prolongation.resize( 1 - 1);
  168 @         if( privateS > 1) {
  169 @             meshNmesh3 globalNameRefined =  ThGlobal;
  170 @             for(int i =  1 - 1; i > 0; --i) {
  171 @                 globalNameRefined = trunc(globalNameRefined, 1, split =  privateS);
  172 @                 ThTab[i - 1] = trunc(globalNameRefined, suppSmooth > 0.501, label =  fakeInterface);
  173 @                 fespace WhLocalRefinedPrivate(ThTab[i - 1],  P1);
  174 @                 fespace WhLocalCoarsePrivate(ThTab[i],  P1);
  175 @                  prolongation[i - 1] = interpolate(WhLocalRefinedPrivate, WhLocalCoarsePrivate);
  176 @             }
  177 @         }
  178 @         else
  179 @             for(int i =  1 - 1; i > 0; --i)
  180 @                 ThTab[i - 1] = ThTab[i];
  181 @     }
  182 @     if(!removeZeros && ( fakeInterface != -111111 ||  overlap != 1)) {
  183 @         if(suppSmooth[].min < 0.501) {
  184 @             supp = supp;
  185 @              ThBorderTab[ 1 - 1] = trunc( ThGlobal, (suppSmooth > ( overlap - 0.999) / real(2 *  overlap)) && (suppSmooth < 0.501), label = (abs( fakeInterface) + 1) * 100);
  186 @             if( privateS > 1)
  187 @                 for(int i =  1 - 2; i >= 0; --i) {
  188 @                      ThBorderTab[i] = trunc( ThBorderTab[i + 1], 1, split =  privateS, label = (abs( fakeInterface) + 1) * 100);
  189 @                     meshNmesh3 tempRefined = ThTab[i] +  ThBorderTab[i];
  190 @                     fespace PhRefinedPrivate(tempRefined, P0);
  191 @                     PhRefinedPrivate suppRefined = supp;
  192 @                     fespace VhBorderRefinedPrivate( ThBorderTab[i], P1);
  193 @                     VhBorderRefinedPrivate suppBorder = suppRefined;
  194 @                      ThBorderTab[i] = trunc( ThBorderTab[i], suppBorder > 0.01);
  195 @                 }
  196 @             else
  197 @                 for(int i =  1 - 2; i >= 0; --i)
  198 @                      ThBorderTab[i] =  ThBorderTab[i + 1];
  199 @         }
  200 @     }
  201 @     fespace VhLocalPrivate(ThTab[ 1 - 1], P1);
  202 @ IFMACRO(!privateDmeshThTab)
  203 & NewMacro privateDmeshThintersectionDef()partitionIntersectionTab EndMacro
    real[int][int] partitionIntersectionTab(1 +  intersection[0].n);
  204 &     privateDmeshThintersectionDef[0].resize( intersection[0].n);
  205 & ENDIFMACRO
  206 @ IFMACRO(privateBuildDmesh)
  207 &     privateDmeshThintersectionDef.resize(1 +  intersection[0].n);
  208 &     privateDmeshThintersectionDef[0].resize( intersection[0].n);
  209 & ENDIFMACRO
  207 @     privateDmeshThintersectionDef.resize(1 +  intersection[0].n);
  208 @     privateDmeshThintersectionDef[0].resize( intersection[0].n);
  209 @ 
  210 @     VhLocalPrivate khi = max(2 * suppSmooth - 1.0, 0.0);
  211 @     VhLocalPrivate sum;
  212 @     sum[] = khi[];
  213 @      VhGlobalPrivate phi;
  214 @     if(n2oGlobalPrivate.n ==  ThGlobal.nt &&  privateS == 1) {
  215 @         real[int] restrictionPart(n2oGlobalPrivate.n);
  216 @         restrictionPart =  partGlobal[](n2oGlobalPrivate);
  217 @          partGlobal = 0.0;
  218 @          partGlobal[] = restrictionPart;
  219 @     }
  220 @     else
  221 @          partGlobal =  partGlobal;
  222 @     n2oGlobalPrivate.resize(0);
  223 @     int numberIntersection = 0;
  224 @     {
  225 @         int[int] restriction = restrict(VhLocalPrivate,  VhGlobalPrivate, n2oNeighbor);
  226 @         n2oNeighbor.resize(0);
  227 @         mpiWaitAll(rq);
  228 @         for(int i = 0; i <  intersection[0].n; ++i) {
  229 @              PhGlobalPrivate suppPartition = abs( partGlobal -  intersection[0][i]) < 0.1;
  230 @             AddLayers( ThGlobal, suppPartition[],  overlap, phi[]);
  231 @             if(min(eps, epsTab[i]) > 0.0) {
  232 @                 if(intNint3d( ThGlobal, qforder = 2)(phi) / min(eps, epsTab[i]) > 1.0e-10) {
  233 @                     privateDmeshThintersectionDef[1 + numberIntersection].resize(restriction.n);
  234 @                     privateDmeshThintersectionDef[1 + numberIntersection] = phi[](restriction);
  235 @                     if(!trueRestrict)
  236 @                         sum[] += privateDmeshThintersectionDef[1 + numberIntersection];
  237 @                      intersection[0][numberIntersection++] =  intersection[0][i];
  238 @                 }
  239 @             }
  240 @         }
  241 @     }
  242 @     if(numberIntersection !=  intersection[0].n) {
  243 @          intersection[0].resize(numberIntersection);
  244 @         privateDmeshThintersectionDef.resize(1 + numberIntersection);
  245 @     }
  246 @      intersection.resize(1 +  1 * numberIntersection);
  247 @ 
  238 @ IFMACRO(privateCreateMat)
  239 &     assert( 1 == 1);
  240 &     int numberIntersection = privateDmeshThintersectionDef.n - 1;
  241 &      intersection.resize(1 +  1 * numberIntersection);
  242 &      intersection[0].resize(numberIntersection);
  243 &      intersection[0] = lround(privateDmeshThintersectionDef[0]);
  244 &     fespace VhLocalPrivate(ThTab[ 1 - 1], P1);
  245 & IFMACRO(privateDmeshN2O)
  246 & IFMACRO(privateDmeshOriginal)
  247 & IFMACRO(privateDmeshRestriction)
  248 &     {
  249 &         fespace WhLocalPrivate(ThTab[ 1 - 1],  P1);
  250 &         fespace WhOriginalPrivate(privateDmeshOriginal,  P1);
  251 &         privateDmeshRestriction.resize(WhOriginalPrivate.ndof);
  252 &         privateDmeshRestriction = restrict(WhLocalPrivate, WhOriginalPrivate, privateDmeshN2O);
  253 &     }
  254 & ENDIFMACRO
ENDIFMACRO
ENDIFMACRO
ENDIFMACRO
  255 @ IFMACRO(privateBuildDmesh)
  256 &     privateDmeshThintersectionDef[0].resize(numberIntersection);
  257 &     for[i, value :  intersection[0]] privateDmeshThintersectionDef[0][i] = value;
  258 & ENDIFMACRO
  256 @     privateDmeshThintersectionDef[0].resize(numberIntersection);
  257 @     for[i, value :  intersection[0]] privateDmeshThintersectionDef[0][i] = value;
  258 @ 
  259 @     meshNmesh3[int] meshIntersection(numberIntersection);
  260 @ IFMACRO(!privateCreateMat)
  261 &     int[int][int] n2oIntersection(0);
  262 &     if(trueRestrict && mpiSize( mpiCommWorld) ==  mpiSize( mpiCommWorld) && removeZeros)
  263 &         n2oIntersection.resize(numberIntersection);
  264 & ENDIFMACRO
  261 @     int[int][int] n2oIntersection(0);
  262 @     if(trueRestrict && mpiSize( mpiCommWorld) ==  mpiSize( mpiCommWorld) && removeZeros)
  263 @         n2oIntersection.resize(numberIntersection);
  264 @ 
  265 @     for(int j = 0; j < ( privateS == 1 ? 1 :  1); ++j) {
  266 @         for(int i = 0; i < numberIntersection; ++i) {
  267 @             int[int] n2o;
  268 @             VhLocalPrivate partitionIntersection;
  269 @             partitionIntersection[] = privateDmeshThintersectionDef[1 + i];
  270 @             meshIntersection[i] = trunc(ThTab[j], partitionIntersection > 1.0e-6, new2old = n2o, label = 9999);
  271 @ IFMACRO(privateDmeshCartesianPartitioning)
  272 &             real[int] bb(2 * dimension);
  273 &             boundingbox(meshIntersection[i], bb);
  274 &             meshIntersection[i] = trunc(ThTab[j], x > bb[0] && x < bb[1] && y > bb[2] && y < bb[3]
  275 & IFMACRO(dimension,3)
  276 &                                                                                                       && z > bb[4] && z < bb[5]
  277 & ENDIFMACRO
                                                                                                                               , new2old = n2o, label = 9999);
  278 & ENDIFMACRO
  279 @ IFMACRO(!privateCreateMat)
  280 &             if(j == 0 && trueRestrict && mpiSize( mpiCommWorld) ==  mpiSize( mpiCommWorld) && removeZeros) {
  281 &                 n2oIntersection[i].resize(n2o.n);
  282 &                 n2oIntersection[i] = n2o;
  283 &             }
  284 &             if(!removeZeros)
  285 & ENDIFMACRO
  280 @             if(j == 0 && trueRestrict && mpiSize( mpiCommWorld) ==  mpiSize( mpiCommWorld) && removeZeros) {
  281 @                 n2oIntersection[i].resize(n2o.n);
  282 @                 n2oIntersection[i] = n2o;
  283 @             }
  284 @             if(!removeZeros)
  285 @ 
  286 @             {
  287 @ IFMACRO(vectorialfe)
  288 &                 fespace singleComponentWhPrivate(ThTab[j], vectorialfe);
  289 &                 fespace WhIntersectionPrivate(meshIntersection[i], vectorialfe);
  290 & ENDIFMACRO
  291 @ IFMACRO(!vectorialfe)
  292 &                 fespace singleComponentWhPrivate(ThTab[j],  P1);
  293 &                 fespace WhIntersectionPrivate(meshIntersection[i],  P1);
  294 & ENDIFMACRO
  292 @                 fespace singleComponentWhPrivate(ThTab[j],  P1);
  293 @                 fespace WhIntersectionPrivate(meshIntersection[i],  P1);
  294 @ 
  295 @                  intersection[1 + i + j * numberIntersection] = restrict(WhIntersectionPrivate, singleComponentWhPrivate, n2o);
  296 @             }
  297 @         }
  298 @     }
  299 @ IFMACRO(!privateCreateMat)
  300 &     if( privateS == 1 &&  1 > 1 && !removeZeros)
  301 &         for(int j = 1; j <  1; ++j)
  302 &             for(int i = 0; i < numberIntersection; ++i) {
  303 &                  intersection[1 + i + j * numberIntersection].resize( intersection[1 + i].n);
  304 &                  intersection[1 + i + j * numberIntersection] =  intersection[1 + i];
  305 &             }
  306 &     for(int i = 0; i <  1 - 1; ++i) {
  307 &         fespace VhRefinedPrivate(ThTab[i], P1);
  308 &         fespace PhRefinedPrivate(ThTab[i], P0);
  309 &         PhRefinedPrivate partRefined =  partGlobal;
  310 &         PhRefinedPrivate supp = abs(partRefined -  mpiRank( mpiCommWorld)) < 0.1;
  311 &         varf vSupp(uPrivate, vPrivate) = intN(ThTab[i], qforder = 1)(supp * vPrivate);
  312 &         VhRefinedPrivate khiL;
  313 &         khiL[] = vSupp(0, VhRefinedPrivate);
  314 &         khiL = khiL > 0.0;
  315 &         VhRefinedPrivate sum = khiL;
  316 &         for(int j = 0; j < numberIntersection; ++j) {
  317 &             supp = abs(partRefined -  intersection[0][j]) < 0.1;
  318 &             VhRefinedPrivate phiL;
  319 &             phiL[] = vSupp(0, VhRefinedPrivate);
  320 &             phiL = phiL > 0.0;
  321 &             sum[] += phiL[];
  322 &         }
  323 &         khiL[] ./= sum[];
  324 &         fespace WhRefinedPrivate(ThTab[i],  P1);
  325 &         WhRefinedPrivate  defP1(func2vec);
  326 &          defP1(func2vec) =  initP1(khiL);
  327 &          DTab[i].resize(WhRefinedPrivate.ndof);
  328 &          DTab[i] = func2vec[];
  329 &     }
  330 &     if(!trueRestrict)
  331 &         khi[] ./= sum[];
  332 &     else {
  333 &         khi = abs( partGlobal -  mpiRank( mpiCommWorld)) < 0.1;
  334 &         VhLocalPrivate sigma =  partGlobal;
  335 &         for(int i = 0; i < numberIntersection; ++i) {
  336 &             if( mpiRank( mpiCommWorld) <  intersection[0][i]) {
  337 &                 for[j, value : khi[]] {
  338 &                     if(value > 0.9 && abs(sigma[][j] -  intersection[0][i]) < 0.1)
  339 &                         value = 0.0;
  340 &                 }
  341 &             }
  342 &         }
  343 &     }
  344 &     if(trueRestrict && mpiSize( mpiCommWorld) ==  mpiSize( mpiCommWorld) && removeZeros) {
  345 &         assert( 1 == 1);
  346 &         meshN ThIntersection;
  347 &         mpiRequest[int] rq(2 * numberIntersection);
  348 &         int[int] skip(0);
  349 &         {
  350 &             fespace PhIntersectionPrivate(ThIntersection, P0);
  351 &             PhIntersectionPrivate[int] recv(numberIntersection);
  352 &             PhIntersectionPrivate[int] send(numberIntersection);
  353 &             for(int i = 0; i < numberIntersection; ++i) {
  354 &                 ThIntersection = meshIntersection[i];
  355 &                 Irecv(processor( intersection[0][i],  mpiCommWorld, rq[i]), recv[i][]);
  356 &                 send[i] = khi;
  357 &                 Isend(processor( intersection[0][i],  mpiCommWorld, rq[numberIntersection + i]), send[i][]);
  358 &             }
  359 &             real[int] tmpRemove(ThTab[0].nt);
  360 &             int[int] n2oRemove;
  361 & IFMACRO(!privateDmeshN2O)
  362 &             ThTab[0] = trunc(ThTab[0], khi > 1.0e-6, label = 9999, new2old = n2oRemove);
  363 & ENDIFMACRO
IFMACRO(privateDmeshN2O)
  364 &             {
  365 &                 int[int] n2oFilter;
  366 &                 ThTab[0] = trunc(ThTab[0], khi > 1.0e-6, label = 9999, new2old = n2oRemove);
  367 &                 n2oFilter.resize(n2oRemove.n);
  368 &                 n2oFilter = privateDmeshN2O(n2oRemove);
  369 &                 privateDmeshN2O.resize(n2oFilter.n);
  370 &                 privateDmeshN2O = n2oFilter;
  371 &             }
  372 & ENDIFMACRO
            khi = khi;
  373 &             fespace PhLocalPrivate(ThTab[0], P0);
  374 &             for(int k = 0; k < 2 * numberIntersection; ++k) {
  375 &                 int i = mpiWaitAny(rq);
  376 &                 if(i < numberIntersection) {
  377 &                     ThIntersection = meshIntersection[i];
  378 &                     PhIntersectionPrivate  intersection = send[i] > 1.0e-6 && recv[i] > 1.0e-6;
  379 &                     if( intersection[].l2 > 1.0e-6) {
  380 &                         tmpRemove = 0.0;
  381 &                         tmpRemove(n2oIntersection[i]) =  intersection[];
  382 &                         PhLocalPrivate afterTrunc;
  383 &                         afterTrunc[] = tmpRemove(n2oRemove);
  384 &                         meshIntersection[i] = trunc(ThTab[0], afterTrunc > 1.0e-6, label = 9999, new2old = n2oIntersection[i]);
  385 &                     }
  386 &                     else {
  387 &                         skip.resize(skip.n + 1);
  388 &                         skip[skip.n - 1] = i;
  389 &                     }
  390 &                 }
  391 &             }
  392 &         }
  393 &         skip.sort;
  394 &         real[int][int] recv(numberIntersection);
  395 &         real[int][int] send(numberIntersection);
  396 &         int j = 0;
  397 &         for(int i = 0; i < numberIntersection; ++i) {
  398 &             bool skipped = false;
  399 &             if(j < skip.n) {
  400 &                 if(skip[j] == i) {
  401 &                     ++j;
  402 &                     skipped = true;
  403 &                 }
  404 &             }
  405 &             if(!skipped) {
  406 &                 recv[i].resize(meshIntersection[i].nv);
  407 &                 Irecv(processor( intersection[0][i],  mpiCommWorld, rq[i]), recv[i]);
  408 &                 fespace VhIntersectionPrivate(meshIntersection[i], P1);
  409 &                 int[int] restriction = restrict(VhIntersectionPrivate, VhLocalPrivate, n2oIntersection[i]);
  410 &                 send[i].resize(meshIntersection[i].nv);
  411 &                 send[i] = khi[](restriction);
  412 &                 Isend(processor( intersection[0][i],  mpiCommWorld, rq[numberIntersection + i]), send[i]);
  413 &             }
  414 &         }
  415 &         mpiWaitAll(rq);
  416 &          intersection.resize(1 + numberIntersection - skip.n);
  417 &         j = 0;
  418 &         for(int i = 0; i < numberIntersection; ++i) {
  419 &             bool skipped = false;
  420 &             if(j < skip.n) {
  421 &                 if(skip[j] == i) {
  422 &                     ++j;
  423 &                     skipped = true;
  424 &                 }
  425 &             }
  426 &             if(!skipped) {
  427 & IFMACRO(vectorialfe)
  428 &                 fespace singleComponentWhPrivate(ThTab[0], vectorialfe);
  429 &                 fespace WhIntersectionPrivate(meshIntersection[i], vectorialfe);
  430 & ENDIFMACRO
IFMACRO(!vectorialfe)
  431 &                 fespace singleComponentWhPrivate(ThTab[0],  P1);
  432 &                 fespace WhIntersectionPrivate(meshIntersection[i],  P1);
  433 & ENDIFMACRO
                 intersection[1 + i - j] = restrict(WhIntersectionPrivate, singleComponentWhPrivate, n2oIntersection[i]);
  434 &                 fespace VhIntersectionPrivate(meshIntersection[i], P1);
  435 &                 int[int] restriction = restrict(VhIntersectionPrivate, VhLocalPrivate, n2oIntersection[i]);
  436 &                 privateDmeshThintersectionDef[1 + i - j].resize(VhLocalPrivate.ndof);
  437 &                 privateDmeshThintersectionDef[1 + i - j] = 0.0;
  438 &                 privateDmeshThintersectionDef[1 + i - j](restriction) = recv[i];
  439 &                  intersection[0][i - j] =  intersection[0][i];
  440 &             }
  441 &         }
  442 &         numberIntersection -= skip.n;
  443 &          intersection[0].resize(numberIntersection);
  444 &         privateDmeshThintersectionDef.resize(1 + numberIntersection);
  445 &         privateDmeshThintersectionDef[0].resize(numberIntersection);
  446 &         for[i, value :  intersection[0]] privateDmeshThintersectionDef[0][i] = value;
  447 &         if( fakeInterface != -111111 ||  overlap != 1) {
  448 &              PhGlobalPrivate suppPartition = khi > 0.1;
  449 &             AddLayers( ThGlobal, suppPartition[], 1, phi[]);
  450 &              ThBorderTab[0] = trunc( ThGlobal, phi > 0.001 && phi < 0.501, label = (abs( fakeInterface) + 1) * 100);
  451 &         }
  452 &     }
  453 & ENDIFMACRO
  300 @     if( privateS == 1 &&  1 > 1 && !removeZeros)
  301 @         for(int j = 1; j <  1; ++j)
  302 @             for(int i = 0; i < numberIntersection; ++i) {
  303 @                  intersection[1 + i + j * numberIntersection].resize( intersection[1 + i].n);
  304 @                  intersection[1 + i + j * numberIntersection] =  intersection[1 + i];
  305 @             }
  306 @     for(int i = 0; i <  1 - 1; ++i) {
  307 @         fespace VhRefinedPrivate(ThTab[i], P1);
  308 @         fespace PhRefinedPrivate(ThTab[i], P0);
  309 @         PhRefinedPrivate partRefined =  partGlobal;
  310 @         PhRefinedPrivate supp = abs(partRefined -  mpiRank( mpiCommWorld)) < 0.1;
  311 @         varf vSupp(uPrivate, vPrivate) = intNint3d(ThTab[i], qforder = 1)(supp * vPrivate);
  312 @         VhRefinedPrivate khiL;
  313 @         khiL[] = vSupp(0, VhRefinedPrivate);
  314 @         khiL = khiL > 0.0;
  315 @         VhRefinedPrivate sum = khiL;
  316 @         for(int j = 0; j < numberIntersection; ++j) {
  317 @             supp = abs(partRefined -  intersection[0][j]) < 0.1;
  318 @             VhRefinedPrivate phiL;
  319 @             phiL[] = vSupp(0, VhRefinedPrivate);
  320 @             phiL = phiL > 0.0;
  321 @             sum[] += phiL[];
  322 @         }
  323 @         khiL[] ./= sum[];
  324 @         fespace WhRefinedPrivate(ThTab[i],  P1);
  325 @         WhRefinedPrivate  defP1(func2vec) func2vec ;
  326 @          defP1(func2vec) func2vec  =  initP1(khiL) khiL ;
  327 @          DTab[i].resize(WhRefinedPrivate.ndof);
  328 @          DTab[i] = func2vec[];
  329 @     }
  330 @     if(!trueRestrict)
  331 @         khi[] ./= sum[];
  332 @     else {
  333 @         khi = abs( partGlobal -  mpiRank( mpiCommWorld)) < 0.1;
  334 @         VhLocalPrivate sigma =  partGlobal;
  335 @         for(int i = 0; i < numberIntersection; ++i) {
  336 @             if( mpiRank( mpiCommWorld) <  intersection[0][i]) {
  337 @                 for[j, value : khi[]] {
  338 @                     if(value > 0.9 && abs(sigma[][j] -  intersection[0][i]) < 0.1)
  339 @                         value = 0.0;
  340 @                 }
  341 @             }
  342 @         }
  343 @     }
  344 @     if(trueRestrict && mpiSize( mpiCommWorld) ==  mpiSize( mpiCommWorld) && removeZeros) {
  345 @         assert( 1 == 1);
  346 @         meshNmesh3 ThIntersection;
  347 @         mpiRequest[int] rq(2 * numberIntersection);
  348 @         int[int] skip(0);
  349 @         {
  350 @             fespace PhIntersectionPrivate(ThIntersection, P0);
  351 @             PhIntersectionPrivate[int] recv(numberIntersection);
  352 @             PhIntersectionPrivate[int] send(numberIntersection);
  353 @             for(int i = 0; i < numberIntersection; ++i) {
  354 @                 ThIntersection = meshIntersection[i];
  355 @                 Irecv(processor( intersection[0][i],  mpiCommWorld, rq[i]), recv[i][]);
  356 @                 send[i] = khi;
  357 @                 Isend(processor( intersection[0][i],  mpiCommWorld, rq[numberIntersection + i]), send[i][]);
  358 @             }
  359 @             real[int] tmpRemove(ThTab[0].nt);
  360 @             int[int] n2oRemove;
  361 @ IFMACRO(!privateDmeshN2O)
  362 &             ThTab[0] = trunc(ThTab[0], khi > 1.0e-6, label = 9999, new2old = n2oRemove);
  363 & ENDIFMACRO
  362 @             ThTab[0] = trunc(ThTab[0], khi > 1.0e-6, label = 9999, new2old = n2oRemove);
  363 @ 
  364 @ IFMACRO(privateDmeshN2O)
  365 &             {
  366 &                 int[int] n2oFilter;
  367 &                 ThTab[0] = trunc(ThTab[0], khi > 1.0e-6, label = 9999, new2old = n2oRemove);
  368 &                 n2oFilter.resize(n2oRemove.n);
  369 &                 n2oFilter = privateDmeshN2O(n2oRemove);
  370 &                 privateDmeshN2O.resize(n2oFilter.n);
  371 &                 privateDmeshN2O = n2oFilter;
  372 &             }
  373 & ENDIFMACRO
  374 @             khi = khi;
  375 @             fespace PhLocalPrivate(ThTab[0], P0);
  376 @             for(int k = 0; k < 2 * numberIntersection; ++k) {
  377 @                 int i = mpiWaitAny(rq);
  378 @                 if(i < numberIntersection) {
  379 @                     ThIntersection = meshIntersection[i];
  380 @                     PhIntersectionPrivate  intersection = send[i] > 1.0e-6 && recv[i] > 1.0e-6;
  381 @                     if( intersection[].l2 > 1.0e-6) {
  382 @                         tmpRemove = 0.0;
  383 @                         tmpRemove(n2oIntersection[i]) =  intersection[];
  384 @                         PhLocalPrivate afterTrunc;
  385 @                         afterTrunc[] = tmpRemove(n2oRemove);
  386 @                         meshIntersection[i] = trunc(ThTab[0], afterTrunc > 1.0e-6, label = 9999, new2old = n2oIntersection[i]);
  387 @                     }
  388 @                     else {
  389 @                         skip.resize(skip.n + 1);
  390 @                         skip[skip.n - 1] = i;
  391 @                     }
  392 @                 }
  393 @             }
  394 @         }
  395 @         skip.sort;
  396 @         real[int][int] recv(numberIntersection);
  397 @         real[int][int] send(numberIntersection);
  398 @         int j = 0;
  399 @         for(int i = 0; i < numberIntersection; ++i) {
  400 @             bool skipped = false;
  401 @             if(j < skip.n) {
  402 @                 if(skip[j] == i) {
  403 @                     ++j;
  404 @                     skipped = true;
  405 @                 }
  406 @             }
  407 @             if(!skipped) {
  408 @                 recv[i].resize(meshIntersection[i].nv);
  409 @                 Irecv(processor( intersection[0][i],  mpiCommWorld, rq[i]), recv[i]);
  410 @                 fespace VhIntersectionPrivate(meshIntersection[i], P1);
  411 @                 int[int] restriction = restrict(VhIntersectionPrivate, VhLocalPrivate, n2oIntersection[i]);
  412 @                 send[i].resize(meshIntersection[i].nv);
  413 @                 send[i] = khi[](restriction);
  414 @                 Isend(processor( intersection[0][i],  mpiCommWorld, rq[numberIntersection + i]), send[i]);
  415 @             }
  416 @         }
  417 @         mpiWaitAll(rq);
  418 @          intersection.resize(1 + numberIntersection - skip.n);
  419 @         j = 0;
  420 @         for(int i = 0; i < numberIntersection; ++i) {
  421 @             bool skipped = false;
  422 @             if(j < skip.n) {
  423 @                 if(skip[j] == i) {
  424 @                     ++j;
  425 @                     skipped = true;
  426 @                 }
  427 @             }
  428 @             if(!skipped) {
  429 @ IFMACRO(vectorialfe)
  430 &                 fespace singleComponentWhPrivate(ThTab[0], vectorialfe);
  431 &                 fespace WhIntersectionPrivate(meshIntersection[i], vectorialfe);
  432 & ENDIFMACRO
  433 @ IFMACRO(!vectorialfe)
  434 &                 fespace singleComponentWhPrivate(ThTab[0],  P1);
  435 &                 fespace WhIntersectionPrivate(meshIntersection[i],  P1);
  436 & ENDIFMACRO
  434 @                 fespace singleComponentWhPrivate(ThTab[0],  P1);
  435 @                 fespace WhIntersectionPrivate(meshIntersection[i],  P1);
  436 @ 
  437 @                  intersection[1 + i - j] = restrict(WhIntersectionPrivate, singleComponentWhPrivate, n2oIntersection[i]);
  438 @                 fespace VhIntersectionPrivate(meshIntersection[i], P1);
  439 @                 int[int] restriction = restrict(VhIntersectionPrivate, VhLocalPrivate, n2oIntersection[i]);
  440 @                 privateDmeshThintersectionDef[1 + i - j].resize(VhLocalPrivate.ndof);
  441 @                 privateDmeshThintersectionDef[1 + i - j] = 0.0;
  442 @                 privateDmeshThintersectionDef[1 + i - j](restriction) = recv[i];
  443 @                  intersection[0][i - j] =  intersection[0][i];
  444 @             }
  445 @         }
  446 @         numberIntersection -= skip.n;
  447 @          intersection[0].resize(numberIntersection);
  448 @         privateDmeshThintersectionDef.resize(1 + numberIntersection);
  449 @         privateDmeshThintersectionDef[0].resize(numberIntersection);
  450 @         for[i, value :  intersection[0]] privateDmeshThintersectionDef[0][i] = value;
  451 @         if( fakeInterface != -111111 ||  overlap != 1) {
  452 @              PhGlobalPrivate suppPartition = khi > 0.1;
  453 @             AddLayers( ThGlobal, suppPartition[], 1, phi[]);
  454 @              ThBorderTab[0] = trunc( ThGlobal, phi > 0.001 && phi < 0.501, label = (abs( fakeInterface) + 1) * 100);
  455 @         }
  456 @     }
  457 @ 
  454 @ IFMACRO(vectorialfe)
  455 &     if( 1 > 1)
  456 &         for(int i = 0; i <  intersection.n - 1; ++i) {
  457 &             int n =  intersection[1 + i].n;
  458 &              intersection[1 + i].resize(n *  1);
  459 &             for(int j = n - 1; j != -1; --j)
  460 &                 for(int k =  1 - 1; k != -1; --k)
  461 &                      intersection[1 + i][j *  1 + k] =  intersection[1 + i][j] *  1 + k;
  462 &         }
  463 & ENDIFMACRO
  464 @ 
  455 @ IFMACRO(privateCreatePartition)
  456 &     fespace VhLocalPrivate(ThTab[ 1 - 1], P1);
  457 & IFMACRO(!privateCreateMat)
  458 &     VhLocalPrivate khi;
  459 & ENDIFMACRO
ENDIFMACRO
  460 @ IFMACRO(privateCreateMat)
  461 &     VhLocalPrivate khi;
  462 &     khi[] = privateDmeshThkhiDef[0];
  463 & ENDIFMACRO
  464 @     fespace WhPartPrivate(ThTab[ 1 - 1],  P1);
  465 @     WhPartPrivate  defP1(func2vec) func2vec ;
  466 @      DTab[ 1 - 1].resize(WhPartPrivate.ndof);
  467 @     if((WhPartPrivate.ndof % ThTab[ 1 - 1].nt) == 0 && WhPartPrivate.ndof != ThTab[ 1 - 1].nv) {
  468 @         int constant =  mpiRank( mpiCommWorld);
  469 @ IFMACRO(privateCreateMat)
  470 &         fespace PhLocalPrivate(ThTab[ 1 - 1], P0);
  471 &         PhLocalPrivate partLocal;
  472 &         partLocal[] = privateDmeshThkhiDef[1];
  473 &          defP1(func2vec) =  initP1(abs(partLocal - constant) < 0.1);
  474 & ENDIFMACRO
  475 @ IFMACRO(!privateCreateMat)
  476 &          defP1(func2vec) =  initP1(abs( partGlobal - constant) < 0.1);
  477 & ENDIFMACRO
  476 @          defP1(func2vec) func2vec  =  initP1(abs( partGlobal - constant) < 0.1) abs( partGlobal - constant) < 0.1 ;
  477 @ 
  478 @     }
  479 @     else if(WhPartPrivate.ndof == ThTab[ 1 - 1].nv && (WhPartPrivate.ndof % ThTab[ 1 - 1].nt) != 0)
  480 @         func2vec[] = khi[];
  481 @     else
  482 @          defP1(func2vec) func2vec  =  initP1(khi) khi ;
  483 @      DTab[ 1 - 1] = func2vec[];
  484 @ IFMACRO(privateDmeshPostProcessD)
  485 &     privateDmeshPostProcessD( DTab[ 1 - 1]);
  486 & ENDIFMACRO
  487 @ IFMACRO(!privateCreatePartition)
  488 & IFMACRO(!privateCreateMat)
  489 & IFMACRO(privateBuildDmesh)
  490 &     fespace PhLocalPrivate(ThTab[ 1 - 1], P0);
  491 &     PhLocalPrivate partLocal;
  492 &     partLocal =  partGlobal;
  493 &     privateDmeshThkhiDef[1].resize(partLocal[].n);
  494 &     privateDmeshThkhiDef[1] = partLocal[];
  495 & ENDIFMACRO
ENDIFMACRO
ENDIFMACRO
  488 @ IFMACRO(!privateCreateMat)
  489 & IFMACRO(privateBuildDmesh)
  490 &     fespace PhLocalPrivate(ThTab[ 1 - 1], P0);
  491 &     PhLocalPrivate partLocal;
  492 &     partLocal =  partGlobal;
  493 &     privateDmeshThkhiDef[1].resize(partLocal[].n);
  494 &     privateDmeshThkhiDef[1] = partLocal[];
  495 & ENDIFMACRO
ENDIFMACRO
  489 @ IFMACRO(privateBuildDmesh)
  490 &     fespace PhLocalPrivate(ThTab[ 1 - 1], P0);
  491 &     PhLocalPrivate partLocal;
  492 &     partLocal =  partGlobal;
  493 &     privateDmeshThkhiDef[1].resize(partLocal[].n);
  494 &     privateDmeshThkhiDef[1] = partLocal[];
  495 & ENDIFMACRO
  490 @     fespace PhLocalPrivate(ThTab[ 1 - 1], P0);
  491 @     PhLocalPrivate partLocal;
  492 @     partLocal =  partGlobal;
  493 @     privateDmeshThkhiDef[1].resize(partLocal[].n);
  494 @     privateDmeshThkhiDef[1] = partLocal[];
  495 @ 
  496 @ 
  496 @ 
  496 @     searchMethod = backupSM;
  497 @ }
  936 @ 
  935 @ IFMACRO(!privateBuildDmesh)
  936 &         partitionPrivate(ThTab,  ThBorderTab, ThGlobal, PhGlobalPrivate, VhGlobalPrivate, partGlobal, mpiRank( mpiCommWorld), mpiSize( mpiCommWorld),  privateS,  overlap,  1,  prolongation,  DTab,  P1,  intersection,  mpiCommWorld,  fakeInterface,  P1,  def,  init,  1)
  937 & ENDIFMACRO
  938 @     }
  939 @     else if(mpiSize( mpiCommWorld) == 1) {
  940 @         for(int i =  1 - 1; i > 0; --i) {
  941 @             ThTab[i - 1] = trunc(ThTab[i], 1, split =  privateS);
  942 @             fespace WhLocalRefinedPrivate(ThTab[i - 1],  P1);
  943 @             fespace WhLocalCoarsePrivate(ThTab[i],  P1);
  944 @              prolongation[i - 1] = interpolate(WhLocalRefinedPrivate, WhLocalCoarsePrivate);
  945 @              DTab[i].resize(WhLocalCoarsePrivate.ndof);
  946 @              DTab[i] = 1.0;
  947 @         }
  948 @         if( 1 == 1) {
  949 @ IFMACRO(privateBuildDmesh)
  950 & IFMACRO(privateDmeshN2O)
  951 &             if( privateS > 1)
  952 &                 ThTab[0] = trunc(ThTab[0], 1, split =  privateS, new2old = privateDmeshN2O);
  953 &             else {
  954 &                 privateDmeshN2O.resize(ThTab[0].nt);
  955 &                 privateDmeshN2O = 0:ThTab[0].nt-1;
  956 &             }
  957 & ENDIFMACRO
IFMACRO(!privateDmeshN2O)
  958 &             if( privateS > 1)
  959 &                 ThTab[0] = trunc(ThTab[0], 1, split =  privateS);
  960 & ENDIFMACRO
ENDIFMACRO
  950 @ IFMACRO(privateDmeshN2O)
  951 &             if( privateS > 1)
  952 &                 ThTab[0] = trunc(ThTab[0], 1, split =  privateS, new2old = privateDmeshN2O);
  953 &             else {
  954 &                 privateDmeshN2O.resize(ThTab[0].nt);
  955 &                 privateDmeshN2O = 0:ThTab[0].nt-1;
  956 &             }
  957 & ENDIFMACRO
  958 @ IFMACRO(!privateDmeshN2O)
  959 &             if( privateS > 1)
  960 &                 ThTab[0] = trunc(ThTab[0], 1, split =  privateS);
  961 & ENDIFMACRO
  959 @             if( privateS > 1)
  960 @                 ThTab[0] = trunc(ThTab[0], 1, split =  privateS);
  961 @ 
  962 @ 
  961 @ IFMACRO(!privateBuildDmesh)
  962 &             if( privateS > 1)
  963 &                 ThTab[0] = trunc(ThTab[0], 1, split =  privateS);
  964 & ENDIFMACRO
  965 @         }
  966 @         fespace WhLocalPrivate(ThTab[0],  P1);
  967 @          DTab[0].resize(WhLocalPrivate.ndof);
  968 @          DTab[0] = 1.0;
  969 @     }
  970 @     if(verbosity > 0) {
  971 @         mpiBarrier( mpiCommWorld);
  972 @         if(mpiRank( mpiCommWorld) == 0)
  973 @             cout.scientific << " --- partition of unity built (in " << mpiWtime() - timerPartition << ")" << endl;
  974 @     }
  975 @ }
  974 @     Th = ThTab[0];
  975 @      ThBorder = ThBorderTab[0];
  976 @      privateDmeshThkhiDef[0].resize(DTab[0].n);
  977 @      privateDmeshThkhiDef[0] = DTab[0];
  978 @ }
 1150 @ };
  616 @ 
  617 @ 
  613 @ 
  613 @ }
  614 @ 
  761 @ }
  762 @ 
  763 @ NewMacro privateCreateMat()1 EndMacro
  764 @ int[int][int] intersection;
  765 @ real[int][int] DTab(1);
  766 @ meshNmesh3[int] ThTab(1);
  767 @ ThTab[0] = Th;
  768 @ NewMacro privateDmeshThTab()privateDmeshTh EndMacro
  769 @ NewMacro privateDmeshThTabkhi()privateDmeshThkhiDef EndMacro
  770 @ NewMacro privateDmeshThTabintersection()privateDmeshThintersectionDef EndMacro
  771 @ IFMACRO(!def)
  772 & NewMacro def(i)i EndMacro
ENDIFMACRO
  772 @ NewMacro def(i)i EndMacro )  
  773 @ 
  773 @ IFMACRO(!init)
  774 & NewMacro init(i)i EndMacro
ENDIFMACRO
  774 @ NewMacro init(i)i EndMacro )  
  775 @ 
  775 @ if(mpiSize(ThComm mpiCommWorld ) > 1) {
  776 @ IFMACRO(ThN2O)
  777 & IFMACRO(ThOriginal)
  778 & IFMACRO(ThRestriction)
  779 &     NewMacro privateDmeshN2O()ThN2O EndMacro
    NewMacro privateDmeshOriginal()ThOriginal EndMacro
    NewMacro privateDmeshRestriction()ThRestriction EndMacro
ENDIFMACRO
ENDIFMACRO
ENDIFMACRO
  780 @ IFMACRO(!ThPkPart)
  781 &     NewMacro ThPkPart() Pk EndMacro
ENDIFMACRO
  781 @     NewMacro ThPkPart() Pk EndMacro
  782 @ 
  782 @ IFMACRO(ThCartesianPartitioning)
  783 &     NewMacro privateDmeshCartesianPartitioning() EndMacro
IFMACRO(!dimension)
  784 &     NewMacro dimension()2 EndMacro
ENDIFMACRO
ENDIFMACRO
  785 @ IFMACRO(ThPostProcessD)
  786 &     NewMacro privateDmeshPostProcessD(arg)ThPostProcessD(arg) EndMacro
IFMACRO(removeZeros,true)
  787 &     exit(105); /* not currently implemented */
  788 & ENDIFMACRO
IFMACRO(trueRestrict,true)
  789 &     exit(105); /* not currently implemented */
  790 & ENDIFMACRO
ENDIFMACRO
  791 @     partitionPrivate(ThTab, privateCreateMat, privateCreateMat, privateCreateMat, privateCreateMat, privateCreateMat, mpiRank(ThComm), mpiSize(ThComm), 1, 1, 1, privateCreateMat, DTab,  Pk, intersection, ThComm, -111111, ThPkPart, def, init, 1) 
   86 @        
   87 @       
   88 @       
   89 @ 
   90 @ 
   91 @     
   92 @     
   93 @      
   94 @      
   95 @     
   96 @            
   97 @                   
   98 @              
   99 @          
  100 @          
  101 @            
  102 @                    
  103 @         
  104 @             
  105 @         
  106 @                         
  107 @          
  108 @               
  109 @             
  110 @                
  111 @                     
  112 @                   
  113 @               
  114 @                  
  115 @         
  116 @     
  117 @       
  118 @ 
  119 @                
  120 @ 
  121 @        
  122 @      
  123 @        
  124 @        
  125 @                
  126 @                
  127 @                
  128 @                  
  129 @     
  130 @     
  131 @           
  132 @       
  133 @ 
  134 @                  
  135 @ 
  136 @        
  137 @        
  138 @                        
  139 @ 
  140 @                                                                                                     
  141 @ 
  142 @                                                                                                                          
  143 @         
  144 @         
  145 @ 
  146 @ 
  147 @ 
  148 @                  
  149 @ 
  150 @        
  151 @        
  152 @                        
  153 @ 
  154 @                                                                                                     
  155 @ 
  156 @                                                                                                                             
  157 @         
  158 @         
  159 @ 
  160 @ 
  161 @     
  162 @            
  163 @            
  164 @         
  165 @           
  166 @         
  167 @           
  168 @     
  169 @ 
  170 @ 
  171 @        
  172 @           
  173 @            
  174 @                
  175 @                       
  176 @                       
  177 @                           
  178 @                     
  179 @                   
  180 @                      
  181 @             
  182 @         
  183 @         
  184 @                      
  185 @                     
  186 @     
  187 @              
  188 @            
  189 @               
  190 @                                     
  191 @               
  192 @                           
  193 @                                    
  194 @                          
  195 @                       
  196 @                        
  197 @                       
  198 @                        
  199 @                          
  200 @                 
  201 @             
  202 @                          
  203 @                         
  204 @         
  205 @     
  206 @         
  207 @ 
  208 @   
  209 @        
  210 @     
  211 @ 
  212 @ 
  213 @       
  214 @     
  215 @ 
  216 @             
  217 @      
  218 @       
  219 @      
  220 @            
  221 @          
  222 @           
  223 @           
  224 @           
  225 @     
  226 @     
  227 @           
  228 @     
  229 @        
  230 @     
  231 @              
  232 @         
  233 @         
  234 @                 
  235 @                    
  236 @                
  237 @                 
  238 @                          
  239 @                       
  240 @                         
  241 @                     
  242 @                             
  243 @                       
  244 @                 
  245 @             
  246 @         
  247 @     
  248 @        
  249 @         
  250 @           
  251 @     
  252 @         
  253 @ 
  254 @ 
  255 @       
  256 @          
  257 @         
  258 @     
  259 @       
  260 @         
  261 @ 
  262 @ 
  263 @ 
  264 @     
  265 @             
  266 @           
  267 @         
  268 @             
  269 @     
  270 @ 
  271 @ 
  272 @ 
  273 @ 
  274 @ 
  275 @     
  276 @           
  277 @ 
  278 @      
  279 @ 
  280 @      
  281 @           
  282 @         
  283 @ 
  284 @                   
  285 @                 
  286 @              
  287 @              
  288 @                 
  289 @                        
  290 @ 
  291 @                
  292 @              
  293 @                              
  294 @ 
  295 @                                                                                                              
  296 @ 
  297 @                                                                                                                                      
  298 @ 
  299 @ 
  300 @                        
  301 @                 
  302 @                   
  303 @             
  304 @             
  305 @ 
  306 @             
  307 @ 
  308 @                   
  309 @                   
  310 @ 
  311 @ 
  312 @                   
  313 @                   
  314 @ 
  315 @                           
  316 @             
  317 @         
  318 @     
  319 @ 
  320 @             
  321 @                
  322 @                     
  323 @                         
  324 @                           
  325 @             
  326 @               
  327 @           
  328 @           
  329 @            
  330 @                
  331 @                  
  332 @          
  333 @            
  334 @             
  335 @            
  336 @                 
  337 @                   
  338 @              
  339 @                
  340 @                 
  341 @               
  342 @         
  343 @           
  344 @           
  345 @          
  346 @           
  347 @         
  348 @           
  349 @     
  350 @     
  351 @           
  352 @      
  353 @               
  354 @            
  355 @                 
  356 @                
  357 @                     
  358 @                             
  359 @                           
  360 @                 
  361 @             
  362 @         
  363 @     
  364 @            
  365 @           
  366 @          
  367 @            
  368 @          
  369 @         
  370 @               
  371 @              
  372 @              
  373 @                     
  374 @                   
  375 @                    
  376 @                   
  377 @                      
  378 @             
  379 @              
  380 @              
  381 @ 
  382 @                        
  383 @ 
  384 @ 
  385 @             
  386 @                  
  387 @                            
  388 @                 
  389 @                   
  390 @                 
  391 @                   
  392 @             
  393 @ 
  394 @               
  395 @               
  396 @                       
  397 @                    
  398 @                    
  399 @                       
  400 @                              
  401 @                        
  402 @                           
  403 @                           
  404 @                          
  405 @                           
  406 @                                    
  407 @                     
  408 @                      
  409 @                           
  410 @                             
  411 @                     
  412 @                 
  413 @             
  414 @         
  415 @         
  416 @          
  417 @          
  418 @            
  419 @                 
  420 @                
  421 @                
  422 @                    
  423 @                     
  424 @                       
  425 @                 
  426 @             
  427 @              
  428 @                 
  429 @                    
  430 @                   
  431 @                      
  432 @                 
  433 @                   
  434 @                      
  435 @             
  436 @         
  437 @         
  438 @             
  439 @           
  440 @                 
  441 @                
  442 @                
  443 @                    
  444 @                     
  445 @                       
  446 @                 
  447 @             
  448 @              
  449 @ 
  450 @                   
  451 @                   
  452 @ 
  453 @ 
  454 @                   
  455 @                   
  456 @ 
  457 @                         
  458 @                   
  459 @                      
  460 @                     
  461 @                       
  462 @                       
  463 @                     
  464 @             
  465 @         
  466 @           
  467 @         
  468 @           
  469 @         
  470 @               
  471 @                
  472 @                  
  473 @                
  474 @                             
  475 @         
  476 @     
  477 @ 
  478 @ 
  479 @       
  480 @                   
  481 @                  
  482 @                 
  483 @                      
  484 @                          
  485 @                                   
  486 @         
  487 @ 
  488 @ 
  489 @ 
  490 @         
  491 @ 
  492 @      
  493 @ 
  494 @ 
  495 @ 
  496 @      
  497 @       
  498 @ 
  499 @         
  500 @      
  501 @       
  502 @                  
  503 @            
  504 @ 
  505 @             
  506 @          
  507 @           
  508 @               
  509 @ 
  510 @ 
  511 @               
  512 @ 
  513 @     
  514 @                  
  515 @           
  516 @     
  517 @           
  518 @         
  519 @ 
  520 @       
  521 @ 
  522 @ 
  523 @ 
  524 @ 
  525 @         
  526 @      
  527 @       
  528 @     
  529 @       
  530 @ 
  531 @ 
  532 @ 
  533 @       
  534 @  {
   86 @     int backupSM = searchMethod;
   87 @     searchMethod = 1;
   88 @     assert( 1 >= 1);
   89 @ IFMACRO(!privateCreatePartition)
   90 & IFMACRO(!privateCreateMat)
   91 &      intersection.resize(1);
   92 &      intersection[0].resize(0);
   93 &      privateCreateMat supp;
   94 &      privateCreateMat suppSmooth;
   95 &     {
   96 &         int constant =  mpiRank(ThComm);
   97 &         for[i, value : supp[]] value = abs( privateCreateMat[][i] - constant) < 0.1;
   98 &         AddLayers( privateCreateMat, supp[], 2 *  1, suppSmooth[]);
   99 &         int[int] n2o;
  100 &         meshN neighbors;
  101 &         bool connected = false;
  102 &         for[i, value : suppSmooth[]] if(abs(value - 0.5) < 0.5) connected = true;
  103 &         if(!connected)
  104 &             n2o.resize(0);
  105 &         else
            neighbors = trunc( privateCreateMat, suppSmooth > 0.001 && suppSmooth < 0.999, new2old = n2o);
  106 &         int[int] partOverlap(n2o.n);
  107 &         for[i, value : n2o] partOverlap[i] =  privateCreateMat[][value];
  108 &         Unique(partOverlap,  intersection[0], remove = constant);
  109 &         if( 1 > 1 &&  1 <= 1) {
  110 &              privateCreateMat = trunc( privateCreateMat, suppSmooth > 0.001, split =  1);
  111 &             supp = abs( privateCreateMat - constant) < 0.1;
  112 &             suppSmooth = 0;
  113 &             AddLayers( privateCreateMat, supp[], 2 *  1, suppSmooth[]);
  114 &         }
  115 &     }
  116 &     int[int] n2oGlobalPrivate, n2oNeighbor;
  117 & IFMACRO(!privateDmeshCartesianPartitioning)
  118 &      privateCreateMat = trunc( privateCreateMat, suppSmooth > 0.001, label = 9999, new2old = n2oGlobalPrivate);
  119 & ENDIFMACRO
    real eps =  privateCreateMat.measure;
  120 &     real[int] epsTab( intersection[0].n);
  121 &     mpiRequest[int] rq(2 *  intersection[0].n);
  122 &     if(mpiSize( ThComm) ==  mpiSize(ThComm)) {
  123 &         for(int j = 0; j <  intersection[0].n; ++j)
  124 &             Irecv(processor( intersection[0][j],  ThComm, rq[j]), epsTab[j]);
  125 &         for(int j = 0; j <  intersection[0].n; ++j)
  126 &             Isend(processor( intersection[0][j],  ThComm, rq[ intersection[0].n + j]), eps);
  127 &     }
  128 &     else
        epsTab = 1.0e+30;
  129 &     suppSmooth = suppSmooth;
  130 & IFMACRO(!privateDmeshN2O)
  131 &     ThTab[ 1 - 1] = trunc( privateCreateMat, suppSmooth > 0.501, label =  -111111, new2old = n2oNeighbor);
  132 & IFMACRO(privateDmeshCartesianPartitioning)
  133 &     real[int] bb(2 * dimension);
  134 &     boundingbox(ThTab[ 1 - 1], bb);
  135 &     ThTab[ 1 - 1] = trunc( privateCreateMat, x > bb[0] && x < bb[1] && y > bb[2] && y < bb[3]
  136 & IFMACRO(dimension,3)
  137 &                                                                                              && z > bb[4] && z < bb[5]
  138 & ENDIFMACRO
                                                                                                                      , label =  -111111);
  139 &      privateCreateMat = ThTab[ 1 - 1];
  140 &     n2oNeighbor = 0: privateCreateMat.nt - 1;
  141 & ENDIFMACRO
ENDIFMACRO
IFMACRO(privateDmeshN2O)
  142 &     ThTab[ 1 - 1] = trunc( privateCreateMat, suppSmooth > 0.501, label =  -111111, new2old = privateDmeshN2O);
  143 & IFMACRO(privateDmeshCartesianPartitioning)
  144 &     real[int] bb(2 * dimension);
  145 &     boundingbox(ThTab[ 1 - 1], bb);
  146 &     ThTab[ 1 - 1] = trunc( privateCreateMat, x > bb[0] && x < bb[1] && y > bb[2] && y < bb[3]
  147 & IFMACRO(dimension,3)
  148 &                                                                                              && z > bb[4] && z < bb[5]
  149 & ENDIFMACRO
                                                                                                                      , label =  -111111, new2old = privateDmeshN2O);
  150 &      privateCreateMat = ThTab[ 1 - 1];
  151 &     n2oNeighbor = 0: privateCreateMat.nt - 1;
  152 & ENDIFMACRO
IFMACRO(!privateDmeshCartesianPartitioning)
  153 &     {
  154 &         int[int] backup = privateDmeshN2O;
  155 &         int[int] new = n2oGlobalPrivate(privateDmeshN2O);
  156 &         privateDmeshN2O.resize(new.n);
  157 &         privateDmeshN2O = new;
  158 &         n2oNeighbor.resize(backup.n);
  159 &         n2oNeighbor = backup;
  160 &     }
  161 & ENDIFMACRO
ENDIFMACRO
    if( 1 > 1) {
  162 &          privateCreateMat.resize( 1 - 1);
  163 &         if( 1 > 1) {
  164 &             meshN globalNameRefined =  privateCreateMat;
  165 &             for(int i =  1 - 1; i > 0; --i) {
  166 &                 globalNameRefined = trunc(globalNameRefined, 1, split =  1);
  167 &                 ThTab[i - 1] = trunc(globalNameRefined, suppSmooth > 0.501, label =  -111111);
  168 &                 fespace WhLocalRefinedPrivate(ThTab[i - 1],  Pk);
  169 &                 fespace WhLocalCoarsePrivate(ThTab[i],  Pk);
  170 &                  privateCreateMat[i - 1] = interpolate(WhLocalRefinedPrivate, WhLocalCoarsePrivate);
  171 &             }
  172 &         }
  173 &         else
            for(int i =  1 - 1; i > 0; --i)
  174 &                 ThTab[i - 1] = ThTab[i];
  175 &     }
  176 &     if(!removeZeros && ( -111111 != -111111 ||  1 != 1)) {
  177 &         if(suppSmooth[].min < 0.501) {
  178 &             supp = supp;
  179 &              privateCreateMat[ 1 - 1] = trunc( privateCreateMat, (suppSmooth > ( 1 - 0.999) / real(2 *  1)) && (suppSmooth < 0.501), label = (abs( -111111) + 1) * 100);
  180 &             if( 1 > 1)
  181 &                 for(int i =  1 - 2; i >= 0; --i) {
  182 &                      privateCreateMat[i] = trunc( privateCreateMat[i + 1], 1, split =  1, label = (abs( -111111) + 1) * 100);
  183 &                     meshN tempRefined = ThTab[i] +  privateCreateMat[i];
  184 &                     fespace PhRefinedPrivate(tempRefined, P0);
  185 &                     PhRefinedPrivate suppRefined = supp;
  186 &                     fespace VhBorderRefinedPrivate( privateCreateMat[i], P1);
  187 &                     VhBorderRefinedPrivate suppBorder = suppRefined;
  188 &                      privateCreateMat[i] = trunc( privateCreateMat[i], suppBorder > 0.01);
  189 &                 }
  190 &             else
                for(int i =  1 - 2; i >= 0; --i)
  191 &                      privateCreateMat[i] =  privateCreateMat[i + 1];
  192 &         }
  193 &     }
  194 &     fespace VhLocalPrivate(ThTab[ 1 - 1], P1);
  195 & IFMACRO(!privateDmeshThTab)
  196 & NewMacro privateDmeshThintersectionDef()partitionIntersectionTab EndMacro
    real[int][int] partitionIntersectionTab(1 +  intersection[0].n);
  197 &     privateDmeshThintersectionDef[0].resize( intersection[0].n);
  198 & ENDIFMACRO
IFMACRO(privateBuildDmesh)
  199 &     privateDmeshThintersectionDef.resize(1 +  intersection[0].n);
  200 &     privateDmeshThintersectionDef[0].resize( intersection[0].n);
  201 & ENDIFMACRO
    VhLocalPrivate khi = max(2 * suppSmooth - 1.0, 0.0);
  202 &     VhLocalPrivate sum;
  203 &     sum[] = khi[];
  204 &      privateCreateMat phi;
  205 &     if(n2oGlobalPrivate.n ==  privateCreateMat.nt &&  1 == 1) {
  206 &         real[int] restrictionPart(n2oGlobalPrivate.n);
  207 &         restrictionPart =  privateCreateMat[](n2oGlobalPrivate);
  208 &          privateCreateMat = 0.0;
  209 &          privateCreateMat[] = restrictionPart;
  210 &     }
  211 &     else
         privateCreateMat =  privateCreateMat;
  212 &     n2oGlobalPrivate.resize(0);
  213 &     int numberIntersection = 0;
  214 &     {
  215 &         int[int] restriction = restrict(VhLocalPrivate,  privateCreateMat, n2oNeighbor);
  216 &         n2oNeighbor.resize(0);
  217 &         mpiWaitAll(rq);
  218 &         for(int i = 0; i <  intersection[0].n; ++i) {
  219 &              privateCreateMat suppPartition = abs( privateCreateMat -  intersection[0][i]) < 0.1;
  220 &             AddLayers( privateCreateMat, suppPartition[],  1, phi[]);
  221 &             if(min(eps, epsTab[i]) > 0.0) {
  222 &                 if(intN( privateCreateMat, qforder = 2)(phi) / min(eps, epsTab[i]) > 1.0e-10) {
  223 &                     privateDmeshThintersectionDef[1 + numberIntersection].resize(restriction.n);
  224 &                     privateDmeshThintersectionDef[1 + numberIntersection] = phi[](restriction);
  225 &                     if(!trueRestrict)
  226 &                         sum[] += privateDmeshThintersectionDef[1 + numberIntersection];
  227 &                      intersection[0][numberIntersection++] =  intersection[0][i];
  228 &                 }
  229 &             }
  230 &         }
  231 &     }
  232 &     if(numberIntersection !=  intersection[0].n) {
  233 &          intersection[0].resize(numberIntersection);
  234 &         privateDmeshThintersectionDef.resize(1 + numberIntersection);
  235 &     }
  236 &      intersection.resize(1 +  1 * numberIntersection);
  237 & ENDIFMACRO
IFMACRO(privateCreateMat)
  238 &     assert( 1 == 1);
  239 &     int numberIntersection = privateDmeshThintersectionDef.n - 1;
  240 &      intersection.resize(1 +  1 * numberIntersection);
  241 &      intersection[0].resize(numberIntersection);
  242 &      intersection[0] = lround(privateDmeshThintersectionDef[0]);
  243 &     fespace VhLocalPrivate(ThTab[ 1 - 1], P1);
  244 & IFMACRO(privateDmeshN2O)
  245 & IFMACRO(privateDmeshOriginal)
  246 & IFMACRO(privateDmeshRestriction)
  247 &     {
  248 &         fespace WhLocalPrivate(ThTab[ 1 - 1],  Pk);
  249 &         fespace WhOriginalPrivate(privateDmeshOriginal,  Pk);
  250 &         privateDmeshRestriction.resize(WhOriginalPrivate.ndof);
  251 &         privateDmeshRestriction = restrict(WhLocalPrivate, WhOriginalPrivate, privateDmeshN2O);
  252 &     }
  253 & ENDIFMACRO
ENDIFMACRO
ENDIFMACRO
ENDIFMACRO
IFMACRO(privateBuildDmesh)
  254 &     privateDmeshThintersectionDef[0].resize(numberIntersection);
  255 &     for[i, value :  intersection[0]] privateDmeshThintersectionDef[0][i] = value;
  256 & ENDIFMACRO
    meshN[int] meshIntersection(numberIntersection);
  257 & IFMACRO(!privateCreateMat)
  258 &     int[int][int] n2oIntersection(0);
  259 &     if(trueRestrict && mpiSize( ThComm) ==  mpiSize(ThComm) && removeZeros)
  260 &         n2oIntersection.resize(numberIntersection);
  261 & ENDIFMACRO
    for(int j = 0; j < ( 1 == 1 ? 1 :  1); ++j) {
  262 &         for(int i = 0; i < numberIntersection; ++i) {
  263 &             int[int] n2o;
  264 &             VhLocalPrivate partitionIntersection;
  265 &             partitionIntersection[] = privateDmeshThintersectionDef[1 + i];
  266 &             meshIntersection[i] = trunc(ThTab[j], partitionIntersection > 1.0e-6, new2old = n2o, label = 9999);
  267 & IFMACRO(privateDmeshCartesianPartitioning)
  268 &             real[int] bb(2 * dimension);
  269 &             boundingbox(meshIntersection[i], bb);
  270 &             meshIntersection[i] = trunc(ThTab[j], x > bb[0] && x < bb[1] && y > bb[2] && y < bb[3]
  271 & IFMACRO(dimension,3)
  272 &                                                                                                       && z > bb[4] && z < bb[5]
  273 & ENDIFMACRO
                                                                                                                               , new2old = n2o, label = 9999);
  274 & ENDIFMACRO
IFMACRO(!privateCreateMat)
  275 &             if(j == 0 && trueRestrict && mpiSize( ThComm) ==  mpiSize(ThComm) && removeZeros) {
  276 &                 n2oIntersection[i].resize(n2o.n);
  277 &                 n2oIntersection[i] = n2o;
  278 &             }
  279 &             if(!removeZeros)
  280 & ENDIFMACRO
            {
  281 & IFMACRO(vectorialfe)
  282 &                 fespace singleComponentWhPrivate(ThTab[j], vectorialfe);
  283 &                 fespace WhIntersectionPrivate(meshIntersection[i], vectorialfe);
  284 & ENDIFMACRO
IFMACRO(!vectorialfe)
  285 &                 fespace singleComponentWhPrivate(ThTab[j],  Pk);
  286 &                 fespace WhIntersectionPrivate(meshIntersection[i],  Pk);
  287 & ENDIFMACRO
                 intersection[1 + i + j * numberIntersection] = restrict(WhIntersectionPrivate, singleComponentWhPrivate, n2o);
  288 &             }
  289 &         }
  290 &     }
  291 & IFMACRO(!privateCreateMat)
  292 &     if( 1 == 1 &&  1 > 1 && !removeZeros)
  293 &         for(int j = 1; j <  1; ++j)
  294 &             for(int i = 0; i < numberIntersection; ++i) {
  295 &                  intersection[1 + i + j * numberIntersection].resize( intersection[1 + i].n);
  296 &                  intersection[1 + i + j * numberIntersection] =  intersection[1 + i];
  297 &             }
  298 &     for(int i = 0; i <  1 - 1; ++i) {
  299 &         fespace VhRefinedPrivate(ThTab[i], P1);
  300 &         fespace PhRefinedPrivate(ThTab[i], P0);
  301 &         PhRefinedPrivate partRefined =  privateCreateMat;
  302 &         PhRefinedPrivate supp = abs(partRefined -  mpiRank(ThComm)) < 0.1;
  303 &         varf vSupp(uPrivate, vPrivate) = intN(ThTab[i], qforder = 1)(supp * vPrivate);
  304 &         VhRefinedPrivate khiL;
  305 &         khiL[] = vSupp(0, VhRefinedPrivate);
  306 &         khiL = khiL > 0.0;
  307 &         VhRefinedPrivate sum = khiL;
  308 &         for(int j = 0; j < numberIntersection; ++j) {
  309 &             supp = abs(partRefined -  intersection[0][j]) < 0.1;
  310 &             VhRefinedPrivate phiL;
  311 &             phiL[] = vSupp(0, VhRefinedPrivate);
  312 &             phiL = phiL > 0.0;
  313 &             sum[] += phiL[];
  314 &         }
  315 &         khiL[] ./= sum[];
  316 &         fespace WhRefinedPrivate(ThTab[i],  ThPkPart);
  317 &         WhRefinedPrivate  def(func2vec);
  318 &          def(func2vec) =  init(khiL);
  319 &          DTab[i].resize(WhRefinedPrivate.ndof);
  320 &          DTab[i] = func2vec[];
  321 &     }
  322 &     if(!trueRestrict)
  323 &         khi[] ./= sum[];
  324 &     else {
  325 &         khi = abs( privateCreateMat -  mpiRank(ThComm)) < 0.1;
  326 &         VhLocalPrivate sigma =  privateCreateMat;
  327 &         for(int i = 0; i < numberIntersection; ++i) {
  328 &             if( mpiRank(ThComm) <  intersection[0][i]) {
  329 &                 for[j, value : khi[]] {
  330 &                     if(value > 0.9 && abs(sigma[][j] -  intersection[0][i]) < 0.1)
  331 &                         value = 0.0;
  332 &                 }
  333 &             }
  334 &         }
  335 &     }
  336 &     if(trueRestrict && mpiSize( ThComm) ==  mpiSize(ThComm) && removeZeros) {
  337 &         assert( 1 == 1);
  338 &         meshN ThIntersection;
  339 &         mpiRequest[int] rq(2 * numberIntersection);
  340 &         int[int] skip(0);
  341 &         {
  342 &             fespace PhIntersectionPrivate(ThIntersection, P0);
  343 &             PhIntersectionPrivate[int] recv(numberIntersection);
  344 &             PhIntersectionPrivate[int] send(numberIntersection);
  345 &             for(int i = 0; i < numberIntersection; ++i) {
  346 &                 ThIntersection = meshIntersection[i];
  347 &                 Irecv(processor( intersection[0][i],  ThComm, rq[i]), recv[i][]);
  348 &                 send[i] = khi;
  349 &                 Isend(processor( intersection[0][i],  ThComm, rq[numberIntersection + i]), send[i][]);
  350 &             }
  351 &             real[int] tmpRemove(ThTab[0].nt);
  352 &             int[int] n2oRemove;
  353 & IFMACRO(!privateDmeshN2O)
  354 &             ThTab[0] = trunc(ThTab[0], khi > 1.0e-6, label = 9999, new2old = n2oRemove);
  355 & ENDIFMACRO
IFMACRO(privateDmeshN2O)
  356 &             {
  357 &                 int[int] n2oFilter;
  358 &                 ThTab[0] = trunc(ThTab[0], khi > 1.0e-6, label = 9999, new2old = n2oRemove);
  359 &                 n2oFilter.resize(n2oRemove.n);
  360 &                 n2oFilter = privateDmeshN2O(n2oRemove);
  361 &                 privateDmeshN2O.resize(n2oFilter.n);
  362 &                 privateDmeshN2O = n2oFilter;
  363 &             }
  364 & ENDIFMACRO
            khi = khi;
  365 &             fespace PhLocalPrivate(ThTab[0], P0);
  366 &             for(int k = 0; k < 2 * numberIntersection; ++k) {
  367 &                 int i = mpiWaitAny(rq);
  368 &                 if(i < numberIntersection) {
  369 &                     ThIntersection = meshIntersection[i];
  370 &                     PhIntersectionPrivate  intersection = send[i] > 1.0e-6 && recv[i] > 1.0e-6;
  371 &                     if( intersection[].l2 > 1.0e-6) {
  372 &                         tmpRemove = 0.0;
  373 &                         tmpRemove(n2oIntersection[i]) =  intersection[];
  374 &                         PhLocalPrivate afterTrunc;
  375 &                         afterTrunc[] = tmpRemove(n2oRemove);
  376 &                         meshIntersection[i] = trunc(ThTab[0], afterTrunc > 1.0e-6, label = 9999, new2old = n2oIntersection[i]);
  377 &                     }
  378 &                     else {
  379 &                         skip.resize(skip.n + 1);
  380 &                         skip[skip.n - 1] = i;
  381 &                     }
  382 &                 }
  383 &             }
  384 &         }
  385 &         skip.sort;
  386 &         real[int][int] recv(numberIntersection);
  387 &         real[int][int] send(numberIntersection);
  388 &         int j = 0;
  389 &         for(int i = 0; i < numberIntersection; ++i) {
  390 &             bool skipped = false;
  391 &             if(j < skip.n) {
  392 &                 if(skip[j] == i) {
  393 &                     ++j;
  394 &                     skipped = true;
  395 &                 }
  396 &             }
  397 &             if(!skipped) {
  398 &                 recv[i].resize(meshIntersection[i].nv);
  399 &                 Irecv(processor( intersection[0][i],  ThComm, rq[i]), recv[i]);
  400 &                 fespace VhIntersectionPrivate(meshIntersection[i], P1);
  401 &                 int[int] restriction = restrict(VhIntersectionPrivate, VhLocalPrivate, n2oIntersection[i]);
  402 &                 send[i].resize(meshIntersection[i].nv);
  403 &                 send[i] = khi[](restriction);
  404 &                 Isend(processor( intersection[0][i],  ThComm, rq[numberIntersection + i]), send[i]);
  405 &             }
  406 &         }
  407 &         mpiWaitAll(rq);
  408 &          intersection.resize(1 + numberIntersection - skip.n);
  409 &         j = 0;
  410 &         for(int i = 0; i < numberIntersection; ++i) {
  411 &             bool skipped = false;
  412 &             if(j < skip.n) {
  413 &                 if(skip[j] == i) {
  414 &                     ++j;
  415 &                     skipped = true;
  416 &                 }
  417 &             }
  418 &             if(!skipped) {
  419 & IFMACRO(vectorialfe)
  420 &                 fespace singleComponentWhPrivate(ThTab[0], vectorialfe);
  421 &                 fespace WhIntersectionPrivate(meshIntersection[i], vectorialfe);
  422 & ENDIFMACRO
IFMACRO(!vectorialfe)
  423 &                 fespace singleComponentWhPrivate(ThTab[0],  Pk);
  424 &                 fespace WhIntersectionPrivate(meshIntersection[i],  Pk);
  425 & ENDIFMACRO
                 intersection[1 + i - j] = restrict(WhIntersectionPrivate, singleComponentWhPrivate, n2oIntersection[i]);
  426 &                 fespace VhIntersectionPrivate(meshIntersection[i], P1);
  427 &                 int[int] restriction = restrict(VhIntersectionPrivate, VhLocalPrivate, n2oIntersection[i]);
  428 &                 privateDmeshThintersectionDef[1 + i - j].resize(VhLocalPrivate.ndof);
  429 &                 privateDmeshThintersectionDef[1 + i - j] = 0.0;
  430 &                 privateDmeshThintersectionDef[1 + i - j](restriction) = recv[i];
  431 &                  intersection[0][i - j] =  intersection[0][i];
  432 &             }
  433 &         }
  434 &         numberIntersection -= skip.n;
  435 &          intersection[0].resize(numberIntersection);
  436 &         privateDmeshThintersectionDef.resize(1 + numberIntersection);
  437 &         privateDmeshThintersectionDef[0].resize(numberIntersection);
  438 &         for[i, value :  intersection[0]] privateDmeshThintersectionDef[0][i] = value;
  439 &         if( -111111 != -111111 ||  1 != 1) {
  440 &              privateCreateMat suppPartition = khi > 0.1;
  441 &             AddLayers( privateCreateMat, suppPartition[], 1, phi[]);
  442 &              privateCreateMat[0] = trunc( privateCreateMat, phi > 0.001 && phi < 0.501, label = (abs( -111111) + 1) * 100);
  443 &         }
  444 &     }
  445 & ENDIFMACRO
IFMACRO(vectorialfe)
  446 &     if( 1 > 1)
  447 &         for(int i = 0; i <  intersection.n - 1; ++i) {
  448 &             int n =  intersection[1 + i].n;
  449 &              intersection[1 + i].resize(n *  1);
  450 &             for(int j = n - 1; j != -1; --j)
  451 &                 for(int k =  1 - 1; k != -1; --k)
  452 &                      intersection[1 + i][j *  1 + k] =  intersection[1 + i][j] *  1 + k;
  453 &         }
  454 & ENDIFMACRO
ENDIFMACRO
   90 @ IFMACRO(!privateCreateMat)
   91 &      intersection.resize(1);
   92 &      intersection[0].resize(0);
   93 &      privateCreateMat supp;
   94 &      privateCreateMat suppSmooth;
   95 &     {
   96 &         int constant =  mpiRank(ThComm);
   97 &         for[i, value : supp[]] value = abs( privateCreateMat[][i] - constant) < 0.1;
   98 &         AddLayers( privateCreateMat, supp[], 2 *  1, suppSmooth[]);
   99 &         int[int] n2o;
  100 &         meshN neighbors;
  101 &         bool connected = false;
  102 &         for[i, value : suppSmooth[]] if(abs(value - 0.5) < 0.5) connected = true;
  103 &         if(!connected)
  104 &             n2o.resize(0);
  105 &         else
            neighbors = trunc( privateCreateMat, suppSmooth > 0.001 && suppSmooth < 0.999, new2old = n2o);
  106 &         int[int] partOverlap(n2o.n);
  107 &         for[i, value : n2o] partOverlap[i] =  privateCreateMat[][value];
  108 &         Unique(partOverlap,  intersection[0], remove = constant);
  109 &         if( 1 > 1 &&  1 <= 1) {
  110 &              privateCreateMat = trunc( privateCreateMat, suppSmooth > 0.001, split =  1);
  111 &             supp = abs( privateCreateMat - constant) < 0.1;
  112 &             suppSmooth = 0;
  113 &             AddLayers( privateCreateMat, supp[], 2 *  1, suppSmooth[]);
  114 &         }
  115 &     }
  116 &     int[int] n2oGlobalPrivate, n2oNeighbor;
  117 & IFMACRO(!privateDmeshCartesianPartitioning)
  118 &      privateCreateMat = trunc( privateCreateMat, suppSmooth > 0.001, label = 9999, new2old = n2oGlobalPrivate);
  119 & ENDIFMACRO
    real eps =  privateCreateMat.measure;
  120 &     real[int] epsTab( intersection[0].n);
  121 &     mpiRequest[int] rq(2 *  intersection[0].n);
  122 &     if(mpiSize( ThComm) ==  mpiSize(ThComm)) {
  123 &         for(int j = 0; j <  intersection[0].n; ++j)
  124 &             Irecv(processor( intersection[0][j],  ThComm, rq[j]), epsTab[j]);
  125 &         for(int j = 0; j <  intersection[0].n; ++j)
  126 &             Isend(processor( intersection[0][j],  ThComm, rq[ intersection[0].n + j]), eps);
  127 &     }
  128 &     else
        epsTab = 1.0e+30;
  129 &     suppSmooth = suppSmooth;
  130 & IFMACRO(!privateDmeshN2O)
  131 &     ThTab[ 1 - 1] = trunc( privateCreateMat, suppSmooth > 0.501, label =  -111111, new2old = n2oNeighbor);
  132 & IFMACRO(privateDmeshCartesianPartitioning)
  133 &     real[int] bb(2 * dimension);
  134 &     boundingbox(ThTab[ 1 - 1], bb);
  135 &     ThTab[ 1 - 1] = trunc( privateCreateMat, x > bb[0] && x < bb[1] && y > bb[2] && y < bb[3]
  136 & IFMACRO(dimension,3)
  137 &                                                                                              && z > bb[4] && z < bb[5]
  138 & ENDIFMACRO
                                                                                                                      , label =  -111111);
  139 &      privateCreateMat = ThTab[ 1 - 1];
  140 &     n2oNeighbor = 0: privateCreateMat.nt - 1;
  141 & ENDIFMACRO
ENDIFMACRO
IFMACRO(privateDmeshN2O)
  142 &     ThTab[ 1 - 1] = trunc( privateCreateMat, suppSmooth > 0.501, label =  -111111, new2old = privateDmeshN2O);
  143 & IFMACRO(privateDmeshCartesianPartitioning)
  144 &     real[int] bb(2 * dimension);
  145 &     boundingbox(ThTab[ 1 - 1], bb);
  146 &     ThTab[ 1 - 1] = trunc( privateCreateMat, x > bb[0] && x < bb[1] && y > bb[2] && y < bb[3]
  147 & IFMACRO(dimension,3)
  148 &                                                                                              && z > bb[4] && z < bb[5]
  149 & ENDIFMACRO
                                                                                                                      , label =  -111111, new2old = privateDmeshN2O);
  150 &      privateCreateMat = ThTab[ 1 - 1];
  151 &     n2oNeighbor = 0: privateCreateMat.nt - 1;
  152 & ENDIFMACRO
IFMACRO(!privateDmeshCartesianPartitioning)
  153 &     {
  154 &         int[int] backup = privateDmeshN2O;
  155 &         int[int] new = n2oGlobalPrivate(privateDmeshN2O);
  156 &         privateDmeshN2O.resize(new.n);
  157 &         privateDmeshN2O = new;
  158 &         n2oNeighbor.resize(backup.n);
  159 &         n2oNeighbor = backup;
  160 &     }
  161 & ENDIFMACRO
ENDIFMACRO
    if( 1 > 1) {
  162 &          privateCreateMat.resize( 1 - 1);
  163 &         if( 1 > 1) {
  164 &             meshN globalNameRefined =  privateCreateMat;
  165 &             for(int i =  1 - 1; i > 0; --i) {
  166 &                 globalNameRefined = trunc(globalNameRefined, 1, split =  1);
  167 &                 ThTab[i - 1] = trunc(globalNameRefined, suppSmooth > 0.501, label =  -111111);
  168 &                 fespace WhLocalRefinedPrivate(ThTab[i - 1],  Pk);
  169 &                 fespace WhLocalCoarsePrivate(ThTab[i],  Pk);
  170 &                  privateCreateMat[i - 1] = interpolate(WhLocalRefinedPrivate, WhLocalCoarsePrivate);
  171 &             }
  172 &         }
  173 &         else
            for(int i =  1 - 1; i > 0; --i)
  174 &                 ThTab[i - 1] = ThTab[i];
  175 &     }
  176 &     if(!removeZeros && ( -111111 != -111111 ||  1 != 1)) {
  177 &         if(suppSmooth[].min < 0.501) {
  178 &             supp = supp;
  179 &              privateCreateMat[ 1 - 1] = trunc( privateCreateMat, (suppSmooth > ( 1 - 0.999) / real(2 *  1)) && (suppSmooth < 0.501), label = (abs( -111111) + 1) * 100);
  180 &             if( 1 > 1)
  181 &                 for(int i =  1 - 2; i >= 0; --i) {
  182 &                      privateCreateMat[i] = trunc( privateCreateMat[i + 1], 1, split =  1, label = (abs( -111111) + 1) * 100);
  183 &                     meshN tempRefined = ThTab[i] +  privateCreateMat[i];
  184 &                     fespace PhRefinedPrivate(tempRefined, P0);
  185 &                     PhRefinedPrivate suppRefined = supp;
  186 &                     fespace VhBorderRefinedPrivate( privateCreateMat[i], P1);
  187 &                     VhBorderRefinedPrivate suppBorder = suppRefined;
  188 &                      privateCreateMat[i] = trunc( privateCreateMat[i], suppBorder > 0.01);
  189 &                 }
  190 &             else
                for(int i =  1 - 2; i >= 0; --i)
  191 &                      privateCreateMat[i] =  privateCreateMat[i + 1];
  192 &         }
  193 &     }
  194 &     fespace VhLocalPrivate(ThTab[ 1 - 1], P1);
  195 & IFMACRO(!privateDmeshThTab)
  196 & NewMacro privateDmeshThintersectionDef()partitionIntersectionTab EndMacro
    real[int][int] partitionIntersectionTab(1 +  intersection[0].n);
  197 &     privateDmeshThintersectionDef[0].resize( intersection[0].n);
  198 & ENDIFMACRO
IFMACRO(privateBuildDmesh)
  199 &     privateDmeshThintersectionDef.resize(1 +  intersection[0].n);
  200 &     privateDmeshThintersectionDef[0].resize( intersection[0].n);
  201 & ENDIFMACRO
    VhLocalPrivate khi = max(2 * suppSmooth - 1.0, 0.0);
  202 &     VhLocalPrivate sum;
  203 &     sum[] = khi[];
  204 &      privateCreateMat phi;
  205 &     if(n2oGlobalPrivate.n ==  privateCreateMat.nt &&  1 == 1) {
  206 &         real[int] restrictionPart(n2oGlobalPrivate.n);
  207 &         restrictionPart =  privateCreateMat[](n2oGlobalPrivate);
  208 &          privateCreateMat = 0.0;
  209 &          privateCreateMat[] = restrictionPart;
  210 &     }
  211 &     else
         privateCreateMat =  privateCreateMat;
  212 &     n2oGlobalPrivate.resize(0);
  213 &     int numberIntersection = 0;
  214 &     {
  215 &         int[int] restriction = restrict(VhLocalPrivate,  privateCreateMat, n2oNeighbor);
  216 &         n2oNeighbor.resize(0);
  217 &         mpiWaitAll(rq);
  218 &         for(int i = 0; i <  intersection[0].n; ++i) {
  219 &              privateCreateMat suppPartition = abs( privateCreateMat -  intersection[0][i]) < 0.1;
  220 &             AddLayers( privateCreateMat, suppPartition[],  1, phi[]);
  221 &             if(min(eps, epsTab[i]) > 0.0) {
  222 &                 if(intN( privateCreateMat, qforder = 2)(phi) / min(eps, epsTab[i]) > 1.0e-10) {
  223 &                     privateDmeshThintersectionDef[1 + numberIntersection].resize(restriction.n);
  224 &                     privateDmeshThintersectionDef[1 + numberIntersection] = phi[](restriction);
  225 &                     if(!trueRestrict)
  226 &                         sum[] += privateDmeshThintersectionDef[1 + numberIntersection];
  227 &                      intersection[0][numberIntersection++] =  intersection[0][i];
  228 &                 }
  229 &             }
  230 &         }
  231 &     }
  232 &     if(numberIntersection !=  intersection[0].n) {
  233 &          intersection[0].resize(numberIntersection);
  234 &         privateDmeshThintersectionDef.resize(1 + numberIntersection);
  235 &     }
  236 &      intersection.resize(1 +  1 * numberIntersection);
  237 & ENDIFMACRO
  238 @ IFMACRO(privateCreateMat)
  239 &     assert( 1 == 1);
  240 &     int numberIntersection = privateDmeshThintersectionDef.n - 1;
  241 &      intersection.resize(1 +  1 * numberIntersection);
  242 &      intersection[0].resize(numberIntersection);
  243 &      intersection[0] = lround(privateDmeshThintersectionDef[0]);
  244 &     fespace VhLocalPrivate(ThTab[ 1 - 1], P1);
  245 & IFMACRO(privateDmeshN2O)
  246 & IFMACRO(privateDmeshOriginal)
  247 & IFMACRO(privateDmeshRestriction)
  248 &     {
  249 &         fespace WhLocalPrivate(ThTab[ 1 - 1],  Pk);
  250 &         fespace WhOriginalPrivate(privateDmeshOriginal,  Pk);
  251 &         privateDmeshRestriction.resize(WhOriginalPrivate.ndof);
  252 &         privateDmeshRestriction = restrict(WhLocalPrivate, WhOriginalPrivate, privateDmeshN2O);
  253 &     }
  254 & ENDIFMACRO
ENDIFMACRO
ENDIFMACRO
ENDIFMACRO
  239 @     assert( 1 == 1);
  240 @     int numberIntersection = privateDmeshThintersectionDef.n - 1;
  241 @      intersection.resize(1 +  1 * numberIntersection);
  242 @      intersection[0].resize(numberIntersection);
  243 @      intersection[0] = lround(privateDmeshThintersectionDef[0]);
  244 @     fespace VhLocalPrivate(ThTab[ 1 - 1], P1);
  245 @ IFMACRO(privateDmeshN2O)
  246 & IFMACRO(privateDmeshOriginal)
  247 & IFMACRO(privateDmeshRestriction)
  248 &     {
  249 &         fespace WhLocalPrivate(ThTab[ 1 - 1],  Pk);
  250 &         fespace WhOriginalPrivate(privateDmeshOriginal,  Pk);
  251 &         privateDmeshRestriction.resize(WhOriginalPrivate.ndof);
  252 &         privateDmeshRestriction = restrict(WhLocalPrivate, WhOriginalPrivate, privateDmeshN2O);
  253 &     }
  254 & ENDIFMACRO
ENDIFMACRO
ENDIFMACRO
  255 @ 
  255 @ IFMACRO(privateBuildDmesh)
  256 &     privateDmeshThintersectionDef[0].resize(numberIntersection);
  257 &     for[i, value :  intersection[0]] privateDmeshThintersectionDef[0][i] = value;
  258 & ENDIFMACRO
  259 @     meshNmesh3[int] meshIntersection(numberIntersection);
  260 @ IFMACRO(!privateCreateMat)
  261 &     int[int][int] n2oIntersection(0);
  262 &     if(trueRestrict && mpiSize( ThComm) ==  mpiSize(ThComm) && removeZeros)
  263 &         n2oIntersection.resize(numberIntersection);
  264 & ENDIFMACRO
  265 @     for(int j = 0; j < ( 1 == 1 ? 1 :  1); ++j) {
  266 @         for(int i = 0; i < numberIntersection; ++i) {
  267 @             int[int] n2o;
  268 @             VhLocalPrivate partitionIntersection;
  269 @             partitionIntersection[] = privateDmeshThintersectionDef[1 + i];
  270 @             meshIntersection[i] = trunc(ThTab[j], partitionIntersection > 1.0e-6, new2old = n2o, label = 9999);
  271 @ IFMACRO(privateDmeshCartesianPartitioning)
  272 &             real[int] bb(2 * dimension);
  273 &             boundingbox(meshIntersection[i], bb);
  274 &             meshIntersection[i] = trunc(ThTab[j], x > bb[0] && x < bb[1] && y > bb[2] && y < bb[3]
  275 & IFMACRO(dimension,3)
  276 &                                                                                                       && z > bb[4] && z < bb[5]
  277 & ENDIFMACRO
                                                                                                                               , new2old = n2o, label = 9999);
  278 & ENDIFMACRO
  279 @ IFMACRO(!privateCreateMat)
  280 &             if(j == 0 && trueRestrict && mpiSize( ThComm) ==  mpiSize(ThComm) && removeZeros) {
  281 &                 n2oIntersection[i].resize(n2o.n);
  282 &                 n2oIntersection[i] = n2o;
  283 &             }
  284 &             if(!removeZeros)
  285 & ENDIFMACRO
  286 @             {
  287 @ IFMACRO(vectorialfe)
  288 &                 fespace singleComponentWhPrivate(ThTab[j], vectorialfe);
  289 &                 fespace WhIntersectionPrivate(meshIntersection[i], vectorialfe);
  290 & ENDIFMACRO
  291 @ IFMACRO(!vectorialfe)
  292 &                 fespace singleComponentWhPrivate(ThTab[j],  Pk);
  293 &                 fespace WhIntersectionPrivate(meshIntersection[i],  Pk);
  294 & ENDIFMACRO
  292 @                 fespace singleComponentWhPrivate(ThTab[j],  Pk);
  293 @                 fespace WhIntersectionPrivate(meshIntersection[i],  Pk);
  294 @ 
  295 @                  intersection[1 + i + j * numberIntersection] = restrict(WhIntersectionPrivate, singleComponentWhPrivate, n2o);
  296 @             }
  297 @         }
  298 @     }
  299 @ IFMACRO(!privateCreateMat)
  300 &     if( 1 == 1 &&  1 > 1 && !removeZeros)
  301 &         for(int j = 1; j <  1; ++j)
  302 &             for(int i = 0; i < numberIntersection; ++i) {
  303 &                  intersection[1 + i + j * numberIntersection].resize( intersection[1 + i].n);
  304 &                  intersection[1 + i + j * numberIntersection] =  intersection[1 + i];
  305 &             }
  306 &     for(int i = 0; i <  1 - 1; ++i) {
  307 &         fespace VhRefinedPrivate(ThTab[i], P1);
  308 &         fespace PhRefinedPrivate(ThTab[i], P0);
  309 &         PhRefinedPrivate partRefined =  privateCreateMat;
  310 &         PhRefinedPrivate supp = abs(partRefined -  mpiRank(ThComm)) < 0.1;
  311 &         varf vSupp(uPrivate, vPrivate) = intN(ThTab[i], qforder = 1)(supp * vPrivate);
  312 &         VhRefinedPrivate khiL;
  313 &         khiL[] = vSupp(0, VhRefinedPrivate);
  314 &         khiL = khiL > 0.0;
  315 &         VhRefinedPrivate sum = khiL;
  316 &         for(int j = 0; j < numberIntersection; ++j) {
  317 &             supp = abs(partRefined -  intersection[0][j]) < 0.1;
  318 &             VhRefinedPrivate phiL;
  319 &             phiL[] = vSupp(0, VhRefinedPrivate);
  320 &             phiL = phiL > 0.0;
  321 &             sum[] += phiL[];
  322 &         }
  323 &         khiL[] ./= sum[];
  324 &         fespace WhRefinedPrivate(ThTab[i],  ThPkPart);
  325 &         WhRefinedPrivate  def(func2vec);
  326 &          def(func2vec) =  init(khiL);
  327 &          DTab[i].resize(WhRefinedPrivate.ndof);
  328 &          DTab[i] = func2vec[];
  329 &     }
  330 &     if(!trueRestrict)
  331 &         khi[] ./= sum[];
  332 &     else {
  333 &         khi = abs( privateCreateMat -  mpiRank(ThComm)) < 0.1;
  334 &         VhLocalPrivate sigma =  privateCreateMat;
  335 &         for(int i = 0; i < numberIntersection; ++i) {
  336 &             if( mpiRank(ThComm) <  intersection[0][i]) {
  337 &                 for[j, value : khi[]] {
  338 &                     if(value > 0.9 && abs(sigma[][j] -  intersection[0][i]) < 0.1)
  339 &                         value = 0.0;
  340 &                 }
  341 &             }
  342 &         }
  343 &     }
  344 &     if(trueRestrict && mpiSize( ThComm) ==  mpiSize(ThComm) && removeZeros) {
  345 &         assert( 1 == 1);
  346 &         meshN ThIntersection;
  347 &         mpiRequest[int] rq(2 * numberIntersection);
  348 &         int[int] skip(0);
  349 &         {
  350 &             fespace PhIntersectionPrivate(ThIntersection, P0);
  351 &             PhIntersectionPrivate[int] recv(numberIntersection);
  352 &             PhIntersectionPrivate[int] send(numberIntersection);
  353 &             for(int i = 0; i < numberIntersection; ++i) {
  354 &                 ThIntersection = meshIntersection[i];
  355 &                 Irecv(processor( intersection[0][i],  ThComm, rq[i]), recv[i][]);
  356 &                 send[i] = khi;
  357 &                 Isend(processor( intersection[0][i],  ThComm, rq[numberIntersection + i]), send[i][]);
  358 &             }
  359 &             real[int] tmpRemove(ThTab[0].nt);
  360 &             int[int] n2oRemove;
  361 & IFMACRO(!privateDmeshN2O)
  362 &             ThTab[0] = trunc(ThTab[0], khi > 1.0e-6, label = 9999, new2old = n2oRemove);
  363 & ENDIFMACRO
IFMACRO(privateDmeshN2O)
  364 &             {
  365 &                 int[int] n2oFilter;
  366 &                 ThTab[0] = trunc(ThTab[0], khi > 1.0e-6, label = 9999, new2old = n2oRemove);
  367 &                 n2oFilter.resize(n2oRemove.n);
  368 &                 n2oFilter = privateDmeshN2O(n2oRemove);
  369 &                 privateDmeshN2O.resize(n2oFilter.n);
  370 &                 privateDmeshN2O = n2oFilter;
  371 &             }
  372 & ENDIFMACRO
            khi = khi;
  373 &             fespace PhLocalPrivate(ThTab[0], P0);
  374 &             for(int k = 0; k < 2 * numberIntersection; ++k) {
  375 &                 int i = mpiWaitAny(rq);
  376 &                 if(i < numberIntersection) {
  377 &                     ThIntersection = meshIntersection[i];
  378 &                     PhIntersectionPrivate  intersection = send[i] > 1.0e-6 && recv[i] > 1.0e-6;
  379 &                     if( intersection[].l2 > 1.0e-6) {
  380 &                         tmpRemove = 0.0;
  381 &                         tmpRemove(n2oIntersection[i]) =  intersection[];
  382 &                         PhLocalPrivate afterTrunc;
  383 &                         afterTrunc[] = tmpRemove(n2oRemove);
  384 &                         meshIntersection[i] = trunc(ThTab[0], afterTrunc > 1.0e-6, label = 9999, new2old = n2oIntersection[i]);
  385 &                     }
  386 &                     else {
  387 &                         skip.resize(skip.n + 1);
  388 &                         skip[skip.n - 1] = i;
  389 &                     }
  390 &                 }
  391 &             }
  392 &         }
  393 &         skip.sort;
  394 &         real[int][int] recv(numberIntersection);
  395 &         real[int][int] send(numberIntersection);
  396 &         int j = 0;
  397 &         for(int i = 0; i < numberIntersection; ++i) {
  398 &             bool skipped = false;
  399 &             if(j < skip.n) {
  400 &                 if(skip[j] == i) {
  401 &                     ++j;
  402 &                     skipped = true;
  403 &                 }
  404 &             }
  405 &             if(!skipped) {
  406 &                 recv[i].resize(meshIntersection[i].nv);
  407 &                 Irecv(processor( intersection[0][i],  ThComm, rq[i]), recv[i]);
  408 &                 fespace VhIntersectionPrivate(meshIntersection[i], P1);
  409 &                 int[int] restriction = restrict(VhIntersectionPrivate, VhLocalPrivate, n2oIntersection[i]);
  410 &                 send[i].resize(meshIntersection[i].nv);
  411 &                 send[i] = khi[](restriction);
  412 &                 Isend(processor( intersection[0][i],  ThComm, rq[numberIntersection + i]), send[i]);
  413 &             }
  414 &         }
  415 &         mpiWaitAll(rq);
  416 &          intersection.resize(1 + numberIntersection - skip.n);
  417 &         j = 0;
  418 &         for(int i = 0; i < numberIntersection; ++i) {
  419 &             bool skipped = false;
  420 &             if(j < skip.n) {
  421 &                 if(skip[j] == i) {
  422 &                     ++j;
  423 &                     skipped = true;
  424 &                 }
  425 &             }
  426 &             if(!skipped) {
  427 & IFMACRO(vectorialfe)
  428 &                 fespace singleComponentWhPrivate(ThTab[0], vectorialfe);
  429 &                 fespace WhIntersectionPrivate(meshIntersection[i], vectorialfe);
  430 & ENDIFMACRO
IFMACRO(!vectorialfe)
  431 &                 fespace singleComponentWhPrivate(ThTab[0],  Pk);
  432 &                 fespace WhIntersectionPrivate(meshIntersection[i],  Pk);
  433 & ENDIFMACRO
                 intersection[1 + i - j] = restrict(WhIntersectionPrivate, singleComponentWhPrivate, n2oIntersection[i]);
  434 &                 fespace VhIntersectionPrivate(meshIntersection[i], P1);
  435 &                 int[int] restriction = restrict(VhIntersectionPrivate, VhLocalPrivate, n2oIntersection[i]);
  436 &                 privateDmeshThintersectionDef[1 + i - j].resize(VhLocalPrivate.ndof);
  437 &                 privateDmeshThintersectionDef[1 + i - j] = 0.0;
  438 &                 privateDmeshThintersectionDef[1 + i - j](restriction) = recv[i];
  439 &                  intersection[0][i - j] =  intersection[0][i];
  440 &             }
  441 &         }
  442 &         numberIntersection -= skip.n;
  443 &          intersection[0].resize(numberIntersection);
  444 &         privateDmeshThintersectionDef.resize(1 + numberIntersection);
  445 &         privateDmeshThintersectionDef[0].resize(numberIntersection);
  446 &         for[i, value :  intersection[0]] privateDmeshThintersectionDef[0][i] = value;
  447 &         if( -111111 != -111111 ||  1 != 1) {
  448 &              privateCreateMat suppPartition = khi > 0.1;
  449 &             AddLayers( privateCreateMat, suppPartition[], 1, phi[]);
  450 &              privateCreateMat[0] = trunc( privateCreateMat, phi > 0.001 && phi < 0.501, label = (abs( -111111) + 1) * 100);
  451 &         }
  452 &     }
  453 & ENDIFMACRO
  454 @ IFMACRO(vectorialfe)
  455 &     if( 1 > 1)
  456 &         for(int i = 0; i <  intersection.n - 1; ++i) {
  457 &             int n =  intersection[1 + i].n;
  458 &              intersection[1 + i].resize(n *  1);
  459 &             for(int j = n - 1; j != -1; --j)
  460 &                 for(int k =  1 - 1; k != -1; --k)
  461 &                      intersection[1 + i][j *  1 + k] =  intersection[1 + i][j] *  1 + k;
  462 &         }
  463 & ENDIFMACRO
  464 @ 
  455 @ IFMACRO(privateCreatePartition)
  456 &     fespace VhLocalPrivate(ThTab[ 1 - 1], P1);
  457 & IFMACRO(!privateCreateMat)
  458 &     VhLocalPrivate khi;
  459 & ENDIFMACRO
ENDIFMACRO
  460 @ IFMACRO(privateCreateMat)
  461 &     VhLocalPrivate khi;
  462 &     khi[] = privateDmeshThkhiDef[0];
  463 & ENDIFMACRO
  461 @     VhLocalPrivate khi;
  462 @     khi[] = privateDmeshThkhiDef[0];
  463 @ 
  464 @     fespace WhPartPrivate(ThTab[ 1 - 1],  ThPkPart   Pk );
  465 @     WhPartPrivate  def(func2vec) func2vec ;
  466 @      DTab[ 1 - 1].resize(WhPartPrivate.ndof);
  467 @     if((WhPartPrivate.ndof % ThTab[ 1 - 1].nt) == 0 && WhPartPrivate.ndof != ThTab[ 1 - 1].nv) {
  468 @         int constant =  mpiRank(ThComm mpiCommWorld );
  469 @ IFMACRO(privateCreateMat)
  470 &         fespace PhLocalPrivate(ThTab[ 1 - 1], P0);
  471 &         PhLocalPrivate partLocal;
  472 &         partLocal[] = privateDmeshThkhiDef[1];
  473 &          def(func2vec) =  init(abs(partLocal - constant) < 0.1);
  474 & ENDIFMACRO
  470 @         fespace PhLocalPrivate(ThTab[ 1 - 1], P0);
  471 @         PhLocalPrivate partLocal;
  472 @         partLocal[] = privateDmeshThkhiDef[1];
  473 @          def(func2vec) func2vec  =  init(abs(partLocal - constant) < 0.1) abs(partLocal - constant) < 0.1 ;
  474 @ 
  475 @ IFMACRO(!privateCreateMat)
  476 &          def(func2vec) =  init(abs( privateCreateMat - constant) < 0.1);
  477 & ENDIFMACRO
  478 @     }
  479 @     else if(WhPartPrivate.ndof == ThTab[ 1 - 1].nv && (WhPartPrivate.ndof % ThTab[ 1 - 1].nt) != 0)
  480 @         func2vec[] = khi[];
  481 @     else
  482 @          def(func2vec) func2vec  =  init(khi) khi ;
  483 @      DTab[ 1 - 1] = func2vec[];
  484 @ IFMACRO(privateDmeshPostProcessD)
  485 &     privateDmeshPostProcessD( DTab[ 1 - 1]);
  486 & ENDIFMACRO
  487 @ IFMACRO(!privateCreatePartition)
  488 & IFMACRO(!privateCreateMat)
  489 & IFMACRO(privateBuildDmesh)
  490 &     fespace PhLocalPrivate(ThTab[ 1 - 1], P0);
  491 &     PhLocalPrivate partLocal;
  492 &     partLocal =  privateCreateMat;
  493 &     privateDmeshThkhiDef[1].resize(partLocal[].n);
  494 &     privateDmeshThkhiDef[1] = partLocal[];
  495 & ENDIFMACRO
ENDIFMACRO
ENDIFMACRO
  488 @ IFMACRO(!privateCreateMat)
  489 & IFMACRO(privateBuildDmesh)
  490 &     fespace PhLocalPrivate(ThTab[ 1 - 1], P0);
  491 &     PhLocalPrivate partLocal;
  492 &     partLocal =  privateCreateMat;
  493 &     privateDmeshThkhiDef[1].resize(partLocal[].n);
  494 &     privateDmeshThkhiDef[1] = partLocal[];
  495 & ENDIFMACRO
ENDIFMACRO
  496 @ 
  496 @     searchMethod = backupSM;
  497 @ }
  792 @ }
  793 @ else {
  794 @     fespace WhGlobalPrivate(Th,  Pk);
  795 @     DTab[0].resize(WhGlobalPrivate.ndof);
  796 @     DTab[0] = 1;
  797 @     intersection.resize(0);
  798 @ IFMACRO(ThN2O)
  799 & IFMACRO(ThOriginal)
  800 & IFMACRO(ThRestriction)
  801 &     ThRestriction.resize(WhGlobalPrivate.ndof);
  802 &     ThRestriction = 0:WhGlobalPrivate.ndof - 1;
  803 & ENDIFMACRO
ENDIFMACRO
ENDIFMACRO
  804 @ }
  805 @ IFMACRO(!privateCreatePartition)
  806 & constructor( A, DTab[0].n, intersection, DTab[0], communicator = ThComm);
  807 & ENDIFMACRO
  806 @ constructor( A, DTab[0].n, intersection, DTab[0], communicator = ThComm mpiCommWorld );
  807 @ 
  808 @ IFMACRO(privateCreatePartition)
  809 & privateCreatePartition.resize(DTab[0].n);
  810 & privateCreatePartition = DTab[0];
  811 & ENDIFMACRO
  812 @ }
  813 @ 
  798 @ IFMACRO(!privateDmeshTh)
  799 & DmeshCreate(Th)
  800 & {
  801 & IFMACRO(!meshN)
  802 & IFMACRO(dimension,3)
  803 &     NewMacro meshN()mesh3 EndMacro     /* three-dimensional problem             */
  804 &     NewMacro intN()int3d EndMacro      /* three-dimensional integral            */
  805 & ENDIFMACRO
IFMACRO(dimension,3S)
  806 &     NewMacro meshN()meshS EndMacro     /* three-dimensional surface problem     */
  807 &     NewMacro intN()int2d EndMacro      /* two-dimensional integral              */
  808 & ENDIFMACRO
IFMACRO(dimension,3L)
  809 &     NewMacro meshN()meshL EndMacro     /* three-dimensional line problem        */
  810 &     NewMacro intN()int1d EndMacro      /* one-dimensional integral              */
  811 & ENDIFMACRO
IFMACRO(!meshN)
  812 &     NewMacro meshN()mesh EndMacro      /* two-dimensional problem               */
  813 &     NewMacro intN()int2d EndMacro      /* two-dimensional integral              */
  814 & ENDIFMACRO
ENDIFMACRO
    NewMacro privateCreateMatCheckDmesh()1 EndMacro
    MatCreate(Th,  A,  Pk)
  815 & }
  816 & ENDIFMACRO
  817 @ 
   35 @ 
   36 @     INFO("fill stiffness matrix")             if(mpirank == 0){ cout << "INFO: "; cout << "fill stiffness matrix" << endl; }
   37 @     A = a(Vh, Vh, tgv = -2);
   38 @ 
   39 @     set(A, sparams = "-pc_type gamg -ksp_type cg -ksp_rtol "+ string(solverEps));
   40 @     /*set(A, sparams = "-pc_type hpddm -ksp_type gmres -ksp_rtol "+ string(solverEps));*/
   41 @ 
   42 @     INFO("fill stiffness matrix done")             if(mpirank == 0){ cout << "INFO: "; cout << "fill stiffness matrix done" << endl; }
   43 @ } // fill stiffness matrix
  103 : for( int theta = 0; theta < cardTheta; ++theta ){ 
  104 :     fillWLl(theta)
   46 @ 
   47 @     /* set none zero dirchlet condition */
   48 @                 
   49 @     
   50 @            
   51 @ 
   52 @       
   53 @ 
   54 @     /* compute rhs of weak formulation */
   55 @              
   56 @     
   57 @            
   58 @ 
   59 @     /* for computation of capacitance needed */
   60 @            
   61 @     
   62 @           
   63 @ 
   46 @ {
   47 @     /* set none zero dirchlet condition */
   48 @     varf bndDirichlet(unused, v) = deltaUZero(unused)deltaUZero1(unused) on(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513, unused=0)+deltaUZero2(unused) on(513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025, unused=0)+deltaUZero3(unused) on(1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1444,1445,1446,1447,1448,1449,1450,1451,1452,1453,1454,1455,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482,1483,1484,1485,1486,1487,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1515,1516,1517,1518,1519,1520,1521,1522,1523,1524,1525,1526,1527,1528,1529,1530,1531,1532,1533,1534,1535,1536,1537, unused=0)+deltaUZero4(unused) on(1537,1538,1539,1540,1541,1542,1543,1544,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1558,1559,1560,1561,1562,1563,1564,1565,1566,1567,1568,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,1595,1596,1597,1598,1599,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1631,1632,1633,1634,1635,1636,1637,1638,1639,1640,1641,1642,1643,1644,1645,1646,1647,1648,1649,1650,1651,1652,1653,1654,1655,1656,1657,1658,1659,1660,1661,1662,1663,1664,1665,1666,1667,1668,1669,1670,1671,1672,1673,1674,1675,1676,1677,1678,1679,1680,1681,1682,1683,1684,1685,1686,1687,1688,1689,1690,1691,1692,1693,1694,1695,1696,1697,1698,1699,1700,1701,1702,1703,1704,1705,1706,1707,1708,1709,1710,1711,1712,1713,1714,1715,1716,1717,1718,1719,1720,1721,1722,1723,1724,1725,1726,1727,1728,1729,1730,1731,1732,1733,1734,1735,1736,1737,1738,1739,1740,1741,1742,1743,1744,1745,1746,1747,1748,1749,1750,1751,1752,1753,1754,1755,1756,1757,1758,1759,1760,1761,1762,1763,1764,1765,1766,1767,1768,1769,1770,1771,1772,1773,1774,1775,1776,1777,1778,1779,1780,1781,1782,1783,1784,1785,1786,1787,1788,1789,1790,1791,1792,1793,1794,1795,1796,1797,1798,1799,1800,1801,1802,1803,1804,1805,1806,1807,1808,1809,1810,1811,1812,1813,1814,1815,1816,1817,1818,1819,1820,1821,1822,1823,1824,1825,1826,1827,1828,1829,1830,1831,1832,1833,1834,1835,1836,1837,1838,1839,1840,1841,1842,1843,1844,1845,1846,1847,1848,1849,1850,1851,1852,1853,1854,1855,1856,1857,1858,1859,1860,1861,1862,1863,1864,1865,1866,1867,1868,1869,1870,1871,1872,1873,1874,1875,1876,1877,1878,1879,1880,1881,1882,1883,1884,1885,1886,1887,1888,1889,1890,1891,1892,1893,1894,1895,1896,1897,1898,1899,1900,1901,1902,1903,1904,1905,1906,1907,1908,1909,1910,1911,1912,1913,1914,1915,1916,1917,1918,1919,1920,1921,1922,1923,1924,1925,1926,1927,1928,1929,1930,1931,1932,1933,1934,1935,1936,1937,1938,1939,1940,1941,1942,1943,1944,1945,1946,1947,1948,1949,1950,1951,1952,1953,1954,1955,1956,1957,1958,1959,1960,1961,1962,1963,1964,1965,1966,1967,1968,1969,1970,1971,1972,1973,1974,1975,1976,1977,1978,1979,1980,1981,1982,1983,1984,1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049, unused=0)+deltaUZero5(unused) on(2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110,2111,2112,2113,2114,2115,2116,2117,2118,2119,2120,2121,2122,2123,2124,2125,2126,2127,2128,2129,2130,2131,2132,2133,2134,2135,2136,2137,2138,2139,2140,2141,2142,2143,2144,2145,2146,2147,2148,2149,2150,2151,2152,2153,2154,2155,2156,2157,2158,2159,2160,2161,2162,2163,2164,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,2182,2183,2184,2185,2186,2187,2188,2189,2190,2191,2192,2193,2194,2195,2196,2197,2198,2199,2200,2201,2202,2203,2204,2205,2206,2207,2208,2209,2210,2211,2212,2213,2214,2215,2216,2217,2218,2219,2220,2221,2222,2223,2224,2225,2226,2227,2228,2229,2230,2231,2232,2233,2234,2235,2236,2237,2238,2239,2240,2241,2242,2243,2244,2245,2246,2247,2248,2249,2250,2251,2252,2253,2254,2255,2256,2257,2258,2259,2260,2261,2262,2263,2264,2265,2266,2267,2268,2269,2270,2271,2272,2273,2274,2275,2276,2277,2278,2279,2280,2281,2282,2283,2284,2285,2286,2287,2288,2289,2290,2291,2292,2293,2294,2295,2296,2297,2298,2299,2300,2301,2302,2303,2304,2305,2306,2307,2308,2309,2310,2311,2312,2313,2314,2315,2316,2317,2318,2319,2320,2321,2322,2323,2324,2325,2326,2327,2328,2329,2330,2331,2332,2333,2334,2335,2336,2337,2338,2339,2340,2341,2342,2343,2344,2345,2346,2347,2348,2349,2350,2351,2352,2353,2354,2355,2356,2357,2358,2359,2360,2361,2362,2363,2364,2365,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2384,2385,2386,2387,2388,2389,2390,2391,2392,2393,2394,2395,2396,2397,2398,2399,2400,2401,2402,2403,2404,2405,2406,2407,2408,2409,2410,2411,2412,2413,2414,2415,2416,2417,2418,2419,2420,2421,2422,2423,2424,2425,2426,2427,2428,2429,2430,2431,2432,2433,2434,2435,2436,2437,2438,2439,2440,2441,2442,2443,2444,2445,2446,2447,2448,2449,2450,2451,2452,2453,2454,2455,2456,2457,2458,2459,2460,2461,2462,2463,2464,2465,2466,2467,2468,2469,2470,2471,2472,2473,2474,2475,2476,2477,2478,2479,2480,2481,2482,2483,2484,2485,2486,2487,2488,2489,2490,2491,2492,2493,2494,2495,2496,2497,2498,2499,2500,2501,2502,2503,2504,2505,2506,2507,2508,2509,2510,2511,2512,2513,2514,2515,2516,2517,2518,2519,2520,2521,2522,2523,2524,2525,2526,2527,2528,2529,2530,2531,2532,2533,2534,2535,2536,2537,2538,2539,2540,2541,2542,2543,2544,2545,2546,2547,2548,2549,2550,2551,2552,2553,2554,2555,2556,2557,2558,2559,2560,2561, unused=0)+deltaUZero6(unused) on(2561,2562,2563,2564,2565,2566,2567,2568,2569,2570,2571,2572,2573,2574,2575,2576,2577,2578,2579,2580,2581,2582,2583,2584,2585,2586,2587,2588,2589,2590,2591,2592,2593,2594,2595,2596,2597,2598,2599,2600,2601,2602,2603,2604,2605,2606,2607,2608,2609,2610,2611,2612,2613,2614,2615,2616,2617,2618,2619,2620,2621,2622,2623,2624,2625,2626,2627,2628,2629,2630,2631,2632,2633,2634,2635,2636,2637,2638,2639,2640,2641,2642,2643,2644,2645,2646,2647,2648,2649,2650,2651,2652,2653,2654,2655,2656,2657,2658,2659,2660,2661,2662,2663,2664,2665,2666,2667,2668,2669,2670,2671,2672,2673,2674,2675,2676,2677,2678,2679,2680,2681,2682,2683,2684,2685,2686,2687,2688,2689,2690,2691,2692,2693,2694,2695,2696,2697,2698,2699,2700,2701,2702,2703,2704,2705,2706,2707,2708,2709,2710,2711,2712,2713,2714,2715,2716,2717,2718,2719,2720,2721,2722,2723,2724,2725,2726,2727,2728,2729,2730,2731,2732,2733,2734,2735,2736,2737,2738,2739,2740,2741,2742,2743,2744,2745,2746,2747,2748,2749,2750,2751,2752,2753,2754,2755,2756,2757,2758,2759,2760,2761,2762,2763,2764,2765,2766,2767,2768,2769,2770,2771,2772,2773,2774,2775,2776,2777,2778,2779,2780,2781,2782,2783,2784,2785,2786,2787,2788,2789,2790,2791,2792,2793,2794,2795,2796,2797,2798,2799,2800,2801,2802,2803,2804,2805,2806,2807,2808,2809,2810,2811,2812,2813,2814,2815,2816,2817,2818,2819,2820,2821,2822,2823,2824,2825,2826,2827,2828,2829,2830,2831,2832,2833,2834,2835,2836,2837,2838,2839,2840,2841,2842,2843,2844,2845,2846,2847,2848,2849,2850,2851,2852,2853,2854,2855,2856,2857,2858,2859,2860,2861,2862,2863,2864,2865,2866,2867,2868,2869,2870,2871,2872,2873,2874,2875,2876,2877,2878,2879,2880,2881,2882,2883,2884,2885,2886,2887,2888,2889,2890,2891,2892,2893,2894,2895,2896,2897,2898,2899,2900,2901,2902,2903,2904,2905,2906,2907,2908,2909,2910,2911,2912,2913,2914,2915,2916,2917,2918,2919,2920,2921,2922,2923,2924,2925,2926,2927,2928,2929,2930,2931,2932,2933,2934,2935,2936,2937,2938,2939,2940,2941,2942,2943,2944,2945,2946,2947,2948,2949,2950,2951,2952,2953,2954,2955,2956,2957,2958,2959,2960,2961,2962,2963,2964,2965,2966,2967,2968,2969,2970,2971,2972,2973,2974,2975,2976,2977,2978,2979,2980,2981,2982,2983,2984,2985,2986,2987,2988,2989,2990,2991,2992,2993,2994,2995,2996,2997,2998,2999,3000,3001,3002,3003,3004,3005,3006,3007,3008,3009,3010,3011,3012,3013,3014,3015,3016,3017,3018,3019,3020,3021,3022,3023,3024,3025,3026,3027,3028,3029,3030,3031,3032,3033,3034,3035,3036,3037,3038,3039,3040,3041,3042,3043,3044,3045,3046,3047,3048,3049,3050,3051,3052,3053,3054,3055,3056,3057,3058,3059,3060,3061,3062,3063,3064,3065,3066,3067,3068,3069,3070,3071,3072,3073, unused=0)+deltaUZero7(unused) on(3073,3074,3075,3076,3077,3078,3079,3080,3081,3082,3083,3084,3085,3086,3087,3088,3089,3090,3091,3092,3093,3094,3095,3096,3097,3098,3099,3100,3101,3102,3103,3104,3105,3106,3107,3108,3109,3110,3111,3112,3113,3114,3115,3116,3117,3118,3119,3120,3121,3122,3123,3124,3125,3126,3127,3128,3129,3130,3131,3132,3133,3134,3135,3136,3137,3138,3139,3140,3141,3142,3143,3144,3145,3146,3147,3148,3149,3150,3151,3152,3153,3154,3155,3156,3157,3158,3159,3160,3161,3162,3163,3164,3165,3166,3167,3168,3169,3170,3171,3172,3173,3174,3175,3176,3177,3178,3179,3180,3181,3182,3183,3184,3185,3186,3187,3188,3189,3190,3191,3192,3193,3194,3195,3196,3197,3198,3199,3200,3201,3202,3203,3204,3205,3206,3207,3208,3209,3210,3211,3212,3213,3214,3215,3216,3217,3218,3219,3220,3221,3222,3223,3224,3225,3226,3227,3228,3229,3230,3231,3232,3233,3234,3235,3236,3237,3238,3239,3240,3241,3242,3243,3244,3245,3246,3247,3248,3249,3250,3251,3252,3253,3254,3255,3256,3257,3258,3259,3260,3261,3262,3263,3264,3265,3266,3267,3268,3269,3270,3271,3272,3273,3274,3275,3276,3277,3278,3279,3280,3281,3282,3283,3284,3285,3286,3287,3288,3289,3290,3291,3292,3293,3294,3295,3296,3297,3298,3299,3300,3301,3302,3303,3304,3305,3306,3307,3308,3309,3310,3311,3312,3313,3314,3315,3316,3317,3318,3319,3320,3321,3322,3323,3324,3325,3326,3327,3328,3329,3330,3331,3332,3333,3334,3335,3336,3337,3338,3339,3340,3341,3342,3343,3344,3345,3346,3347,3348,3349,3350,3351,3352,3353,3354,3355,3356,3357,3358,3359,3360,3361,3362,3363,3364,3365,3366,3367,3368,3369,3370,3371,3372,3373,3374,3375,3376,3377,3378,3379,3380,3381,3382,3383,3384,3385,3386,3387,3388,3389,3390,3391,3392,3393,3394,3395,3396,3397,3398,3399,3400,3401,3402,3403,3404,3405,3406,3407,3408,3409,3410,3411,3412,3413,3414,3415,3416,3417,3418,3419,3420,3421,3422,3423,3424,3425,3426,3427,3428,3429,3430,3431,3432,3433,3434,3435,3436,3437,3438,3439,3440,3441,3442,3443,3444,3445,3446,3447,3448,3449,3450,3451,3452,3453,3454,3455,3456,3457,3458,3459,3460,3461,3462,3463,3464,3465,3466,3467,3468,3469,3470,3471,3472,3473,3474,3475,3476,3477,3478,3479,3480,3481,3482,3483,3484,3485,3486,3487,3488,3489,3490,3491,3492,3493,3494,3495,3496,3497,3498,3499,3500,3501,3502,3503,3504,3505,3506,3507,3508,3509,3510,3511,3512,3513,3514,3515,3516,3517,3518,3519,3520,3521,3522,3523,3524,3525,3526,3527,3528,3529,3530,3531,3532,3533,3534,3535,3536,3537,3538,3539,3540,3541,3542,3543,3544,3545,3546,3547,3548,3549,3550,3551,3552,3553,3554,3555,3556,3557,3558,3559,3560,3561,3562,3563,3564,3565,3566,3567,3568,3569,3570,3571,3572,3573,3574,3575,3576,3577,3578,3579,3580,3581,3582,3583,3584,3585, unused=0)+deltaUZero8(unused) on(3585,3586,3587,3588,3589,3590,3591,3592,3593,3594,3595,3596,3597,3598,3599,3600,3601,3602,3603,3604,3605,3606,3607,3608,3609,3610,3611,3612,3613,3614,3615,3616,3617,3618,3619,3620,3621,3622,3623,3624,3625,3626,3627,3628,3629,3630,3631,3632,3633,3634,3635,3636,3637,3638,3639,3640,3641,3642,3643,3644,3645,3646,3647,3648,3649,3650,3651,3652,3653,3654,3655,3656,3657,3658,3659,3660,3661,3662,3663,3664,3665,3666,3667,3668,3669,3670,3671,3672,3673,3674,3675,3676,3677,3678,3679,3680,3681,3682,3683,3684,3685,3686,3687,3688,3689,3690,3691,3692,3693,3694,3695,3696,3697,3698,3699,3700,3701,3702,3703,3704,3705,3706,3707,3708,3709,3710,3711,3712,3713,3714,3715,3716,3717,3718,3719,3720,3721,3722,3723,3724,3725,3726,3727,3728,3729,3730,3731,3732,3733,3734,3735,3736,3737,3738,3739,3740,3741,3742,3743,3744,3745,3746,3747,3748,3749,3750,3751,3752,3753,3754,3755,3756,3757,3758,3759,3760,3761,3762,3763,3764,3765,3766,3767,3768,3769,3770,3771,3772,3773,3774,3775,3776,3777,3778,3779,3780,3781,3782,3783,3784,3785,3786,3787,3788,3789,3790,3791,3792,3793,3794,3795,3796,3797,3798,3799,3800,3801,3802,3803,3804,3805,3806,3807,3808,3809,3810,3811,3812,3813,3814,3815,3816,3817,3818,3819,3820,3821,3822,3823,3824,3825,3826,3827,3828,3829,3830,3831,3832,3833,3834,3835,3836,3837,3838,3839,3840,3841,3842,3843,3844,3845,3846,3847,3848,3849,3850,3851,3852,3853,3854,3855,3856,3857,3858,3859,3860,3861,3862,3863,3864,3865,3866,3867,3868,3869,3870,3871,3872,3873,3874,3875,3876,3877,3878,3879,3880,3881,3882,3883,3884,3885,3886,3887,3888,3889,3890,3891,3892,3893,3894,3895,3896,3897,3898,3899,3900,3901,3902,3903,3904,3905,3906,3907,3908,3909,3910,3911,3912,3913,3914,3915,3916,3917,3918,3919,3920,3921,3922,3923,3924,3925,3926,3927,3928,3929,3930,3931,3932,3933,3934,3935,3936,3937,3938,3939,3940,3941,3942,3943,3944,3945,3946,3947,3948,3949,3950,3951,3952,3953,3954,3955,3956,3957,3958,3959,3960,3961,3962,3963,3964,3965,3966,3967,3968,3969,3970,3971,3972,3973,3974,3975,3976,3977,3978,3979,3980,3981,3982,3983,3984,3985,3986,3987,3988,3989,3990,3991,3992,3993,3994,3995,3996,3997,3998,3999,4000,4001,4002,4003,4004,4005,4006,4007,4008,4009,4010,4011,4012,4013,4014,4015,4016,4017,4018,4019,4020,4021,4022,4023,4024,4025,4026,4027,4028,4029,4030,4031,4032,4033,4034,4035,4036,4037,4038,4039,4040,4041,4042,4043,4044,4045,4046,4047,4048,4049,4050,4051,4052,4053,4054,4055,4056,4057,4058,4059,4060,4061,4062,4063,4064,4065,4066,4067,4068,4069,4070,4071,4072,4073,4074,4075,4076,4077,4078,4079,4080,4081,4082,4083,4084,4085,4086,4087,4088,4089,4090,4091,4092,4093,4094,4095,4096,4097, unused=0)+deltaUZero9(unused) on(4097,4098,4099,4100,4101,4102,4103,4104,4105,4106,4107,4108,4109,4110,4111,4112,4113,4114,4115,4116,4117,4118,4119,4120,4121,4122,4123,4124,4125,4126,4127,4128,4129,4130,4131,4132,4133,4134,4135,4136,4137,4138,4139,4140,4141,4142,4143,4144,4145,4146,4147,4148,4149,4150,4151,4152,4153,4154,4155,4156,4157,4158,4159,4160,4161,4162,4163,4164,4165,4166,4167,4168,4169,4170,4171,4172,4173,4174,4175,4176,4177,4178,4179,4180,4181,4182,4183,4184,4185,4186,4187,4188,4189,4190,4191,4192,4193,4194,4195,4196,4197,4198,4199,4200,4201,4202,4203,4204,4205,4206,4207,4208,4209,4210,4211,4212,4213,4214,4215,4216,4217,4218,4219,4220,4221,4222,4223,4224,4225,4226,4227,4228,4229,4230,4231,4232,4233,4234,4235,4236,4237,4238,4239,4240,4241,4242,4243,4244,4245,4246,4247,4248,4249,4250,4251,4252,4253,4254,4255,4256,4257,4258,4259,4260,4261,4262,4263,4264,4265,4266,4267,4268,4269,4270,4271,4272,4273,4274,4275,4276,4277,4278,4279,4280,4281,4282,4283,4284,4285,4286,4287,4288,4289,4290,4291,4292,4293,4294,4295,4296,4297,4298,4299,4300,4301,4302,4303,4304,4305,4306,4307,4308,4309,4310,4311,4312,4313,4314,4315,4316,4317,4318,4319,4320,4321,4322,4323,4324,4325,4326,4327,4328,4329,4330,4331,4332,4333,4334,4335,4336,4337,4338,4339,4340,4341,4342,4343,4344,4345,4346,4347,4348,4349,4350,4351,4352,4353,4354,4355,4356,4357,4358,4359,4360,4361,4362,4363,4364,4365,4366,4367,4368,4369,4370,4371,4372,4373,4374,4375,4376,4377,4378,4379,4380,4381,4382,4383,4384,4385,4386,4387,4388,4389,4390,4391,4392,4393,4394,4395,4396,4397,4398,4399,4400,4401,4402,4403,4404,4405,4406,4407,4408,4409,4410,4411,4412,4413,4414,4415,4416,4417,4418,4419,4420,4421,4422,4423,4424,4425,4426,4427,4428,4429,4430,4431,4432,4433,4434,4435,4436,4437,4438,4439,4440,4441,4442,4443,4444,4445,4446,4447,4448,4449,4450,4451,4452,4453,4454,4455,4456,4457,4458,4459,4460,4461,4462,4463,4464,4465,4466,4467,4468,4469,4470,4471,4472,4473,4474,4475,4476,4477,4478,4479,4480,4481,4482,4483,4484,4485,4486,4487,4488,4489,4490,4491,4492,4493,4494,4495,4496,4497,4498,4499,4500,4501,4502,4503,4504,4505,4506,4507,4508,4509,4510,4511,4512,4513,4514,4515,4516,4517,4518,4519,4520,4521,4522,4523,4524,4525,4526,4527,4528,4529,4530,4531,4532,4533,4534,4535,4536,4537,4538,4539,4540,4541,4542,4543,4544,4545,4546,4547,4548,4549,4550,4551,4552,4553,4554,4555,4556,4557,4558,4559,4560,4561,4562,4563,4564,4565,4566,4567,4568,4569,4570,4571,4572,4573,4574,4575,4576,4577,4578,4579,4580,4581,4582,4583,4584,4585,4586,4587,4588,4589,4590,4591,4592,4593,4594,4595,4596,4597,4598,4599,4600,4601,4602,4603,4604,4605,4606,4607,4608,4609, unused=0)+deltaUZero10(unused) on(4609,4610,4611,4612,4613,4614,4615,4616,4617,4618,4619,4620,4621,4622,4623,4624,4625,4626,4627,4628,4629,4630,4631,4632,4633,4634,4635,4636,4637,4638,4639,4640,4641,4642,4643,4644,4645,4646,4647,4648,4649,4650,4651,4652,4653,4654,4655,4656,4657,4658,4659,4660,4661,4662,4663,4664,4665,4666,4667,4668,4669,4670,4671,4672,4673,4674,4675,4676,4677,4678,4679,4680,4681,4682,4683,4684,4685,4686,4687,4688,4689,4690,4691,4692,4693,4694,4695,4696,4697,4698,4699,4700,4701,4702,4703,4704,4705,4706,4707,4708,4709,4710,4711,4712,4713,4714,4715,4716,4717,4718,4719,4720,4721,4722,4723,4724,4725,4726,4727,4728,4729,4730,4731,4732,4733,4734,4735,4736,4737,4738,4739,4740,4741,4742,4743,4744,4745,4746,4747,4748,4749,4750,4751,4752,4753,4754,4755,4756,4757,4758,4759,4760,4761,4762,4763,4764,4765,4766,4767,4768,4769,4770,4771,4772,4773,4774,4775,4776,4777,4778,4779,4780,4781,4782,4783,4784,4785,4786,4787,4788,4789,4790,4791,4792,4793,4794,4795,4796,4797,4798,4799,4800,4801,4802,4803,4804,4805,4806,4807,4808,4809,4810,4811,4812,4813,4814,4815,4816,4817,4818,4819,4820,4821,4822,4823,4824,4825,4826,4827,4828,4829,4830,4831,4832,4833,4834,4835,4836,4837,4838,4839,4840,4841,4842,4843,4844,4845,4846,4847,4848,4849,4850,4851,4852,4853,4854,4855,4856,4857,4858,4859,4860,4861,4862,4863,4864,4865,4866,4867,4868,4869,4870,4871,4872,4873,4874,4875,4876,4877,4878,4879,4880,4881,4882,4883,4884,4885,4886,4887,4888,4889,4890,4891,4892,4893,4894,4895,4896,4897,4898,4899,4900,4901,4902,4903,4904,4905,4906,4907,4908,4909,4910,4911,4912,4913,4914,4915,4916,4917,4918,4919,4920,4921,4922,4923,4924,4925,4926,4927,4928,4929,4930,4931,4932,4933,4934,4935,4936,4937,4938,4939,4940,4941,4942,4943,4944,4945,4946,4947,4948,4949,4950,4951,4952,4953,4954,4955,4956,4957,4958,4959,4960,4961,4962,4963,4964,4965,4966,4967,4968,4969,4970,4971,4972,4973,4974,4975,4976,4977,4978,4979,4980,4981,4982,4983,4984,4985,4986,4987,4988,4989,4990,4991,4992,4993,4994,4995,4996,4997,4998,4999,5000,5001,5002,5003,5004,5005,5006,5007,5008,5009,5010,5011,5012,5013,5014,5015,5016,5017,5018,5019,5020,5021,5022,5023,5024,5025,5026,5027,5028,5029,5030,5031,5032,5033,5034,5035,5036,5037,5038,5039,5040,5041,5042,5043,5044,5045,5046,5047,5048,5049,5050,5051,5052,5053,5054,5055,5056,5057,5058,5059,5060,5061,5062,5063,5064,5065,5066,5067,5068,5069,5070,5071,5072,5073,5074,5075,5076,5077,5078,5079,5080,5081,5082,5083,5084,5085,5086,5087,5088,5089,5090,5091,5092,5093,5094,5095,5096,5097,5098,5099,5100,5101,5102,5103,5104,5105,5106,5107,5108,5109,5110,5111,5112,5113,5114,5115,5116,5117,5118,5119,5120,5121, unused=0)+deltaUZero11(unused) on(5121,5122,5123,5124,5125,5126,5127,5128,5129,5130,5131,5132,5133,5134,5135,5136,5137,5138,5139,5140,5141,5142,5143,5144,5145,5146,5147,5148,5149,5150,5151,5152,5153,5154,5155,5156,5157,5158,5159,5160,5161,5162,5163,5164,5165,5166,5167,5168,5169,5170,5171,5172,5173,5174,5175,5176,5177,5178,5179,5180,5181,5182,5183,5184,5185,5186,5187,5188,5189,5190,5191,5192,5193,5194,5195,5196,5197,5198,5199,5200,5201,5202,5203,5204,5205,5206,5207,5208,5209,5210,5211,5212,5213,5214,5215,5216,5217,5218,5219,5220,5221,5222,5223,5224,5225,5226,5227,5228,5229,5230,5231,5232,5233,5234,5235,5236,5237,5238,5239,5240,5241,5242,5243,5244,5245,5246,5247,5248,5249,5250,5251,5252,5253,5254,5255,5256,5257,5258,5259,5260,5261,5262,5263,5264,5265,5266,5267,5268,5269,5270,5271,5272,5273,5274,5275,5276,5277,5278,5279,5280,5281,5282,5283,5284,5285,5286,5287,5288,5289,5290,5291,5292,5293,5294,5295,5296,5297,5298,5299,5300,5301,5302,5303,5304,5305,5306,5307,5308,5309,5310,5311,5312,5313,5314,5315,5316,5317,5318,5319,5320,5321,5322,5323,5324,5325,5326,5327,5328,5329,5330,5331,5332,5333,5334,5335,5336,5337,5338,5339,5340,5341,5342,5343,5344,5345,5346,5347,5348,5349,5350,5351,5352,5353,5354,5355,5356,5357,5358,5359,5360,5361,5362,5363,5364,5365,5366,5367,5368,5369,5370,5371,5372,5373,5374,5375,5376,5377,5378,5379,5380,5381,5382,5383,5384,5385,5386,5387,5388,5389,5390,5391,5392,5393,5394,5395,5396,5397,5398,5399,5400,5401,5402,5403,5404,5405,5406,5407,5408,5409,5410,5411,5412,5413,5414,5415,5416,5417,5418,5419,5420,5421,5422,5423,5424,5425,5426,5427,5428,5429,5430,5431,5432,5433,5434,5435,5436,5437,5438,5439,5440,5441,5442,5443,5444,5445,5446,5447,5448,5449,5450,5451,5452,5453,5454,5455,5456,5457,5458,5459,5460,5461,5462,5463,5464,5465,5466,5467,5468,5469,5470,5471,5472,5473,5474,5475,5476,5477,5478,5479,5480,5481,5482,5483,5484,5485,5486,5487,5488,5489,5490,5491,5492,5493,5494,5495,5496,5497,5498,5499,5500,5501,5502,5503,5504,5505,5506,5507,5508,5509,5510,5511,5512,5513,5514,5515,5516,5517,5518,5519,5520,5521,5522,5523,5524,5525,5526,5527,5528,5529,5530,5531,5532,5533,5534,5535,5536,5537,5538,5539,5540,5541,5542,5543,5544,5545,5546,5547,5548,5549,5550,5551,5552,5553,5554,5555,5556,5557,5558,5559,5560,5561,5562,5563,5564,5565,5566,5567,5568,5569,5570,5571,5572,5573,5574,5575,5576,5577,5578,5579,5580,5581,5582,5583,5584,5585,5586,5587,5588,5589,5590,5591,5592,5593,5594,5595,5596,5597,5598,5599,5600,5601,5602,5603,5604,5605,5606,5607,5608,5609,5610,5611,5612,5613,5614,5615,5616,5617,5618,5619,5620,5621,5622,5623,5624,5625,5626,5627,5628,5629,5630,5631,5632,5633, unused=0)+deltaUZero12(unused) on(5633,5634,5635,5636,5637,5638,5639,5640,5641,5642,5643,5644,5645,5646,5647,5648,5649,5650,5651,5652,5653,5654,5655,5656,5657,5658,5659,5660,5661,5662,5663,5664,5665,5666,5667,5668,5669,5670,5671,5672,5673,5674,5675,5676,5677,5678,5679,5680,5681,5682,5683,5684,5685,5686,5687,5688,5689,5690,5691,5692,5693,5694,5695,5696,5697,5698,5699,5700,5701,5702,5703,5704,5705,5706,5707,5708,5709,5710,5711,5712,5713,5714,5715,5716,5717,5718,5719,5720,5721,5722,5723,5724,5725,5726,5727,5728,5729,5730,5731,5732,5733,5734,5735,5736,5737,5738,5739,5740,5741,5742,5743,5744,5745,5746,5747,5748,5749,5750,5751,5752,5753,5754,5755,5756,5757,5758,5759,5760,5761,5762,5763,5764,5765,5766,5767,5768,5769,5770,5771,5772,5773,5774,5775,5776,5777,5778,5779,5780,5781,5782,5783,5784,5785,5786,5787,5788,5789,5790,5791,5792,5793,5794,5795,5796,5797,5798,5799,5800,5801,5802,5803,5804,5805,5806,5807,5808,5809,5810,5811,5812,5813,5814,5815,5816,5817,5818,5819,5820,5821,5822,5823,5824,5825,5826,5827,5828,5829,5830,5831,5832,5833,5834,5835,5836,5837,5838,5839,5840,5841,5842,5843,5844,5845,5846,5847,5848,5849,5850,5851,5852,5853,5854,5855,5856,5857,5858,5859,5860,5861,5862,5863,5864,5865,5866,5867,5868,5869,5870,5871,5872,5873,5874,5875,5876,5877,5878,5879,5880,5881,5882,5883,5884,5885,5886,5887,5888,5889,5890,5891,5892,5893,5894,5895,5896,5897,5898,5899,5900,5901,5902,5903,5904,5905,5906,5907,5908,5909,5910,5911,5912,5913,5914,5915,5916,5917,5918,5919,5920,5921,5922,5923,5924,5925,5926,5927,5928,5929,5930,5931,5932,5933,5934,5935,5936,5937,5938,5939,5940,5941,5942,5943,5944,5945,5946,5947,5948,5949,5950,5951,5952,5953,5954,5955,5956,5957,5958,5959,5960,5961,5962,5963,5964,5965,5966,5967,5968,5969,5970,5971,5972,5973,5974,5975,5976,5977,5978,5979,5980,5981,5982,5983,5984,5985,5986,5987,5988,5989,5990,5991,5992,5993,5994,5995,5996,5997,5998,5999,6000,6001,6002,6003,6004,6005,6006,6007,6008,6009,6010,6011,6012,6013,6014,6015,6016,6017,6018,6019,6020,6021,6022,6023,6024,6025,6026,6027,6028,6029,6030,6031,6032,6033,6034,6035,6036,6037,6038,6039,6040,6041,6042,6043,6044,6045,6046,6047,6048,6049,6050,6051,6052,6053,6054,6055,6056,6057,6058,6059,6060,6061,6062,6063,6064,6065,6066,6067,6068,6069,6070,6071,6072,6073,6074,6075,6076,6077,6078,6079,6080,6081,6082,6083,6084,6085,6086,6087,6088,6089,6090,6091,6092,6093,6094,6095,6096,6097,6098,6099,6100,6101,6102,6103,6104,6105,6106,6107,6108,6109,6110,6111,6112,6113,6114,6115,6116,6117,6118,6119,6120,6121,6122,6123,6124,6125,6126,6127,6128,6129,6130,6131,6132,6133,6134,6135,6136,6137,6138,6139,6140,6141,6142,6143,6144,6145, unused=0)+deltaUZero13(unused) on(6145,6146,6147,6148,6149,6150,6151,6152,6153,6154,6155,6156,6157,6158,6159,6160,6161,6162,6163,6164,6165,6166,6167,6168,6169,6170,6171,6172,6173,6174,6175,6176,6177,6178,6179,6180,6181,6182,6183,6184,6185,6186,6187,6188,6189,6190,6191,6192,6193,6194,6195,6196,6197,6198,6199,6200,6201,6202,6203,6204,6205,6206,6207,6208,6209,6210,6211,6212,6213,6214,6215,6216,6217,6218,6219,6220,6221,6222,6223,6224,6225,6226,6227,6228,6229,6230,6231,6232,6233,6234,6235,6236,6237,6238,6239,6240,6241,6242,6243,6244,6245,6246,6247,6248,6249,6250,6251,6252,6253,6254,6255,6256,6257,6258,6259,6260,6261,6262,6263,6264,6265,6266,6267,6268,6269,6270,6271,6272,6273,6274,6275,6276,6277,6278,6279,6280,6281,6282,6283,6284,6285,6286,6287,6288,6289,6290,6291,6292,6293,6294,6295,6296,6297,6298,6299,6300,6301,6302,6303,6304,6305,6306,6307,6308,6309,6310,6311,6312,6313,6314,6315,6316,6317,6318,6319,6320,6321,6322,6323,6324,6325,6326,6327,6328,6329,6330,6331,6332,6333,6334,6335,6336,6337,6338,6339,6340,6341,6342,6343,6344,6345,6346,6347,6348,6349,6350,6351,6352,6353,6354,6355,6356,6357,6358,6359,6360,6361,6362,6363,6364,6365,6366,6367,6368,6369,6370,6371,6372,6373,6374,6375,6376,6377,6378,6379,6380,6381,6382,6383,6384,6385,6386,6387,6388,6389,6390,6391,6392,6393,6394,6395,6396,6397,6398,6399,6400,6401,6402,6403,6404,6405,6406,6407,6408,6409,6410,6411,6412,6413,6414,6415,6416,6417,6418,6419,6420,6421,6422,6423,6424,6425,6426,6427,6428,6429,6430,6431,6432,6433,6434,6435,6436,6437,6438,6439,6440,6441,6442,6443,6444,6445,6446,6447,6448,6449,6450,6451,6452,6453,6454,6455,6456,6457,6458,6459,6460,6461,6462,6463,6464,6465,6466,6467,6468,6469,6470,6471,6472,6473,6474,6475,6476,6477,6478,6479,6480,6481,6482,6483,6484,6485,6486,6487,6488,6489,6490,6491,6492,6493,6494,6495,6496,6497,6498,6499,6500,6501,6502,6503,6504,6505,6506,6507,6508,6509,6510,6511,6512,6513,6514,6515,6516,6517,6518,6519,6520,6521,6522,6523,6524,6525,6526,6527,6528,6529,6530,6531,6532,6533,6534,6535,6536,6537,6538,6539,6540,6541,6542,6543,6544,6545,6546,6547,6548,6549,6550,6551,6552,6553,6554,6555,6556,6557,6558,6559,6560,6561,6562,6563,6564,6565,6566,6567,6568,6569,6570,6571,6572,6573,6574,6575,6576,6577,6578,6579,6580,6581,6582,6583,6584,6585,6586,6587,6588,6589,6590,6591,6592,6593,6594,6595,6596,6597,6598,6599,6600,6601,6602,6603,6604,6605,6606,6607,6608,6609,6610,6611,6612,6613,6614,6615,6616,6617,6618,6619,6620,6621,6622,6623,6624,6625,6626,6627,6628,6629,6630,6631,6632,6633,6634,6635,6636,6637,6638,6639,6640,6641,6642,6643,6644,6645,6646,6647,6648,6649,6650,6651,6652,6653,6654,6655,6656,6657, unused=0)+deltaUZero14(unused) on(6657,6658,6659,6660,6661,6662,6663,6664,6665,6666,6667,6668,6669,6670,6671,6672,6673,6674,6675,6676,6677,6678,6679,6680,6681,6682,6683,6684,6685,6686,6687,6688,6689,6690,6691,6692,6693,6694,6695,6696,6697,6698,6699,6700,6701,6702,6703,6704,6705,6706,6707,6708,6709,6710,6711,6712,6713,6714,6715,6716,6717,6718,6719,6720,6721,6722,6723,6724,6725,6726,6727,6728,6729,6730,6731,6732,6733,6734,6735,6736,6737,6738,6739,6740,6741,6742,6743,6744,6745,6746,6747,6748,6749,6750,6751,6752,6753,6754,6755,6756,6757,6758,6759,6760,6761,6762,6763,6764,6765,6766,6767,6768,6769,6770,6771,6772,6773,6774,6775,6776,6777,6778,6779,6780,6781,6782,6783,6784,6785,6786,6787,6788,6789,6790,6791,6792,6793,6794,6795,6796,6797,6798,6799,6800,6801,6802,6803,6804,6805,6806,6807,6808,6809,6810,6811,6812,6813,6814,6815,6816,6817,6818,6819,6820,6821,6822,6823,6824,6825,6826,6827,6828,6829,6830,6831,6832,6833,6834,6835,6836,6837,6838,6839,6840,6841,6842,6843,6844,6845,6846,6847,6848,6849,6850,6851,6852,6853,6854,6855,6856,6857,6858,6859,6860,6861,6862,6863,6864,6865,6866,6867,6868,6869,6870,6871,6872,6873,6874,6875,6876,6877,6878,6879,6880,6881,6882,6883,6884,6885,6886,6887,6888,6889,6890,6891,6892,6893,6894,6895,6896,6897,6898,6899,6900,6901,6902,6903,6904,6905,6906,6907,6908,6909,6910,6911,6912,6913,6914,6915,6916,6917,6918,6919,6920,6921,6922,6923,6924,6925,6926,6927,6928,6929,6930,6931,6932,6933,6934,6935,6936,6937,6938,6939,6940,6941,6942,6943,6944,6945,6946,6947,6948,6949,6950,6951,6952,6953,6954,6955,6956,6957,6958,6959,6960,6961,6962,6963,6964,6965,6966,6967,6968,6969,6970,6971,6972,6973,6974,6975,6976,6977,6978,6979,6980,6981,6982,6983,6984,6985,6986,6987,6988,6989,6990,6991,6992,6993,6994,6995,6996,6997,6998,6999,7000,7001,7002,7003,7004,7005,7006,7007,7008,7009,7010,7011,7012,7013,7014,7015,7016,7017,7018,7019,7020,7021,7022,7023,7024,7025,7026,7027,7028,7029,7030,7031,7032,7033,7034,7035,7036,7037,7038,7039,7040,7041,7042,7043,7044,7045,7046,7047,7048,7049,7050,7051,7052,7053,7054,7055,7056,7057,7058,7059,7060,7061,7062,7063,7064,7065,7066,7067,7068,7069,7070,7071,7072,7073,7074,7075,7076,7077,7078,7079,7080,7081,7082,7083,7084,7085,7086,7087,7088,7089,7090,7091,7092,7093,7094,7095,7096,7097,7098,7099,7100,7101,7102,7103,7104,7105,7106,7107,7108,7109,7110,7111,7112,7113,7114,7115,7116,7117,7118,7119,7120,7121,7122,7123,7124,7125,7126,7127,7128,7129,7130,7131,7132,7133,7134,7135,7136,7137,7138,7139,7140,7141,7142,7143,7144,7145,7146,7147,7148,7149,7150,7151,7152,7153,7154,7155,7156,7157,7158,7159,7160,7161,7162,7163,7164,7165,7166,7167,7168,7169, unused=0)+deltaUZero15(unused) on(7169,7170,7171,7172,7173,7174,7175,7176,7177,7178,7179,7180,7181,7182,7183,7184,7185,7186,7187,7188,7189,7190,7191,7192,7193,7194,7195,7196,7197,7198,7199,7200,7201,7202,7203,7204,7205,7206,7207,7208,7209,7210,7211,7212,7213,7214,7215,7216,7217,7218,7219,7220,7221,7222,7223,7224,7225,7226,7227,7228,7229,7230,7231,7232,7233,7234,7235,7236,7237,7238,7239,7240,7241,7242,7243,7244,7245,7246,7247,7248,7249,7250,7251,7252,7253,7254,7255,7256,7257,7258,7259,7260,7261,7262,7263,7264,7265,7266,7267,7268,7269,7270,7271,7272,7273,7274,7275,7276,7277,7278,7279,7280,7281,7282,7283,7284,7285,7286,7287,7288,7289,7290,7291,7292,7293,7294,7295,7296,7297,7298,7299,7300,7301,7302,7303,7304,7305,7306,7307,7308,7309,7310,7311,7312,7313,7314,7315,7316,7317,7318,7319,7320,7321,7322,7323,7324,7325,7326,7327,7328,7329,7330,7331,7332,7333,7334,7335,7336,7337,7338,7339,7340,7341,7342,7343,7344,7345,7346,7347,7348,7349,7350,7351,7352,7353,7354,7355,7356,7357,7358,7359,7360,7361,7362,7363,7364,7365,7366,7367,7368,7369,7370,7371,7372,7373,7374,7375,7376,7377,7378,7379,7380,7381,7382,7383,7384,7385,7386,7387,7388,7389,7390,7391,7392,7393,7394,7395,7396,7397,7398,7399,7400,7401,7402,7403,7404,7405,7406,7407,7408,7409,7410,7411,7412,7413,7414,7415,7416,7417,7418,7419,7420,7421,7422,7423,7424,7425,7426,7427,7428,7429,7430,7431,7432,7433,7434,7435,7436,7437,7438,7439,7440,7441,7442,7443,7444,7445,7446,7447,7448,7449,7450,7451,7452,7453,7454,7455,7456,7457,7458,7459,7460,7461,7462,7463,7464,7465,7466,7467,7468,7469,7470,7471,7472,7473,7474,7475,7476,7477,7478,7479,7480,7481,7482,7483,7484,7485,7486,7487,7488,7489,7490,7491,7492,7493,7494,7495,7496,7497,7498,7499,7500,7501,7502,7503,7504,7505,7506,7507,7508,7509,7510,7511,7512,7513,7514,7515,7516,7517,7518,7519,7520,7521,7522,7523,7524,7525,7526,7527,7528,7529,7530,7531,7532,7533,7534,7535,7536,7537,7538,7539,7540,7541,7542,7543,7544,7545,7546,7547,7548,7549,7550,7551,7552,7553,7554,7555,7556,7557,7558,7559,7560,7561,7562,7563,7564,7565,7566,7567,7568,7569,7570,7571,7572,7573,7574,7575,7576,7577,7578,7579,7580,7581,7582,7583,7584,7585,7586,7587,7588,7589,7590,7591,7592,7593,7594,7595,7596,7597,7598,7599,7600,7601,7602,7603,7604,7605,7606,7607,7608,7609,7610,7611,7612,7613,7614,7615,7616,7617,7618,7619,7620,7621,7622,7623,7624,7625,7626,7627,7628,7629,7630,7631,7632,7633,7634,7635,7636,7637,7638,7639,7640,7641,7642,7643,7644,7645,7646,7647,7648,7649,7650,7651,7652,7653,7654,7655,7656,7657,7658,7659,7660,7661,7662,7663,7664,7665,7666,7667,7668,7669,7670,7671,7672,7673,7674,7675,7676,7677,7678,7679,7680,7681, unused=0)+deltaUZero16(unused) on(7681,7682,7683,7684,7685,7686,7687,7688,7689,7690,7691,7692,7693,7694,7695,7696,7697,7698,7699,7700,7701,7702,7703,7704,7705,7706,7707,7708,7709,7710,7711,7712,7713,7714,7715,7716,7717,7718,7719,7720,7721,7722,7723,7724,7725,7726,7727,7728,7729,7730,7731,7732,7733,7734,7735,7736,7737,7738,7739,7740,7741,7742,7743,7744,7745,7746,7747,7748,7749,7750,7751,7752,7753,7754,7755,7756,7757,7758,7759,7760,7761,7762,7763,7764,7765,7766,7767,7768,7769,7770,7771,7772,7773,7774,7775,7776,7777,7778,7779,7780,7781,7782,7783,7784,7785,7786,7787,7788,7789,7790,7791,7792,7793,7794,7795,7796,7797,7798,7799,7800,7801,7802,7803,7804,7805,7806,7807,7808,7809,7810,7811,7812,7813,7814,7815,7816,7817,7818,7819,7820,7821,7822,7823,7824,7825,7826,7827,7828,7829,7830,7831,7832,7833,7834,7835,7836,7837,7838,7839,7840,7841,7842,7843,7844,7845,7846,7847,7848,7849,7850,7851,7852,7853,7854,7855,7856,7857,7858,7859,7860,7861,7862,7863,7864,7865,7866,7867,7868,7869,7870,7871,7872,7873,7874,7875,7876,7877,7878,7879,7880,7881,7882,7883,7884,7885,7886,7887,7888,7889,7890,7891,7892,7893,7894,7895,7896,7897,7898,7899,7900,7901,7902,7903,7904,7905,7906,7907,7908,7909,7910,7911,7912,7913,7914,7915,7916,7917,7918,7919,7920,7921,7922,7923,7924,7925,7926,7927,7928,7929,7930,7931,7932,7933,7934,7935,7936,7937,7938,7939,7940,7941,7942,7943,7944,7945,7946,7947,7948,7949,7950,7951,7952,7953,7954,7955,7956,7957,7958,7959,7960,7961,7962,7963,7964,7965,7966,7967,7968,7969,7970,7971,7972,7973,7974,7975,7976,7977,7978,7979,7980,7981,7982,7983,7984,7985,7986,7987,7988,7989,7990,7991,7992,7993,7994,7995,7996,7997,7998,7999,8000,8001,8002,8003,8004,8005,8006,8007,8008,8009,8010,8011,8012,8013,8014,8015,8016,8017,8018,8019,8020,8021,8022,8023,8024,8025,8026,8027,8028,8029,8030,8031,8032,8033,8034,8035,8036,8037,8038,8039,8040,8041,8042,8043,8044,8045,8046,8047,8048,8049,8050,8051,8052,8053,8054,8055,8056,8057,8058,8059,8060,8061,8062,8063,8064,8065,8066,8067,8068,8069,8070,8071,8072,8073,8074,8075,8076,8077,8078,8079,8080,8081,8082,8083,8084,8085,8086,8087,8088,8089,8090,8091,8092,8093,8094,8095,8096,8097,8098,8099,8100,8101,8102,8103,8104,8105,8106,8107,8108,8109,8110,8111,8112,8113,8114,8115,8116,8117,8118,8119,8120,8121,8122,8123,8124,8125,8126,8127,8128,8129,8130,8131,8132,8133,8134,8135,8136,8137,8138,8139,8140,8141,8142,8143,8144,8145,8146,8147,8148,8149,8150,8151,8152,8153,8154,8155,8156,8157,8158,8159,8160,8161,8162,8163,8164,8165,8166,8167,8168,8169,8170,8171,8172,8173,8174,8175,8176,8177,8178,8179,8180,8181,8182,8183,8184,8185,8186,8187,8188,8189,8190,8191,8192,8193, unused=0)+deltaUZero17(unused) on(8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8203,8204,8205,8206,8207,8208,8209,8210,8211,8212,8213,8214,8215,8216,8217,8218,8219,8220,8221,8222,8223,8224,8225,8226,8227,8228,8229,8230,8231,8232,8233,8234,8235,8236,8237,8238,8239,8240,8241,8242,8243,8244,8245,8246,8247,8248,8249,8250,8251,8252,8253,8254,8255,8256,8257,8258,8259,8260,8261,8262,8263,8264,8265,8266,8267,8268,8269,8270,8271,8272,8273,8274,8275,8276,8277,8278,8279,8280,8281,8282,8283,8284,8285,8286,8287,8288,8289,8290,8291,8292,8293,8294,8295,8296,8297,8298,8299,8300,8301,8302,8303,8304,8305,8306,8307,8308,8309,8310,8311,8312,8313,8314,8315,8316,8317,8318,8319,8320,8321,8322,8323,8324,8325,8326,8327,8328,8329,8330,8331,8332,8333,8334,8335,8336,8337,8338,8339,8340,8341,8342,8343,8344,8345,8346,8347,8348,8349,8350,8351,8352,8353,8354,8355,8356,8357,8358,8359,8360,8361,8362,8363,8364,8365,8366,8367,8368,8369,8370,8371,8372,8373,8374,8375,8376,8377,8378,8379,8380,8381,8382,8383,8384,8385,8386,8387,8388,8389,8390,8391,8392,8393,8394,8395,8396,8397,8398,8399,8400,8401,8402,8403,8404,8405,8406,8407,8408,8409,8410,8411,8412,8413,8414,8415,8416,8417,8418,8419,8420,8421,8422,8423,8424,8425,8426,8427,8428,8429,8430,8431,8432,8433,8434,8435,8436,8437,8438,8439,8440,8441,8442,8443,8444,8445,8446,8447,8448,8449,8450,8451,8452,8453,8454,8455,8456,8457,8458,8459,8460,8461,8462,8463,8464,8465,8466,8467,8468,8469,8470,8471,8472,8473,8474,8475,8476,8477,8478,8479,8480,8481,8482,8483,8484,8485,8486,8487,8488,8489,8490,8491,8492,8493,8494,8495,8496,8497,8498,8499,8500,8501,8502,8503,8504,8505,8506,8507,8508,8509,8510,8511,8512,8513,8514,8515,8516,8517,8518,8519,8520,8521,8522,8523,8524,8525,8526,8527,8528,8529,8530,8531,8532,8533,8534,8535,8536,8537,8538,8539,8540,8541,8542,8543,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,8554,8555,8556,8557,8558,8559,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,8570,8571,8572,8573,8574,8575,8576,8577,8578,8579,8580,8581,8582,8583,8584,8585,8586,8587,8588,8589,8590,8591,8592,8593,8594,8595,8596,8597,8598,8599,8600,8601,8602,8603,8604,8605,8606,8607,8608,8609,8610,8611,8612,8613,8614,8615,8616,8617,8618,8619,8620,8621,8622,8623,8624,8625,8626,8627,8628,8629,8630,8631,8632,8633,8634,8635,8636,8637,8638,8639,8640,8641,8642,8643,8644,8645,8646,8647,8648,8649,8650,8651,8652,8653,8654,8655,8656,8657,8658,8659,8660,8661,8662,8663,8664,8665,8666,8667,8668,8669,8670,8671,8672,8673,8674,8675,8676,8677,8678,8679,8680,8681,8682,8683,8684,8685,8686,8687,8688,8689,8690,8691,8692,8693,8694,8695,8696,8697,8698,8699,8700,8701,8702,8703,8704,8705, unused=0)+deltaUZero18(unused) on(8705,8706,8707,8708,8709,8710,8711,8712,8713,8714,8715,8716,8717,8718,8719,8720,8721,8722,8723,8724,8725,8726,8727,8728,8729,8730,8731,8732,8733,8734,8735,8736,8737,8738,8739,8740,8741,8742,8743,8744,8745,8746,8747,8748,8749,8750,8751,8752,8753,8754,8755,8756,8757,8758,8759,8760,8761,8762,8763,8764,8765,8766,8767,8768,8769,8770,8771,8772,8773,8774,8775,8776,8777,8778,8779,8780,8781,8782,8783,8784,8785,8786,8787,8788,8789,8790,8791,8792,8793,8794,8795,8796,8797,8798,8799,8800,8801,8802,8803,8804,8805,8806,8807,8808,8809,8810,8811,8812,8813,8814,8815,8816,8817,8818,8819,8820,8821,8822,8823,8824,8825,8826,8827,8828,8829,8830,8831,8832,8833,8834,8835,8836,8837,8838,8839,8840,8841,8842,8843,8844,8845,8846,8847,8848,8849,8850,8851,8852,8853,8854,8855,8856,8857,8858,8859,8860,8861,8862,8863,8864,8865,8866,8867,8868,8869,8870,8871,8872,8873,8874,8875,8876,8877,8878,8879,8880,8881,8882,8883,8884,8885,8886,8887,8888,8889,8890,8891,8892,8893,8894,8895,8896,8897,8898,8899,8900,8901,8902,8903,8904,8905,8906,8907,8908,8909,8910,8911,8912,8913,8914,8915,8916,8917,8918,8919,8920,8921,8922,8923,8924,8925,8926,8927,8928,8929,8930,8931,8932,8933,8934,8935,8936,8937,8938,8939,8940,8941,8942,8943,8944,8945,8946,8947,8948,8949,8950,8951,8952,8953,8954,8955,8956,8957,8958,8959,8960,8961,8962,8963,8964,8965,8966,8967,8968,8969,8970,8971,8972,8973,8974,8975,8976,8977,8978,8979,8980,8981,8982,8983,8984,8985,8986,8987,8988,8989,8990,8991,8992,8993,8994,8995,8996,8997,8998,8999,9000,9001,9002,9003,9004,9005,9006,9007,9008,9009,9010,9011,9012,9013,9014,9015,9016,9017,9018,9019,9020,9021,9022,9023,9024,9025,9026,9027,9028,9029,9030,9031,9032,9033,9034,9035,9036,9037,9038,9039,9040,9041,9042,9043,9044,9045,9046,9047,9048,9049,9050,9051,9052,9053,9054,9055,9056,9057,9058,9059,9060,9061,9062,9063,9064,9065,9066,9067,9068,9069,9070,9071,9072,9073,9074,9075,9076,9077,9078,9079,9080,9081,9082,9083,9084,9085,9086,9087,9088,9089,9090,9091,9092,9093,9094,9095,9096,9097,9098,9099,9100,9101,9102,9103,9104,9105,9106,9107,9108,9109,9110,9111,9112,9113,9114,9115,9116,9117,9118,9119,9120,9121,9122,9123,9124,9125,9126,9127,9128,9129,9130,9131,9132,9133,9134,9135,9136,9137,9138,9139,9140,9141,9142,9143,9144,9145,9146,9147,9148,9149,9150,9151,9152,9153,9154,9155,9156,9157,9158,9159,9160,9161,9162,9163,9164,9165,9166,9167,9168,9169,9170,9171,9172,9173,9174,9175,9176,9177,9178,9179,9180,9181,9182,9183,9184,9185,9186,9187,9188,9189,9190,9191,9192,9193,9194,9195,9196,9197,9198,9199,9200,9201,9202,9203,9204,9205,9206,9207,9208,9209,9210,9211,9212,9213,9214,9215,9216,9217, unused=0)+deltaUZero19(unused) on(9217,9218,9219,9220,9221,9222,9223,9224,9225,9226,9227,9228,9229,9230,9231,9232,9233,9234,9235,9236,9237,9238,9239,9240,9241,9242,9243,9244,9245,9246,9247,9248,9249,9250,9251,9252,9253,9254,9255,9256,9257,9258,9259,9260,9261,9262,9263,9264,9265,9266,9267,9268,9269,9270,9271,9272,9273,9274,9275,9276,9277,9278,9279,9280,9281,9282,9283,9284,9285,9286,9287,9288,9289,9290,9291,9292,9293,9294,9295,9296,9297,9298,9299,9300,9301,9302,9303,9304,9305,9306,9307,9308,9309,9310,9311,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,9322,9323,9324,9325,9326,9327,9328,9329,9330,9331,9332,9333,9334,9335,9336,9337,9338,9339,9340,9341,9342,9343,9344,9345,9346,9347,9348,9349,9350,9351,9352,9353,9354,9355,9356,9357,9358,9359,9360,9361,9362,9363,9364,9365,9366,9367,9368,9369,9370,9371,9372,9373,9374,9375,9376,9377,9378,9379,9380,9381,9382,9383,9384,9385,9386,9387,9388,9389,9390,9391,9392,9393,9394,9395,9396,9397,9398,9399,9400,9401,9402,9403,9404,9405,9406,9407,9408,9409,9410,9411,9412,9413,9414,9415,9416,9417,9418,9419,9420,9421,9422,9423,9424,9425,9426,9427,9428,9429,9430,9431,9432,9433,9434,9435,9436,9437,9438,9439,9440,9441,9442,9443,9444,9445,9446,9447,9448,9449,9450,9451,9452,9453,9454,9455,9456,9457,9458,9459,9460,9461,9462,9463,9464,9465,9466,9467,9468,9469,9470,9471,9472,9473,9474,9475,9476,9477,9478,9479,9480,9481,9482,9483,9484,9485,9486,9487,9488,9489,9490,9491,9492,9493,9494,9495,9496,9497,9498,9499,9500,9501,9502,9503,9504,9505,9506,9507,9508,9509,9510,9511,9512,9513,9514,9515,9516,9517,9518,9519,9520,9521,9522,9523,9524,9525,9526,9527,9528,9529,9530,9531,9532,9533,9534,9535,9536,9537,9538,9539,9540,9541,9542,9543,9544,9545,9546,9547,9548,9549,9550,9551,9552,9553,9554,9555,9556,9557,9558,9559,9560,9561,9562,9563,9564,9565,9566,9567,9568,9569,9570,9571,9572,9573,9574,9575,9576,9577,9578,9579,9580,9581,9582,9583,9584,9585,9586,9587,9588,9589,9590,9591,9592,9593,9594,9595,9596,9597,9598,9599,9600,9601,9602,9603,9604,9605,9606,9607,9608,9609,9610,9611,9612,9613,9614,9615,9616,9617,9618,9619,9620,9621,9622,9623,9624,9625,9626,9627,9628,9629,9630,9631,9632,9633,9634,9635,9636,9637,9638,9639,9640,9641,9642,9643,9644,9645,9646,9647,9648,9649,9650,9651,9652,9653,9654,9655,9656,9657,9658,9659,9660,9661,9662,9663,9664,9665,9666,9667,9668,9669,9670,9671,9672,9673,9674,9675,9676,9677,9678,9679,9680,9681,9682,9683,9684,9685,9686,9687,9688,9689,9690,9691,9692,9693,9694,9695,9696,9697,9698,9699,9700,9701,9702,9703,9704,9705,9706,9707,9708,9709,9710,9711,9712,9713,9714,9715,9716,9717,9718,9719,9720,9721,9722,9723,9724,9725,9726,9727,9728,9729, unused=0)+deltaUZero20(unused) on(9729,9730,9731,9732,9733,9734,9735,9736,9737,9738,9739,9740,9741,9742,9743,9744,9745,9746,9747,9748,9749,9750,9751,9752,9753,9754,9755,9756,9757,9758,9759,9760,9761,9762,9763,9764,9765,9766,9767,9768,9769,9770,9771,9772,9773,9774,9775,9776,9777,9778,9779,9780,9781,9782,9783,9784,9785,9786,9787,9788,9789,9790,9791,9792,9793,9794,9795,9796,9797,9798,9799,9800,9801,9802,9803,9804,9805,9806,9807,9808,9809,9810,9811,9812,9813,9814,9815,9816,9817,9818,9819,9820,9821,9822,9823,9824,9825,9826,9827,9828,9829,9830,9831,9832,9833,9834,9835,9836,9837,9838,9839,9840,9841,9842,9843,9844,9845,9846,9847,9848,9849,9850,9851,9852,9853,9854,9855,9856,9857,9858,9859,9860,9861,9862,9863,9864,9865,9866,9867,9868,9869,9870,9871,9872,9873,9874,9875,9876,9877,9878,9879,9880,9881,9882,9883,9884,9885,9886,9887,9888,9889,9890,9891,9892,9893,9894,9895,9896,9897,9898,9899,9900,9901,9902,9903,9904,9905,9906,9907,9908,9909,9910,9911,9912,9913,9914,9915,9916,9917,9918,9919,9920,9921,9922,9923,9924,9925,9926,9927,9928,9929,9930,9931,9932,9933,9934,9935,9936,9937,9938,9939,9940,9941,9942,9943,9944,9945,9946,9947,9948,9949,9950,9951,9952,9953,9954,9955,9956,9957,9958,9959,9960,9961,9962,9963,9964,9965,9966,9967,9968,9969,9970,9971,9972,9973,9974,9975,9976,9977,9978,9979,9980,9981,9982,9983,9984,9985,9986,9987,9988,9989,9990,9991,9992,9993,9994,9995,9996,9997,9998,9999,10000,10001,10002,10003,10004,10005,10006,10007,10008,10009,10010,10011,10012,10013,10014,10015,10016,10017,10018,10019,10020,10021,10022,10023,10024,10025,10026,10027,10028,10029,10030,10031,10032,10033,10034,10035,10036,10037,10038,10039,10040,10041,10042,10043,10044,10045,10046,10047,10048,10049,10050,10051,10052,10053,10054,10055,10056,10057,10058,10059,10060,10061,10062,10063,10064,10065,10066,10067,10068,10069,10070,10071,10072,10073,10074,10075,10076,10077,10078,10079,10080,10081,10082,10083,10084,10085,10086,10087,10088,10089,10090,10091,10092,10093,10094,10095,10096,10097,10098,10099,10100,10101,10102,10103,10104,10105,10106,10107,10108,10109,10110,10111,10112,10113,10114,10115,10116,10117,10118,10119,10120,10121,10122,10123,10124,10125,10126,10127,10128,10129,10130,10131,10132,10133,10134,10135,10136,10137,10138,10139,10140,10141,10142,10143,10144,10145,10146,10147,10148,10149,10150,10151,10152,10153,10154,10155,10156,10157,10158,10159,10160,10161,10162,10163,10164,10165,10166,10167,10168,10169,10170,10171,10172,10173,10174,10175,10176,10177,10178,10179,10180,10181,10182,10183,10184,10185,10186,10187,10188,10189,10190,10191,10192,10193,10194,10195,10196,10197,10198,10199,10200,10201,10202,10203,10204,10205,10206,10207,10208,10209,10210,10211,10212,10213,10214,10215,10216,10217,10218,10219,10220,10221,10222,10223,10224,10225,10226,10227,10228,10229,10230,10231,10232,10233,10234,10235,10236,10237,10238,10239,10240,10241, unused=0)+deltaUZero21(unused) on(10241,10242,10243,10244,10245,10246,10247,10248,10249,10250,10251,10252,10253,10254,10255,10256,10257,10258,10259,10260,10261,10262,10263,10264,10265,10266,10267,10268,10269,10270,10271,10272,10273,10274,10275,10276,10277,10278,10279,10280,10281,10282,10283,10284,10285,10286,10287,10288,10289,10290,10291,10292,10293,10294,10295,10296,10297,10298,10299,10300,10301,10302,10303,10304,10305,10306,10307,10308,10309,10310,10311,10312,10313,10314,10315,10316,10317,10318,10319,10320,10321,10322,10323,10324,10325,10326,10327,10328,10329,10330,10331,10332,10333,10334,10335,10336,10337,10338,10339,10340,10341,10342,10343,10344,10345,10346,10347,10348,10349,10350,10351,10352,10353,10354,10355,10356,10357,10358,10359,10360,10361,10362,10363,10364,10365,10366,10367,10368,10369,10370,10371,10372,10373,10374,10375,10376,10377,10378,10379,10380,10381,10382,10383,10384,10385,10386,10387,10388,10389,10390,10391,10392,10393,10394,10395,10396,10397,10398,10399,10400,10401,10402,10403,10404,10405,10406,10407,10408,10409,10410,10411,10412,10413,10414,10415,10416,10417,10418,10419,10420,10421,10422,10423,10424,10425,10426,10427,10428,10429,10430,10431,10432,10433,10434,10435,10436,10437,10438,10439,10440,10441,10442,10443,10444,10445,10446,10447,10448,10449,10450,10451,10452,10453,10454,10455,10456,10457,10458,10459,10460,10461,10462,10463,10464,10465,10466,10467,10468,10469,10470,10471,10472,10473,10474,10475,10476,10477,10478,10479,10480,10481,10482,10483,10484,10485,10486,10487,10488,10489,10490,10491,10492,10493,10494,10495,10496,10497,10498,10499,10500,10501,10502,10503,10504,10505,10506,10507,10508,10509,10510,10511,10512,10513,10514,10515,10516,10517,10518,10519,10520,10521,10522,10523,10524,10525,10526,10527,10528,10529,10530,10531,10532,10533,10534,10535,10536,10537,10538,10539,10540,10541,10542,10543,10544,10545,10546,10547,10548,10549,10550,10551,10552,10553,10554,10555,10556,10557,10558,10559,10560,10561,10562,10563,10564,10565,10566,10567,10568,10569,10570,10571,10572,10573,10574,10575,10576,10577,10578,10579,10580,10581,10582,10583,10584,10585,10586,10587,10588,10589,10590,10591,10592,10593,10594,10595,10596,10597,10598,10599,10600,10601,10602,10603,10604,10605,10606,10607,10608,10609,10610,10611,10612,10613,10614,10615,10616,10617,10618,10619,10620,10621,10622,10623,10624,10625,10626,10627,10628,10629,10630,10631,10632,10633,10634,10635,10636,10637,10638,10639,10640,10641,10642,10643,10644,10645,10646,10647,10648,10649,10650,10651,10652,10653,10654,10655,10656,10657,10658,10659,10660,10661,10662,10663,10664,10665,10666,10667,10668,10669,10670,10671,10672,10673,10674,10675,10676,10677,10678,10679,10680,10681,10682,10683,10684,10685,10686,10687,10688,10689,10690,10691,10692,10693,10694,10695,10696,10697,10698,10699,10700,10701,10702,10703,10704,10705,10706,10707,10708,10709,10710,10711,10712,10713,10714,10715,10716,10717,10718,10719,10720,10721,10722,10723,10724,10725,10726,10727,10728,10729,10730,10731,10732,10733,10734,10735,10736,10737,10738,10739,10740,10741,10742,10743,10744,10745,10746,10747,10748,10749,10750,10751,10752,10753, unused=0)+deltaUZero22(unused) on(10753,10754,10755,10756,10757,10758,10759,10760,10761,10762,10763,10764,10765,10766,10767,10768,10769,10770,10771,10772,10773,10774,10775,10776,10777,10778,10779,10780,10781,10782,10783,10784,10785,10786,10787,10788,10789,10790,10791,10792,10793,10794,10795,10796,10797,10798,10799,10800,10801,10802,10803,10804,10805,10806,10807,10808,10809,10810,10811,10812,10813,10814,10815,10816,10817,10818,10819,10820,10821,10822,10823,10824,10825,10826,10827,10828,10829,10830,10831,10832,10833,10834,10835,10836,10837,10838,10839,10840,10841,10842,10843,10844,10845,10846,10847,10848,10849,10850,10851,10852,10853,10854,10855,10856,10857,10858,10859,10860,10861,10862,10863,10864,10865,10866,10867,10868,10869,10870,10871,10872,10873,10874,10875,10876,10877,10878,10879,10880,10881,10882,10883,10884,10885,10886,10887,10888,10889,10890,10891,10892,10893,10894,10895,10896,10897,10898,10899,10900,10901,10902,10903,10904,10905,10906,10907,10908,10909,10910,10911,10912,10913,10914,10915,10916,10917,10918,10919,10920,10921,10922,10923,10924,10925,10926,10927,10928,10929,10930,10931,10932,10933,10934,10935,10936,10937,10938,10939,10940,10941,10942,10943,10944,10945,10946,10947,10948,10949,10950,10951,10952,10953,10954,10955,10956,10957,10958,10959,10960,10961,10962,10963,10964,10965,10966,10967,10968,10969,10970,10971,10972,10973,10974,10975,10976,10977,10978,10979,10980,10981,10982,10983,10984,10985,10986,10987,10988,10989,10990,10991,10992,10993,10994,10995,10996,10997,10998,10999,11000,11001,11002,11003,11004,11005,11006,11007,11008,11009,11010,11011,11012,11013,11014,11015,11016,11017,11018,11019,11020,11021,11022,11023,11024,11025,11026,11027,11028,11029,11030,11031,11032,11033,11034,11035,11036,11037,11038,11039,11040,11041,11042,11043,11044,11045,11046,11047,11048,11049,11050,11051,11052,11053,11054,11055,11056,11057,11058,11059,11060,11061,11062,11063,11064,11065,11066,11067,11068,11069,11070,11071,11072,11073,11074,11075,11076,11077,11078,11079,11080,11081,11082,11083,11084,11085,11086,11087,11088,11089,11090,11091,11092,11093,11094,11095,11096,11097,11098,11099,11100,11101,11102,11103,11104,11105,11106,11107,11108,11109,11110,11111,11112,11113,11114,11115,11116,11117,11118,11119,11120,11121,11122,11123,11124,11125,11126,11127,11128,11129,11130,11131,11132,11133,11134,11135,11136,11137,11138,11139,11140,11141,11142,11143,11144,11145,11146,11147,11148,11149,11150,11151,11152,11153,11154,11155,11156,11157,11158,11159,11160,11161,11162,11163,11164,11165,11166,11167,11168,11169,11170,11171,11172,11173,11174,11175,11176,11177,11178,11179,11180,11181,11182,11183,11184,11185,11186,11187,11188,11189,11190,11191,11192,11193,11194,11195,11196,11197,11198,11199,11200,11201,11202,11203,11204,11205,11206,11207,11208,11209,11210,11211,11212,11213,11214,11215,11216,11217,11218,11219,11220,11221,11222,11223,11224,11225,11226,11227,11228,11229,11230,11231,11232,11233,11234,11235,11236,11237,11238,11239,11240,11241,11242,11243,11244,11245,11246,11247,11248,11249,11250,11251,11252,11253,11254,11255,11256,11257,11258,11259,11260,11261,11262,11263,11264,11265, unused=0)+deltaUZero23(unused) on(11265,11266,11267,11268,11269,11270,11271,11272,11273,11274,11275,11276,11277,11278,11279,11280,11281,11282,11283,11284,11285,11286,11287,11288,11289,11290,11291,11292,11293,11294,11295,11296,11297,11298,11299,11300,11301,11302,11303,11304,11305,11306,11307,11308,11309,11310,11311,11312,11313,11314,11315,11316,11317,11318,11319,11320,11321,11322,11323,11324,11325,11326,11327,11328,11329,11330,11331,11332,11333,11334,11335,11336,11337,11338,11339,11340,11341,11342,11343,11344,11345,11346,11347,11348,11349,11350,11351,11352,11353,11354,11355,11356,11357,11358,11359,11360,11361,11362,11363,11364,11365,11366,11367,11368,11369,11370,11371,11372,11373,11374,11375,11376,11377,11378,11379,11380,11381,11382,11383,11384,11385,11386,11387,11388,11389,11390,11391,11392,11393,11394,11395,11396,11397,11398,11399,11400,11401,11402,11403,11404,11405,11406,11407,11408,11409,11410,11411,11412,11413,11414,11415,11416,11417,11418,11419,11420,11421,11422,11423,11424,11425,11426,11427,11428,11429,11430,11431,11432,11433,11434,11435,11436,11437,11438,11439,11440,11441,11442,11443,11444,11445,11446,11447,11448,11449,11450,11451,11452,11453,11454,11455,11456,11457,11458,11459,11460,11461,11462,11463,11464,11465,11466,11467,11468,11469,11470,11471,11472,11473,11474,11475,11476,11477,11478,11479,11480,11481,11482,11483,11484,11485,11486,11487,11488,11489,11490,11491,11492,11493,11494,11495,11496,11497,11498,11499,11500,11501,11502,11503,11504,11505,11506,11507,11508,11509,11510,11511,11512,11513,11514,11515,11516,11517,11518,11519,11520,11521,11522,11523,11524,11525,11526,11527,11528,11529,11530,11531,11532,11533,11534,11535,11536,11537,11538,11539,11540,11541,11542,11543,11544,11545,11546,11547,11548,11549,11550,11551,11552,11553,11554,11555,11556,11557,11558,11559,11560,11561,11562,11563,11564,11565,11566,11567,11568,11569,11570,11571,11572,11573,11574,11575,11576,11577,11578,11579,11580,11581,11582,11583,11584,11585,11586,11587,11588,11589,11590,11591,11592,11593,11594,11595,11596,11597,11598,11599,11600,11601,11602,11603,11604,11605,11606,11607,11608,11609,11610,11611,11612,11613,11614,11615,11616,11617,11618,11619,11620,11621,11622,11623,11624,11625,11626,11627,11628,11629,11630,11631,11632,11633,11634,11635,11636,11637,11638,11639,11640,11641,11642,11643,11644,11645,11646,11647,11648,11649,11650,11651,11652,11653,11654,11655,11656,11657,11658,11659,11660,11661,11662,11663,11664,11665,11666,11667,11668,11669,11670,11671,11672,11673,11674,11675,11676,11677,11678,11679,11680,11681,11682,11683,11684,11685,11686,11687,11688,11689,11690,11691,11692,11693,11694,11695,11696,11697,11698,11699,11700,11701,11702,11703,11704,11705,11706,11707,11708,11709,11710,11711,11712,11713,11714,11715,11716,11717,11718,11719,11720,11721,11722,11723,11724,11725,11726,11727,11728,11729,11730,11731,11732,11733,11734,11735,11736,11737,11738,11739,11740,11741,11742,11743,11744,11745,11746,11747,11748,11749,11750,11751,11752,11753,11754,11755,11756,11757,11758,11759,11760,11761,11762,11763,11764,11765,11766,11767,11768,11769,11770,11771,11772,11773,11774,11775,11776,11777, unused=0)+deltaUZero24(unused) on(11777,11778,11779,11780,11781,11782,11783,11784,11785,11786,11787,11788,11789,11790,11791,11792,11793,11794,11795,11796,11797,11798,11799,11800,11801,11802,11803,11804,11805,11806,11807,11808,11809,11810,11811,11812,11813,11814,11815,11816,11817,11818,11819,11820,11821,11822,11823,11824,11825,11826,11827,11828,11829,11830,11831,11832,11833,11834,11835,11836,11837,11838,11839,11840,11841,11842,11843,11844,11845,11846,11847,11848,11849,11850,11851,11852,11853,11854,11855,11856,11857,11858,11859,11860,11861,11862,11863,11864,11865,11866,11867,11868,11869,11870,11871,11872,11873,11874,11875,11876,11877,11878,11879,11880,11881,11882,11883,11884,11885,11886,11887,11888,11889,11890,11891,11892,11893,11894,11895,11896,11897,11898,11899,11900,11901,11902,11903,11904,11905,11906,11907,11908,11909,11910,11911,11912,11913,11914,11915,11916,11917,11918,11919,11920,11921,11922,11923,11924,11925,11926,11927,11928,11929,11930,11931,11932,11933,11934,11935,11936,11937,11938,11939,11940,11941,11942,11943,11944,11945,11946,11947,11948,11949,11950,11951,11952,11953,11954,11955,11956,11957,11958,11959,11960,11961,11962,11963,11964,11965,11966,11967,11968,11969,11970,11971,11972,11973,11974,11975,11976,11977,11978,11979,11980,11981,11982,11983,11984,11985,11986,11987,11988,11989,11990,11991,11992,11993,11994,11995,11996,11997,11998,11999,12000,12001,12002,12003,12004,12005,12006,12007,12008,12009,12010,12011,12012,12013,12014,12015,12016,12017,12018,12019,12020,12021,12022,12023,12024,12025,12026,12027,12028,12029,12030,12031,12032,12033,12034,12035,12036,12037,12038,12039,12040,12041,12042,12043,12044,12045,12046,12047,12048,12049,12050,12051,12052,12053,12054,12055,12056,12057,12058,12059,12060,12061,12062,12063,12064,12065,12066,12067,12068,12069,12070,12071,12072,12073,12074,12075,12076,12077,12078,12079,12080,12081,12082,12083,12084,12085,12086,12087,12088,12089,12090,12091,12092,12093,12094,12095,12096,12097,12098,12099,12100,12101,12102,12103,12104,12105,12106,12107,12108,12109,12110,12111,12112,12113,12114,12115,12116,12117,12118,12119,12120,12121,12122,12123,12124,12125,12126,12127,12128,12129,12130,12131,12132,12133,12134,12135,12136,12137,12138,12139,12140,12141,12142,12143,12144,12145,12146,12147,12148,12149,12150,12151,12152,12153,12154,12155,12156,12157,12158,12159,12160,12161,12162,12163,12164,12165,12166,12167,12168,12169,12170,12171,12172,12173,12174,12175,12176,12177,12178,12179,12180,12181,12182,12183,12184,12185,12186,12187,12188,12189,12190,12191,12192,12193,12194,12195,12196,12197,12198,12199,12200,12201,12202,12203,12204,12205,12206,12207,12208,12209,12210,12211,12212,12213,12214,12215,12216,12217,12218,12219,12220,12221,12222,12223,12224,12225,12226,12227,12228,12229,12230,12231,12232,12233,12234,12235,12236,12237,12238,12239,12240,12241,12242,12243,12244,12245,12246,12247,12248,12249,12250,12251,12252,12253,12254,12255,12256,12257,12258,12259,12260,12261,12262,12263,12264,12265,12266,12267,12268,12269,12270,12271,12272,12273,12274,12275,12276,12277,12278,12279,12280,12281,12282,12283,12284,12285,12286,12287,12288,12289, unused=0)+deltaUZero25(unused) on(12289,12290,12291,12292,12293,12294,12295,12296,12297,12298,12299,12300,12301,12302,12303,12304,12305,12306,12307,12308,12309,12310,12311,12312,12313,12314,12315,12316,12317,12318,12319,12320,12321,12322,12323,12324,12325,12326,12327,12328,12329,12330,12331,12332,12333,12334,12335,12336,12337,12338,12339,12340,12341,12342,12343,12344,12345,12346,12347,12348,12349,12350,12351,12352,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,12436,12437,12438,12439,12440,12441,12442,12443,12444,12445,12446,12447,12448,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,12535,12536,12537,12538,12539,12540,12541,12542,12543,12544,12545,12546,12547,12548,12549,12550,12551,12552,12553,12554,12555,12556,12557,12558,12559,12560,12561,12562,12563,12564,12565,12566,12567,12568,12569,12570,12571,12572,12573,12574,12575,12576,12577,12578,12579,12580,12581,12582,12583,12584,12585,12586,12587,12588,12589,12590,12591,12592,12593,12594,12595,12596,12597,12598,12599,12600,12601,12602,12603,12604,12605,12606,12607,12608,12609,12610,12611,12612,12613,12614,12615,12616,12617,12618,12619,12620,12621,12622,12623,12624,12625,12626,12627,12628,12629,12630,12631,12632,12633,12634,12635,12636,12637,12638,12639,12640,12641,12642,12643,12644,12645,12646,12647,12648,12649,12650,12651,12652,12653,12654,12655,12656,12657,12658,12659,12660,12661,12662,12663,12664,12665,12666,12667,12668,12669,12670,12671,12672,12673,12674,12675,12676,12677,12678,12679,12680,12681,12682,12683,12684,12685,12686,12687,12688,12689,12690,12691,12692,12693,12694,12695,12696,12697,12698,12699,12700,12701,12702,12703,12704,12705,12706,12707,12708,12709,12710,12711,12712,12713,12714,12715,12716,12717,12718,12719,12720,12721,12722,12723,12724,12725,12726,12727,12728,12729,12730,12731,12732,12733,12734,12735,12736,12737,12738,12739,12740,12741,12742,12743,12744,12745,12746,12747,12748,12749,12750,12751,12752,12753,12754,12755,12756,12757,12758,12759,12760,12761,12762,12763,12764,12765,12766,12767,12768,12769,12770,12771,12772,12773,12774,12775,12776,12777,12778,12779,12780,12781,12782,12783,12784,12785,12786,12787,12788,12789,12790,12791,12792,12793,12794,12795,12796,12797,12798,12799,12800,12801, unused=0)+deltaUZero26(unused) on(12801,12802,12803,12804,12805,12806,12807,12808,12809,12810,12811,12812,12813,12814,12815,12816,12817,12818,12819,12820,12821,12822,12823,12824,12825,12826,12827,12828,12829,12830,12831,12832,12833,12834,12835,12836,12837,12838,12839,12840,12841,12842,12843,12844,12845,12846,12847,12848,12849,12850,12851,12852,12853,12854,12855,12856,12857,12858,12859,12860,12861,12862,12863,12864,12865,12866,12867,12868,12869,12870,12871,12872,12873,12874,12875,12876,12877,12878,12879,12880,12881,12882,12883,12884,12885,12886,12887,12888,12889,12890,12891,12892,12893,12894,12895,12896,12897,12898,12899,12900,12901,12902,12903,12904,12905,12906,12907,12908,12909,12910,12911,12912,12913,12914,12915,12916,12917,12918,12919,12920,12921,12922,12923,12924,12925,12926,12927,12928,12929,12930,12931,12932,12933,12934,12935,12936,12937,12938,12939,12940,12941,12942,12943,12944,12945,12946,12947,12948,12949,12950,12951,12952,12953,12954,12955,12956,12957,12958,12959,12960,12961,12962,12963,12964,12965,12966,12967,12968,12969,12970,12971,12972,12973,12974,12975,12976,12977,12978,12979,12980,12981,12982,12983,12984,12985,12986,12987,12988,12989,12990,12991,12992,12993,12994,12995,12996,12997,12998,12999,13000,13001,13002,13003,13004,13005,13006,13007,13008,13009,13010,13011,13012,13013,13014,13015,13016,13017,13018,13019,13020,13021,13022,13023,13024,13025,13026,13027,13028,13029,13030,13031,13032,13033,13034,13035,13036,13037,13038,13039,13040,13041,13042,13043,13044,13045,13046,13047,13048,13049,13050,13051,13052,13053,13054,13055,13056,13057,13058,13059,13060,13061,13062,13063,13064,13065,13066,13067,13068,13069,13070,13071,13072,13073,13074,13075,13076,13077,13078,13079,13080,13081,13082,13083,13084,13085,13086,13087,13088,13089,13090,13091,13092,13093,13094,13095,13096,13097,13098,13099,13100,13101,13102,13103,13104,13105,13106,13107,13108,13109,13110,13111,13112,13113,13114,13115,13116,13117,13118,13119,13120,13121,13122,13123,13124,13125,13126,13127,13128,13129,13130,13131,13132,13133,13134,13135,13136,13137,13138,13139,13140,13141,13142,13143,13144,13145,13146,13147,13148,13149,13150,13151,13152,13153,13154,13155,13156,13157,13158,13159,13160,13161,13162,13163,13164,13165,13166,13167,13168,13169,13170,13171,13172,13173,13174,13175,13176,13177,13178,13179,13180,13181,13182,13183,13184,13185,13186,13187,13188,13189,13190,13191,13192,13193,13194,13195,13196,13197,13198,13199,13200,13201,13202,13203,13204,13205,13206,13207,13208,13209,13210,13211,13212,13213,13214,13215,13216,13217,13218,13219,13220,13221,13222,13223,13224,13225,13226,13227,13228,13229,13230,13231,13232,13233,13234,13235,13236,13237,13238,13239,13240,13241,13242,13243,13244,13245,13246,13247,13248,13249,13250,13251,13252,13253,13254,13255,13256,13257,13258,13259,13260,13261,13262,13263,13264,13265,13266,13267,13268,13269,13270,13271,13272,13273,13274,13275,13276,13277,13278,13279,13280,13281,13282,13283,13284,13285,13286,13287,13288,13289,13290,13291,13292,13293,13294,13295,13296,13297,13298,13299,13300,13301,13302,13303,13304,13305,13306,13307,13308,13309,13310,13311,13312,13313, unused=0)+deltaUZero27(unused) on(13313,13314,13315,13316,13317,13318,13319,13320,13321,13322,13323,13324,13325,13326,13327,13328,13329,13330,13331,13332,13333,13334,13335,13336,13337,13338,13339,13340,13341,13342,13343,13344,13345,13346,13347,13348,13349,13350,13351,13352,13353,13354,13355,13356,13357,13358,13359,13360,13361,13362,13363,13364,13365,13366,13367,13368,13369,13370,13371,13372,13373,13374,13375,13376,13377,13378,13379,13380,13381,13382,13383,13384,13385,13386,13387,13388,13389,13390,13391,13392,13393,13394,13395,13396,13397,13398,13399,13400,13401,13402,13403,13404,13405,13406,13407,13408,13409,13410,13411,13412,13413,13414,13415,13416,13417,13418,13419,13420,13421,13422,13423,13424,13425,13426,13427,13428,13429,13430,13431,13432,13433,13434,13435,13436,13437,13438,13439,13440,13441,13442,13443,13444,13445,13446,13447,13448,13449,13450,13451,13452,13453,13454,13455,13456,13457,13458,13459,13460,13461,13462,13463,13464,13465,13466,13467,13468,13469,13470,13471,13472,13473,13474,13475,13476,13477,13478,13479,13480,13481,13482,13483,13484,13485,13486,13487,13488,13489,13490,13491,13492,13493,13494,13495,13496,13497,13498,13499,13500,13501,13502,13503,13504,13505,13506,13507,13508,13509,13510,13511,13512,13513,13514,13515,13516,13517,13518,13519,13520,13521,13522,13523,13524,13525,13526,13527,13528,13529,13530,13531,13532,13533,13534,13535,13536,13537,13538,13539,13540,13541,13542,13543,13544,13545,13546,13547,13548,13549,13550,13551,13552,13553,13554,13555,13556,13557,13558,13559,13560,13561,13562,13563,13564,13565,13566,13567,13568,13569,13570,13571,13572,13573,13574,13575,13576,13577,13578,13579,13580,13581,13582,13583,13584,13585,13586,13587,13588,13589,13590,13591,13592,13593,13594,13595,13596,13597,13598,13599,13600,13601,13602,13603,13604,13605,13606,13607,13608,13609,13610,13611,13612,13613,13614,13615,13616,13617,13618,13619,13620,13621,13622,13623,13624,13625,13626,13627,13628,13629,13630,13631,13632,13633,13634,13635,13636,13637,13638,13639,13640,13641,13642,13643,13644,13645,13646,13647,13648,13649,13650,13651,13652,13653,13654,13655,13656,13657,13658,13659,13660,13661,13662,13663,13664,13665,13666,13667,13668,13669,13670,13671,13672,13673,13674,13675,13676,13677,13678,13679,13680,13681,13682,13683,13684,13685,13686,13687,13688,13689,13690,13691,13692,13693,13694,13695,13696,13697,13698,13699,13700,13701,13702,13703,13704,13705,13706,13707,13708,13709,13710,13711,13712,13713,13714,13715,13716,13717,13718,13719,13720,13721,13722,13723,13724,13725,13726,13727,13728,13729,13730,13731,13732,13733,13734,13735,13736,13737,13738,13739,13740,13741,13742,13743,13744,13745,13746,13747,13748,13749,13750,13751,13752,13753,13754,13755,13756,13757,13758,13759,13760,13761,13762,13763,13764,13765,13766,13767,13768,13769,13770,13771,13772,13773,13774,13775,13776,13777,13778,13779,13780,13781,13782,13783,13784,13785,13786,13787,13788,13789,13790,13791,13792,13793,13794,13795,13796,13797,13798,13799,13800,13801,13802,13803,13804,13805,13806,13807,13808,13809,13810,13811,13812,13813,13814,13815,13816,13817,13818,13819,13820,13821,13822,13823,13824,13825, unused=0)+deltaUZero28(unused) on(13825,13826,13827,13828,13829,13830,13831,13832,13833,13834,13835,13836,13837,13838,13839,13840,13841,13842,13843,13844,13845,13846,13847,13848,13849,13850,13851,13852,13853,13854,13855,13856,13857,13858,13859,13860,13861,13862,13863,13864,13865,13866,13867,13868,13869,13870,13871,13872,13873,13874,13875,13876,13877,13878,13879,13880,13881,13882,13883,13884,13885,13886,13887,13888,13889,13890,13891,13892,13893,13894,13895,13896,13897,13898,13899,13900,13901,13902,13903,13904,13905,13906,13907,13908,13909,13910,13911,13912,13913,13914,13915,13916,13917,13918,13919,13920,13921,13922,13923,13924,13925,13926,13927,13928,13929,13930,13931,13932,13933,13934,13935,13936,13937,13938,13939,13940,13941,13942,13943,13944,13945,13946,13947,13948,13949,13950,13951,13952,13953,13954,13955,13956,13957,13958,13959,13960,13961,13962,13963,13964,13965,13966,13967,13968,13969,13970,13971,13972,13973,13974,13975,13976,13977,13978,13979,13980,13981,13982,13983,13984,13985,13986,13987,13988,13989,13990,13991,13992,13993,13994,13995,13996,13997,13998,13999,14000,14001,14002,14003,14004,14005,14006,14007,14008,14009,14010,14011,14012,14013,14014,14015,14016,14017,14018,14019,14020,14021,14022,14023,14024,14025,14026,14027,14028,14029,14030,14031,14032,14033,14034,14035,14036,14037,14038,14039,14040,14041,14042,14043,14044,14045,14046,14047,14048,14049,14050,14051,14052,14053,14054,14055,14056,14057,14058,14059,14060,14061,14062,14063,14064,14065,14066,14067,14068,14069,14070,14071,14072,14073,14074,14075,14076,14077,14078,14079,14080,14081,14082,14083,14084,14085,14086,14087,14088,14089,14090,14091,14092,14093,14094,14095,14096,14097,14098,14099,14100,14101,14102,14103,14104,14105,14106,14107,14108,14109,14110,14111,14112,14113,14114,14115,14116,14117,14118,14119,14120,14121,14122,14123,14124,14125,14126,14127,14128,14129,14130,14131,14132,14133,14134,14135,14136,14137,14138,14139,14140,14141,14142,14143,14144,14145,14146,14147,14148,14149,14150,14151,14152,14153,14154,14155,14156,14157,14158,14159,14160,14161,14162,14163,14164,14165,14166,14167,14168,14169,14170,14171,14172,14173,14174,14175,14176,14177,14178,14179,14180,14181,14182,14183,14184,14185,14186,14187,14188,14189,14190,14191,14192,14193,14194,14195,14196,14197,14198,14199,14200,14201,14202,14203,14204,14205,14206,14207,14208,14209,14210,14211,14212,14213,14214,14215,14216,14217,14218,14219,14220,14221,14222,14223,14224,14225,14226,14227,14228,14229,14230,14231,14232,14233,14234,14235,14236,14237,14238,14239,14240,14241,14242,14243,14244,14245,14246,14247,14248,14249,14250,14251,14252,14253,14254,14255,14256,14257,14258,14259,14260,14261,14262,14263,14264,14265,14266,14267,14268,14269,14270,14271,14272,14273,14274,14275,14276,14277,14278,14279,14280,14281,14282,14283,14284,14285,14286,14287,14288,14289,14290,14291,14292,14293,14294,14295,14296,14297,14298,14299,14300,14301,14302,14303,14304,14305,14306,14307,14308,14309,14310,14311,14312,14313,14314,14315,14316,14317,14318,14319,14320,14321,14322,14323,14324,14325,14326,14327,14328,14329,14330,14331,14332,14333,14334,14335,14336,14337, unused=0)+deltaUZero29(unused) on(14337,14338,14339,14340,14341,14342,14343,14344,14345,14346,14347,14348,14349,14350,14351,14352,14353,14354,14355,14356,14357,14358,14359,14360,14361,14362,14363,14364,14365,14366,14367,14368,14369,14370,14371,14372,14373,14374,14375,14376,14377,14378,14379,14380,14381,14382,14383,14384,14385,14386,14387,14388,14389,14390,14391,14392,14393,14394,14395,14396,14397,14398,14399,14400,14401,14402,14403,14404,14405,14406,14407,14408,14409,14410,14411,14412,14413,14414,14415,14416,14417,14418,14419,14420,14421,14422,14423,14424,14425,14426,14427,14428,14429,14430,14431,14432,14433,14434,14435,14436,14437,14438,14439,14440,14441,14442,14443,14444,14445,14446,14447,14448,14449,14450,14451,14452,14453,14454,14455,14456,14457,14458,14459,14460,14461,14462,14463,14464,14465,14466,14467,14468,14469,14470,14471,14472,14473,14474,14475,14476,14477,14478,14479,14480,14481,14482,14483,14484,14485,14486,14487,14488,14489,14490,14491,14492,14493,14494,14495,14496,14497,14498,14499,14500,14501,14502,14503,14504,14505,14506,14507,14508,14509,14510,14511,14512,14513,14514,14515,14516,14517,14518,14519,14520,14521,14522,14523,14524,14525,14526,14527,14528,14529,14530,14531,14532,14533,14534,14535,14536,14537,14538,14539,14540,14541,14542,14543,14544,14545,14546,14547,14548,14549,14550,14551,14552,14553,14554,14555,14556,14557,14558,14559,14560,14561,14562,14563,14564,14565,14566,14567,14568,14569,14570,14571,14572,14573,14574,14575,14576,14577,14578,14579,14580,14581,14582,14583,14584,14585,14586,14587,14588,14589,14590,14591,14592,14593,14594,14595,14596,14597,14598,14599,14600,14601,14602,14603,14604,14605,14606,14607,14608,14609,14610,14611,14612,14613,14614,14615,14616,14617,14618,14619,14620,14621,14622,14623,14624,14625,14626,14627,14628,14629,14630,14631,14632,14633,14634,14635,14636,14637,14638,14639,14640,14641,14642,14643,14644,14645,14646,14647,14648,14649,14650,14651,14652,14653,14654,14655,14656,14657,14658,14659,14660,14661,14662,14663,14664,14665,14666,14667,14668,14669,14670,14671,14672,14673,14674,14675,14676,14677,14678,14679,14680,14681,14682,14683,14684,14685,14686,14687,14688,14689,14690,14691,14692,14693,14694,14695,14696,14697,14698,14699,14700,14701,14702,14703,14704,14705,14706,14707,14708,14709,14710,14711,14712,14713,14714,14715,14716,14717,14718,14719,14720,14721,14722,14723,14724,14725,14726,14727,14728,14729,14730,14731,14732,14733,14734,14735,14736,14737,14738,14739,14740,14741,14742,14743,14744,14745,14746,14747,14748,14749,14750,14751,14752,14753,14754,14755,14756,14757,14758,14759,14760,14761,14762,14763,14764,14765,14766,14767,14768,14769,14770,14771,14772,14773,14774,14775,14776,14777,14778,14779,14780,14781,14782,14783,14784,14785,14786,14787,14788,14789,14790,14791,14792,14793,14794,14795,14796,14797,14798,14799,14800,14801,14802,14803,14804,14805,14806,14807,14808,14809,14810,14811,14812,14813,14814,14815,14816,14817,14818,14819,14820,14821,14822,14823,14824,14825,14826,14827,14828,14829,14830,14831,14832,14833,14834,14835,14836,14837,14838,14839,14840,14841,14842,14843,14844,14845,14846,14847,14848,14849, unused=0)+deltaUZero30(unused) on(14849,14850,14851,14852,14853,14854,14855,14856,14857,14858,14859,14860,14861,14862,14863,14864,14865,14866,14867,14868,14869,14870,14871,14872,14873,14874,14875,14876,14877,14878,14879,14880,14881,14882,14883,14884,14885,14886,14887,14888,14889,14890,14891,14892,14893,14894,14895,14896,14897,14898,14899,14900,14901,14902,14903,14904,14905,14906,14907,14908,14909,14910,14911,14912,14913,14914,14915,14916,14917,14918,14919,14920,14921,14922,14923,14924,14925,14926,14927,14928,14929,14930,14931,14932,14933,14934,14935,14936,14937,14938,14939,14940,14941,14942,14943,14944,14945,14946,14947,14948,14949,14950,14951,14952,14953,14954,14955,14956,14957,14958,14959,14960,14961,14962,14963,14964,14965,14966,14967,14968,14969,14970,14971,14972,14973,14974,14975,14976,14977,14978,14979,14980,14981,14982,14983,14984,14985,14986,14987,14988,14989,14990,14991,14992,14993,14994,14995,14996,14997,14998,14999,15000,15001,15002,15003,15004,15005,15006,15007,15008,15009,15010,15011,15012,15013,15014,15015,15016,15017,15018,15019,15020,15021,15022,15023,15024,15025,15026,15027,15028,15029,15030,15031,15032,15033,15034,15035,15036,15037,15038,15039,15040,15041,15042,15043,15044,15045,15046,15047,15048,15049,15050,15051,15052,15053,15054,15055,15056,15057,15058,15059,15060,15061,15062,15063,15064,15065,15066,15067,15068,15069,15070,15071,15072,15073,15074,15075,15076,15077,15078,15079,15080,15081,15082,15083,15084,15085,15086,15087,15088,15089,15090,15091,15092,15093,15094,15095,15096,15097,15098,15099,15100,15101,15102,15103,15104,15105,15106,15107,15108,15109,15110,15111,15112,15113,15114,15115,15116,15117,15118,15119,15120,15121,15122,15123,15124,15125,15126,15127,15128,15129,15130,15131,15132,15133,15134,15135,15136,15137,15138,15139,15140,15141,15142,15143,15144,15145,15146,15147,15148,15149,15150,15151,15152,15153,15154,15155,15156,15157,15158,15159,15160,15161,15162,15163,15164,15165,15166,15167,15168,15169,15170,15171,15172,15173,15174,15175,15176,15177,15178,15179,15180,15181,15182,15183,15184,15185,15186,15187,15188,15189,15190,15191,15192,15193,15194,15195,15196,15197,15198,15199,15200,15201,15202,15203,15204,15205,15206,15207,15208,15209,15210,15211,15212,15213,15214,15215,15216,15217,15218,15219,15220,15221,15222,15223,15224,15225,15226,15227,15228,15229,15230,15231,15232,15233,15234,15235,15236,15237,15238,15239,15240,15241,15242,15243,15244,15245,15246,15247,15248,15249,15250,15251,15252,15253,15254,15255,15256,15257,15258,15259,15260,15261,15262,15263,15264,15265,15266,15267,15268,15269,15270,15271,15272,15273,15274,15275,15276,15277,15278,15279,15280,15281,15282,15283,15284,15285,15286,15287,15288,15289,15290,15291,15292,15293,15294,15295,15296,15297,15298,15299,15300,15301,15302,15303,15304,15305,15306,15307,15308,15309,15310,15311,15312,15313,15314,15315,15316,15317,15318,15319,15320,15321,15322,15323,15324,15325,15326,15327,15328,15329,15330,15331,15332,15333,15334,15335,15336,15337,15338,15339,15340,15341,15342,15343,15344,15345,15346,15347,15348,15349,15350,15351,15352,15353,15354,15355,15356,15357,15358,15359,15360,15361, unused=0)+deltaUZero31(unused) on(15361,15362,15363,15364,15365,15366,15367,15368,15369,15370,15371,15372,15373,15374,15375,15376,15377,15378,15379,15380,15381,15382,15383,15384,15385,15386,15387,15388,15389,15390,15391,15392,15393,15394,15395,15396,15397,15398,15399,15400,15401,15402,15403,15404,15405,15406,15407,15408,15409,15410,15411,15412,15413,15414,15415,15416,15417,15418,15419,15420,15421,15422,15423,15424,15425,15426,15427,15428,15429,15430,15431,15432,15433,15434,15435,15436,15437,15438,15439,15440,15441,15442,15443,15444,15445,15446,15447,15448,15449,15450,15451,15452,15453,15454,15455,15456,15457,15458,15459,15460,15461,15462,15463,15464,15465,15466,15467,15468,15469,15470,15471,15472,15473,15474,15475,15476,15477,15478,15479,15480,15481,15482,15483,15484,15485,15486,15487,15488,15489,15490,15491,15492,15493,15494,15495,15496,15497,15498,15499,15500,15501,15502,15503,15504,15505,15506,15507,15508,15509,15510,15511,15512,15513,15514,15515,15516,15517,15518,15519,15520,15521,15522,15523,15524,15525,15526,15527,15528,15529,15530,15531,15532,15533,15534,15535,15536,15537,15538,15539,15540,15541,15542,15543,15544,15545,15546,15547,15548,15549,15550,15551,15552,15553,15554,15555,15556,15557,15558,15559,15560,15561,15562,15563,15564,15565,15566,15567,15568,15569,15570,15571,15572,15573,15574,15575,15576,15577,15578,15579,15580,15581,15582,15583,15584,15585,15586,15587,15588,15589,15590,15591,15592,15593,15594,15595,15596,15597,15598,15599,15600,15601,15602,15603,15604,15605,15606,15607,15608,15609,15610,15611,15612,15613,15614,15615,15616,15617,15618,15619,15620,15621,15622,15623,15624,15625,15626,15627,15628,15629,15630,15631,15632,15633,15634,15635,15636,15637,15638,15639,15640,15641,15642,15643,15644,15645,15646,15647,15648,15649,15650,15651,15652,15653,15654,15655,15656,15657,15658,15659,15660,15661,15662,15663,15664,15665,15666,15667,15668,15669,15670,15671,15672,15673,15674,15675,15676,15677,15678,15679,15680,15681,15682,15683,15684,15685,15686,15687,15688,15689,15690,15691,15692,15693,15694,15695,15696,15697,15698,15699,15700,15701,15702,15703,15704,15705,15706,15707,15708,15709,15710,15711,15712,15713,15714,15715,15716,15717,15718,15719,15720,15721,15722,15723,15724,15725,15726,15727,15728,15729,15730,15731,15732,15733,15734,15735,15736,15737,15738,15739,15740,15741,15742,15743,15744,15745,15746,15747,15748,15749,15750,15751,15752,15753,15754,15755,15756,15757,15758,15759,15760,15761,15762,15763,15764,15765,15766,15767,15768,15769,15770,15771,15772,15773,15774,15775,15776,15777,15778,15779,15780,15781,15782,15783,15784,15785,15786,15787,15788,15789,15790,15791,15792,15793,15794,15795,15796,15797,15798,15799,15800,15801,15802,15803,15804,15805,15806,15807,15808,15809,15810,15811,15812,15813,15814,15815,15816,15817,15818,15819,15820,15821,15822,15823,15824,15825,15826,15827,15828,15829,15830,15831,15832,15833,15834,15835,15836,15837,15838,15839,15840,15841,15842,15843,15844,15845,15846,15847,15848,15849,15850,15851,15852,15853,15854,15855,15856,15857,15858,15859,15860,15861,15862,15863,15864,15865,15866,15867,15868,15869,15870,15871,15872,15873, unused=0)+deltaUZero32(unused) on(15873,15874,15875,15876,15877,15878,15879,15880,15881,15882,15883,15884,15885,15886,15887,15888,15889,15890,15891,15892,15893,15894,15895,15896,15897,15898,15899,15900,15901,15902,15903,15904,15905,15906,15907,15908,15909,15910,15911,15912,15913,15914,15915,15916,15917,15918,15919,15920,15921,15922,15923,15924,15925,15926,15927,15928,15929,15930,15931,15932,15933,15934,15935,15936,15937,15938,15939,15940,15941,15942,15943,15944,15945,15946,15947,15948,15949,15950,15951,15952,15953,15954,15955,15956,15957,15958,15959,15960,15961,15962,15963,15964,15965,15966,15967,15968,15969,15970,15971,15972,15973,15974,15975,15976,15977,15978,15979,15980,15981,15982,15983,15984,15985,15986,15987,15988,15989,15990,15991,15992,15993,15994,15995,15996,15997,15998,15999,16000,16001,16002,16003,16004,16005,16006,16007,16008,16009,16010,16011,16012,16013,16014,16015,16016,16017,16018,16019,16020,16021,16022,16023,16024,16025,16026,16027,16028,16029,16030,16031,16032,16033,16034,16035,16036,16037,16038,16039,16040,16041,16042,16043,16044,16045,16046,16047,16048,16049,16050,16051,16052,16053,16054,16055,16056,16057,16058,16059,16060,16061,16062,16063,16064,16065,16066,16067,16068,16069,16070,16071,16072,16073,16074,16075,16076,16077,16078,16079,16080,16081,16082,16083,16084,16085,16086,16087,16088,16089,16090,16091,16092,16093,16094,16095,16096,16097,16098,16099,16100,16101,16102,16103,16104,16105,16106,16107,16108,16109,16110,16111,16112,16113,16114,16115,16116,16117,16118,16119,16120,16121,16122,16123,16124,16125,16126,16127,16128,16129,16130,16131,16132,16133,16134,16135,16136,16137,16138,16139,16140,16141,16142,16143,16144,16145,16146,16147,16148,16149,16150,16151,16152,16153,16154,16155,16156,16157,16158,16159,16160,16161,16162,16163,16164,16165,16166,16167,16168,16169,16170,16171,16172,16173,16174,16175,16176,16177,16178,16179,16180,16181,16182,16183,16184,16185,16186,16187,16188,16189,16190,16191,16192,16193,16194,16195,16196,16197,16198,16199,16200,16201,16202,16203,16204,16205,16206,16207,16208,16209,16210,16211,16212,16213,16214,16215,16216,16217,16218,16219,16220,16221,16222,16223,16224,16225,16226,16227,16228,16229,16230,16231,16232,16233,16234,16235,16236,16237,16238,16239,16240,16241,16242,16243,16244,16245,16246,16247,16248,16249,16250,16251,16252,16253,16254,16255,16256,16257,16258,16259,16260,16261,16262,16263,16264,16265,16266,16267,16268,16269,16270,16271,16272,16273,16274,16275,16276,16277,16278,16279,16280,16281,16282,16283,16284,16285,16286,16287,16288,16289,16290,16291,16292,16293,16294,16295,16296,16297,16298,16299,16300,16301,16302,16303,16304,16305,16306,16307,16308,16309,16310,16311,16312,16313,16314,16315,16316,16317,16318,16319,16320,16321,16322,16323,16324,16325,16326,16327,16328,16329,16330,16331,16332,16333,16334,16335,16336,16337,16338,16339,16340,16341,16342,16343,16344,16345,16346,16347,16348,16349,16350,16351,16352,16353,16354,16355,16356,16357,16358,16359,16360,16361,16362,16363,16364,16365,16366,16367,16368,16369,16370,16371,16372,16373,16374,16375,16376,16377,16378,16379,16380,16381,16382,16383,16384,16385, unused=0)+deltaUZero33(unused) on(16385,16386,16387,16388,16389,16390, unused=0) + on(theta + 7, unused = 1); 
   49 @     
   50 @     wh[] = bndDirichlet(0, Vh, tgv = -1); 
   51 @ 
   52 @     W(INDC(theta)          Vh.ndof * theta : (Vh.ndof * (theta+1) - 1)) = wh[];
   53 @ 
   54 @     /* compute rhs of weak formulation */
   55 @     varf rhs(unused, v) = -H1(wh, v, Th)       int3d( Th, qfV=DQFVqfV2)(dx(wh)*dx( v) + dy(wh)*dy( v) + dz(wh)*dz( v)) + deltaUZero(unused)deltaUZero1(unused) on(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513, unused=0)+deltaUZero2(unused) on(513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025, unused=0)+deltaUZero3(unused) on(1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1444,1445,1446,1447,1448,1449,1450,1451,1452,1453,1454,1455,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482,1483,1484,1485,1486,1487,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1515,1516,1517,1518,1519,1520,1521,1522,1523,1524,1525,1526,1527,1528,1529,1530,1531,1532,1533,1534,1535,1536,1537, unused=0)+deltaUZero4(unused) on(1537,1538,1539,1540,1541,1542,1543,1544,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1558,1559,1560,1561,1562,1563,1564,1565,1566,1567,1568,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,1595,1596,1597,1598,1599,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1631,1632,1633,1634,1635,1636,1637,1638,1639,1640,1641,1642,1643,1644,1645,1646,1647,1648,1649,1650,1651,1652,1653,1654,1655,1656,1657,1658,1659,1660,1661,1662,1663,1664,1665,1666,1667,1668,1669,1670,1671,1672,1673,1674,1675,1676,1677,1678,1679,1680,1681,1682,1683,1684,1685,1686,1687,1688,1689,1690,1691,1692,1693,1694,1695,1696,1697,1698,1699,1700,1701,1702,1703,1704,1705,1706,1707,1708,1709,1710,1711,1712,1713,1714,1715,1716,1717,1718,1719,1720,1721,1722,1723,1724,1725,1726,1727,1728,1729,1730,1731,1732,1733,1734,1735,1736,1737,1738,1739,1740,1741,1742,1743,1744,1745,1746,1747,1748,1749,1750,1751,1752,1753,1754,1755,1756,1757,1758,1759,1760,1761,1762,1763,1764,1765,1766,1767,1768,1769,1770,1771,1772,1773,1774,1775,1776,1777,1778,1779,1780,1781,1782,1783,1784,1785,1786,1787,1788,1789,1790,1791,1792,1793,1794,1795,1796,1797,1798,1799,1800,1801,1802,1803,1804,1805,1806,1807,1808,1809,1810,1811,1812,1813,1814,1815,1816,1817,1818,1819,1820,1821,1822,1823,1824,1825,1826,1827,1828,1829,1830,1831,1832,1833,1834,1835,1836,1837,1838,1839,1840,1841,1842,1843,1844,1845,1846,1847,1848,1849,1850,1851,1852,1853,1854,1855,1856,1857,1858,1859,1860,1861,1862,1863,1864,1865,1866,1867,1868,1869,1870,1871,1872,1873,1874,1875,1876,1877,1878,1879,1880,1881,1882,1883,1884,1885,1886,1887,1888,1889,1890,1891,1892,1893,1894,1895,1896,1897,1898,1899,1900,1901,1902,1903,1904,1905,1906,1907,1908,1909,1910,1911,1912,1913,1914,1915,1916,1917,1918,1919,1920,1921,1922,1923,1924,1925,1926,1927,1928,1929,1930,1931,1932,1933,1934,1935,1936,1937,1938,1939,1940,1941,1942,1943,1944,1945,1946,1947,1948,1949,1950,1951,1952,1953,1954,1955,1956,1957,1958,1959,1960,1961,1962,1963,1964,1965,1966,1967,1968,1969,1970,1971,1972,1973,1974,1975,1976,1977,1978,1979,1980,1981,1982,1983,1984,1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049, unused=0)+deltaUZero5(unused) on(2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110,2111,2112,2113,2114,2115,2116,2117,2118,2119,2120,2121,2122,2123,2124,2125,2126,2127,2128,2129,2130,2131,2132,2133,2134,2135,2136,2137,2138,2139,2140,2141,2142,2143,2144,2145,2146,2147,2148,2149,2150,2151,2152,2153,2154,2155,2156,2157,2158,2159,2160,2161,2162,2163,2164,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,2182,2183,2184,2185,2186,2187,2188,2189,2190,2191,2192,2193,2194,2195,2196,2197,2198,2199,2200,2201,2202,2203,2204,2205,2206,2207,2208,2209,2210,2211,2212,2213,2214,2215,2216,2217,2218,2219,2220,2221,2222,2223,2224,2225,2226,2227,2228,2229,2230,2231,2232,2233,2234,2235,2236,2237,2238,2239,2240,2241,2242,2243,2244,2245,2246,2247,2248,2249,2250,2251,2252,2253,2254,2255,2256,2257,2258,2259,2260,2261,2262,2263,2264,2265,2266,2267,2268,2269,2270,2271,2272,2273,2274,2275,2276,2277,2278,2279,2280,2281,2282,2283,2284,2285,2286,2287,2288,2289,2290,2291,2292,2293,2294,2295,2296,2297,2298,2299,2300,2301,2302,2303,2304,2305,2306,2307,2308,2309,2310,2311,2312,2313,2314,2315,2316,2317,2318,2319,2320,2321,2322,2323,2324,2325,2326,2327,2328,2329,2330,2331,2332,2333,2334,2335,2336,2337,2338,2339,2340,2341,2342,2343,2344,2345,2346,2347,2348,2349,2350,2351,2352,2353,2354,2355,2356,2357,2358,2359,2360,2361,2362,2363,2364,2365,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2384,2385,2386,2387,2388,2389,2390,2391,2392,2393,2394,2395,2396,2397,2398,2399,2400,2401,2402,2403,2404,2405,2406,2407,2408,2409,2410,2411,2412,2413,2414,2415,2416,2417,2418,2419,2420,2421,2422,2423,2424,2425,2426,2427,2428,2429,2430,2431,2432,2433,2434,2435,2436,2437,2438,2439,2440,2441,2442,2443,2444,2445,2446,2447,2448,2449,2450,2451,2452,2453,2454,2455,2456,2457,2458,2459,2460,2461,2462,2463,2464,2465,2466,2467,2468,2469,2470,2471,2472,2473,2474,2475,2476,2477,2478,2479,2480,2481,2482,2483,2484,2485,2486,2487,2488,2489,2490,2491,2492,2493,2494,2495,2496,2497,2498,2499,2500,2501,2502,2503,2504,2505,2506,2507,2508,2509,2510,2511,2512,2513,2514,2515,2516,2517,2518,2519,2520,2521,2522,2523,2524,2525,2526,2527,2528,2529,2530,2531,2532,2533,2534,2535,2536,2537,2538,2539,2540,2541,2542,2543,2544,2545,2546,2547,2548,2549,2550,2551,2552,2553,2554,2555,2556,2557,2558,2559,2560,2561, unused=0)+deltaUZero6(unused) on(2561,2562,2563,2564,2565,2566,2567,2568,2569,2570,2571,2572,2573,2574,2575,2576,2577,2578,2579,2580,2581,2582,2583,2584,2585,2586,2587,2588,2589,2590,2591,2592,2593,2594,2595,2596,2597,2598,2599,2600,2601,2602,2603,2604,2605,2606,2607,2608,2609,2610,2611,2612,2613,2614,2615,2616,2617,2618,2619,2620,2621,2622,2623,2624,2625,2626,2627,2628,2629,2630,2631,2632,2633,2634,2635,2636,2637,2638,2639,2640,2641,2642,2643,2644,2645,2646,2647,2648,2649,2650,2651,2652,2653,2654,2655,2656,2657,2658,2659,2660,2661,2662,2663,2664,2665,2666,2667,2668,2669,2670,2671,2672,2673,2674,2675,2676,2677,2678,2679,2680,2681,2682,2683,2684,2685,2686,2687,2688,2689,2690,2691,2692,2693,2694,2695,2696,2697,2698,2699,2700,2701,2702,2703,2704,2705,2706,2707,2708,2709,2710,2711,2712,2713,2714,2715,2716,2717,2718,2719,2720,2721,2722,2723,2724,2725,2726,2727,2728,2729,2730,2731,2732,2733,2734,2735,2736,2737,2738,2739,2740,2741,2742,2743,2744,2745,2746,2747,2748,2749,2750,2751,2752,2753,2754,2755,2756,2757,2758,2759,2760,2761,2762,2763,2764,2765,2766,2767,2768,2769,2770,2771,2772,2773,2774,2775,2776,2777,2778,2779,2780,2781,2782,2783,2784,2785,2786,2787,2788,2789,2790,2791,2792,2793,2794,2795,2796,2797,2798,2799,2800,2801,2802,2803,2804,2805,2806,2807,2808,2809,2810,2811,2812,2813,2814,2815,2816,2817,2818,2819,2820,2821,2822,2823,2824,2825,2826,2827,2828,2829,2830,2831,2832,2833,2834,2835,2836,2837,2838,2839,2840,2841,2842,2843,2844,2845,2846,2847,2848,2849,2850,2851,2852,2853,2854,2855,2856,2857,2858,2859,2860,2861,2862,2863,2864,2865,2866,2867,2868,2869,2870,2871,2872,2873,2874,2875,2876,2877,2878,2879,2880,2881,2882,2883,2884,2885,2886,2887,2888,2889,2890,2891,2892,2893,2894,2895,2896,2897,2898,2899,2900,2901,2902,2903,2904,2905,2906,2907,2908,2909,2910,2911,2912,2913,2914,2915,2916,2917,2918,2919,2920,2921,2922,2923,2924,2925,2926,2927,2928,2929,2930,2931,2932,2933,2934,2935,2936,2937,2938,2939,2940,2941,2942,2943,2944,2945,2946,2947,2948,2949,2950,2951,2952,2953,2954,2955,2956,2957,2958,2959,2960,2961,2962,2963,2964,2965,2966,2967,2968,2969,2970,2971,2972,2973,2974,2975,2976,2977,2978,2979,2980,2981,2982,2983,2984,2985,2986,2987,2988,2989,2990,2991,2992,2993,2994,2995,2996,2997,2998,2999,3000,3001,3002,3003,3004,3005,3006,3007,3008,3009,3010,3011,3012,3013,3014,3015,3016,3017,3018,3019,3020,3021,3022,3023,3024,3025,3026,3027,3028,3029,3030,3031,3032,3033,3034,3035,3036,3037,3038,3039,3040,3041,3042,3043,3044,3045,3046,3047,3048,3049,3050,3051,3052,3053,3054,3055,3056,3057,3058,3059,3060,3061,3062,3063,3064,3065,3066,3067,3068,3069,3070,3071,3072,3073, unused=0)+deltaUZero7(unused) on(3073,3074,3075,3076,3077,3078,3079,3080,3081,3082,3083,3084,3085,3086,3087,3088,3089,3090,3091,3092,3093,3094,3095,3096,3097,3098,3099,3100,3101,3102,3103,3104,3105,3106,3107,3108,3109,3110,3111,3112,3113,3114,3115,3116,3117,3118,3119,3120,3121,3122,3123,3124,3125,3126,3127,3128,3129,3130,3131,3132,3133,3134,3135,3136,3137,3138,3139,3140,3141,3142,3143,3144,3145,3146,3147,3148,3149,3150,3151,3152,3153,3154,3155,3156,3157,3158,3159,3160,3161,3162,3163,3164,3165,3166,3167,3168,3169,3170,3171,3172,3173,3174,3175,3176,3177,3178,3179,3180,3181,3182,3183,3184,3185,3186,3187,3188,3189,3190,3191,3192,3193,3194,3195,3196,3197,3198,3199,3200,3201,3202,3203,3204,3205,3206,3207,3208,3209,3210,3211,3212,3213,3214,3215,3216,3217,3218,3219,3220,3221,3222,3223,3224,3225,3226,3227,3228,3229,3230,3231,3232,3233,3234,3235,3236,3237,3238,3239,3240,3241,3242,3243,3244,3245,3246,3247,3248,3249,3250,3251,3252,3253,3254,3255,3256,3257,3258,3259,3260,3261,3262,3263,3264,3265,3266,3267,3268,3269,3270,3271,3272,3273,3274,3275,3276,3277,3278,3279,3280,3281,3282,3283,3284,3285,3286,3287,3288,3289,3290,3291,3292,3293,3294,3295,3296,3297,3298,3299,3300,3301,3302,3303,3304,3305,3306,3307,3308,3309,3310,3311,3312,3313,3314,3315,3316,3317,3318,3319,3320,3321,3322,3323,3324,3325,3326,3327,3328,3329,3330,3331,3332,3333,3334,3335,3336,3337,3338,3339,3340,3341,3342,3343,3344,3345,3346,3347,3348,3349,3350,3351,3352,3353,3354,3355,3356,3357,3358,3359,3360,3361,3362,3363,3364,3365,3366,3367,3368,3369,3370,3371,3372,3373,3374,3375,3376,3377,3378,3379,3380,3381,3382,3383,3384,3385,3386,3387,3388,3389,3390,3391,3392,3393,3394,3395,3396,3397,3398,3399,3400,3401,3402,3403,3404,3405,3406,3407,3408,3409,3410,3411,3412,3413,3414,3415,3416,3417,3418,3419,3420,3421,3422,3423,3424,3425,3426,3427,3428,3429,3430,3431,3432,3433,3434,3435,3436,3437,3438,3439,3440,3441,3442,3443,3444,3445,3446,3447,3448,3449,3450,3451,3452,3453,3454,3455,3456,3457,3458,3459,3460,3461,3462,3463,3464,3465,3466,3467,3468,3469,3470,3471,3472,3473,3474,3475,3476,3477,3478,3479,3480,3481,3482,3483,3484,3485,3486,3487,3488,3489,3490,3491,3492,3493,3494,3495,3496,3497,3498,3499,3500,3501,3502,3503,3504,3505,3506,3507,3508,3509,3510,3511,3512,3513,3514,3515,3516,3517,3518,3519,3520,3521,3522,3523,3524,3525,3526,3527,3528,3529,3530,3531,3532,3533,3534,3535,3536,3537,3538,3539,3540,3541,3542,3543,3544,3545,3546,3547,3548,3549,3550,3551,3552,3553,3554,3555,3556,3557,3558,3559,3560,3561,3562,3563,3564,3565,3566,3567,3568,3569,3570,3571,3572,3573,3574,3575,3576,3577,3578,3579,3580,3581,3582,3583,3584,3585, unused=0)+deltaUZero8(unused) on(3585,3586,3587,3588,3589,3590,3591,3592,3593,3594,3595,3596,3597,3598,3599,3600,3601,3602,3603,3604,3605,3606,3607,3608,3609,3610,3611,3612,3613,3614,3615,3616,3617,3618,3619,3620,3621,3622,3623,3624,3625,3626,3627,3628,3629,3630,3631,3632,3633,3634,3635,3636,3637,3638,3639,3640,3641,3642,3643,3644,3645,3646,3647,3648,3649,3650,3651,3652,3653,3654,3655,3656,3657,3658,3659,3660,3661,3662,3663,3664,3665,3666,3667,3668,3669,3670,3671,3672,3673,3674,3675,3676,3677,3678,3679,3680,3681,3682,3683,3684,3685,3686,3687,3688,3689,3690,3691,3692,3693,3694,3695,3696,3697,3698,3699,3700,3701,3702,3703,3704,3705,3706,3707,3708,3709,3710,3711,3712,3713,3714,3715,3716,3717,3718,3719,3720,3721,3722,3723,3724,3725,3726,3727,3728,3729,3730,3731,3732,3733,3734,3735,3736,3737,3738,3739,3740,3741,3742,3743,3744,3745,3746,3747,3748,3749,3750,3751,3752,3753,3754,3755,3756,3757,3758,3759,3760,3761,3762,3763,3764,3765,3766,3767,3768,3769,3770,3771,3772,3773,3774,3775,3776,3777,3778,3779,3780,3781,3782,3783,3784,3785,3786,3787,3788,3789,3790,3791,3792,3793,3794,3795,3796,3797,3798,3799,3800,3801,3802,3803,3804,3805,3806,3807,3808,3809,3810,3811,3812,3813,3814,3815,3816,3817,3818,3819,3820,3821,3822,3823,3824,3825,3826,3827,3828,3829,3830,3831,3832,3833,3834,3835,3836,3837,3838,3839,3840,3841,3842,3843,3844,3845,3846,3847,3848,3849,3850,3851,3852,3853,3854,3855,3856,3857,3858,3859,3860,3861,3862,3863,3864,3865,3866,3867,3868,3869,3870,3871,3872,3873,3874,3875,3876,3877,3878,3879,3880,3881,3882,3883,3884,3885,3886,3887,3888,3889,3890,3891,3892,3893,3894,3895,3896,3897,3898,3899,3900,3901,3902,3903,3904,3905,3906,3907,3908,3909,3910,3911,3912,3913,3914,3915,3916,3917,3918,3919,3920,3921,3922,3923,3924,3925,3926,3927,3928,3929,3930,3931,3932,3933,3934,3935,3936,3937,3938,3939,3940,3941,3942,3943,3944,3945,3946,3947,3948,3949,3950,3951,3952,3953,3954,3955,3956,3957,3958,3959,3960,3961,3962,3963,3964,3965,3966,3967,3968,3969,3970,3971,3972,3973,3974,3975,3976,3977,3978,3979,3980,3981,3982,3983,3984,3985,3986,3987,3988,3989,3990,3991,3992,3993,3994,3995,3996,3997,3998,3999,4000,4001,4002,4003,4004,4005,4006,4007,4008,4009,4010,4011,4012,4013,4014,4015,4016,4017,4018,4019,4020,4021,4022,4023,4024,4025,4026,4027,4028,4029,4030,4031,4032,4033,4034,4035,4036,4037,4038,4039,4040,4041,4042,4043,4044,4045,4046,4047,4048,4049,4050,4051,4052,4053,4054,4055,4056,4057,4058,4059,4060,4061,4062,4063,4064,4065,4066,4067,4068,4069,4070,4071,4072,4073,4074,4075,4076,4077,4078,4079,4080,4081,4082,4083,4084,4085,4086,4087,4088,4089,4090,4091,4092,4093,4094,4095,4096,4097, unused=0)+deltaUZero9(unused) on(4097,4098,4099,4100,4101,4102,4103,4104,4105,4106,4107,4108,4109,4110,4111,4112,4113,4114,4115,4116,4117,4118,4119,4120,4121,4122,4123,4124,4125,4126,4127,4128,4129,4130,4131,4132,4133,4134,4135,4136,4137,4138,4139,4140,4141,4142,4143,4144,4145,4146,4147,4148,4149,4150,4151,4152,4153,4154,4155,4156,4157,4158,4159,4160,4161,4162,4163,4164,4165,4166,4167,4168,4169,4170,4171,4172,4173,4174,4175,4176,4177,4178,4179,4180,4181,4182,4183,4184,4185,4186,4187,4188,4189,4190,4191,4192,4193,4194,4195,4196,4197,4198,4199,4200,4201,4202,4203,4204,4205,4206,4207,4208,4209,4210,4211,4212,4213,4214,4215,4216,4217,4218,4219,4220,4221,4222,4223,4224,4225,4226,4227,4228,4229,4230,4231,4232,4233,4234,4235,4236,4237,4238,4239,4240,4241,4242,4243,4244,4245,4246,4247,4248,4249,4250,4251,4252,4253,4254,4255,4256,4257,4258,4259,4260,4261,4262,4263,4264,4265,4266,4267,4268,4269,4270,4271,4272,4273,4274,4275,4276,4277,4278,4279,4280,4281,4282,4283,4284,4285,4286,4287,4288,4289,4290,4291,4292,4293,4294,4295,4296,4297,4298,4299,4300,4301,4302,4303,4304,4305,4306,4307,4308,4309,4310,4311,4312,4313,4314,4315,4316,4317,4318,4319,4320,4321,4322,4323,4324,4325,4326,4327,4328,4329,4330,4331,4332,4333,4334,4335,4336,4337,4338,4339,4340,4341,4342,4343,4344,4345,4346,4347,4348,4349,4350,4351,4352,4353,4354,4355,4356,4357,4358,4359,4360,4361,4362,4363,4364,4365,4366,4367,4368,4369,4370,4371,4372,4373,4374,4375,4376,4377,4378,4379,4380,4381,4382,4383,4384,4385,4386,4387,4388,4389,4390,4391,4392,4393,4394,4395,4396,4397,4398,4399,4400,4401,4402,4403,4404,4405,4406,4407,4408,4409,4410,4411,4412,4413,4414,4415,4416,4417,4418,4419,4420,4421,4422,4423,4424,4425,4426,4427,4428,4429,4430,4431,4432,4433,4434,4435,4436,4437,4438,4439,4440,4441,4442,4443,4444,4445,4446,4447,4448,4449,4450,4451,4452,4453,4454,4455,4456,4457,4458,4459,4460,4461,4462,4463,4464,4465,4466,4467,4468,4469,4470,4471,4472,4473,4474,4475,4476,4477,4478,4479,4480,4481,4482,4483,4484,4485,4486,4487,4488,4489,4490,4491,4492,4493,4494,4495,4496,4497,4498,4499,4500,4501,4502,4503,4504,4505,4506,4507,4508,4509,4510,4511,4512,4513,4514,4515,4516,4517,4518,4519,4520,4521,4522,4523,4524,4525,4526,4527,4528,4529,4530,4531,4532,4533,4534,4535,4536,4537,4538,4539,4540,4541,4542,4543,4544,4545,4546,4547,4548,4549,4550,4551,4552,4553,4554,4555,4556,4557,4558,4559,4560,4561,4562,4563,4564,4565,4566,4567,4568,4569,4570,4571,4572,4573,4574,4575,4576,4577,4578,4579,4580,4581,4582,4583,4584,4585,4586,4587,4588,4589,4590,4591,4592,4593,4594,4595,4596,4597,4598,4599,4600,4601,4602,4603,4604,4605,4606,4607,4608,4609, unused=0)+deltaUZero10(unused) on(4609,4610,4611,4612,4613,4614,4615,4616,4617,4618,4619,4620,4621,4622,4623,4624,4625,4626,4627,4628,4629,4630,4631,4632,4633,4634,4635,4636,4637,4638,4639,4640,4641,4642,4643,4644,4645,4646,4647,4648,4649,4650,4651,4652,4653,4654,4655,4656,4657,4658,4659,4660,4661,4662,4663,4664,4665,4666,4667,4668,4669,4670,4671,4672,4673,4674,4675,4676,4677,4678,4679,4680,4681,4682,4683,4684,4685,4686,4687,4688,4689,4690,4691,4692,4693,4694,4695,4696,4697,4698,4699,4700,4701,4702,4703,4704,4705,4706,4707,4708,4709,4710,4711,4712,4713,4714,4715,4716,4717,4718,4719,4720,4721,4722,4723,4724,4725,4726,4727,4728,4729,4730,4731,4732,4733,4734,4735,4736,4737,4738,4739,4740,4741,4742,4743,4744,4745,4746,4747,4748,4749,4750,4751,4752,4753,4754,4755,4756,4757,4758,4759,4760,4761,4762,4763,4764,4765,4766,4767,4768,4769,4770,4771,4772,4773,4774,4775,4776,4777,4778,4779,4780,4781,4782,4783,4784,4785,4786,4787,4788,4789,4790,4791,4792,4793,4794,4795,4796,4797,4798,4799,4800,4801,4802,4803,4804,4805,4806,4807,4808,4809,4810,4811,4812,4813,4814,4815,4816,4817,4818,4819,4820,4821,4822,4823,4824,4825,4826,4827,4828,4829,4830,4831,4832,4833,4834,4835,4836,4837,4838,4839,4840,4841,4842,4843,4844,4845,4846,4847,4848,4849,4850,4851,4852,4853,4854,4855,4856,4857,4858,4859,4860,4861,4862,4863,4864,4865,4866,4867,4868,4869,4870,4871,4872,4873,4874,4875,4876,4877,4878,4879,4880,4881,4882,4883,4884,4885,4886,4887,4888,4889,4890,4891,4892,4893,4894,4895,4896,4897,4898,4899,4900,4901,4902,4903,4904,4905,4906,4907,4908,4909,4910,4911,4912,4913,4914,4915,4916,4917,4918,4919,4920,4921,4922,4923,4924,4925,4926,4927,4928,4929,4930,4931,4932,4933,4934,4935,4936,4937,4938,4939,4940,4941,4942,4943,4944,4945,4946,4947,4948,4949,4950,4951,4952,4953,4954,4955,4956,4957,4958,4959,4960,4961,4962,4963,4964,4965,4966,4967,4968,4969,4970,4971,4972,4973,4974,4975,4976,4977,4978,4979,4980,4981,4982,4983,4984,4985,4986,4987,4988,4989,4990,4991,4992,4993,4994,4995,4996,4997,4998,4999,5000,5001,5002,5003,5004,5005,5006,5007,5008,5009,5010,5011,5012,5013,5014,5015,5016,5017,5018,5019,5020,5021,5022,5023,5024,5025,5026,5027,5028,5029,5030,5031,5032,5033,5034,5035,5036,5037,5038,5039,5040,5041,5042,5043,5044,5045,5046,5047,5048,5049,5050,5051,5052,5053,5054,5055,5056,5057,5058,5059,5060,5061,5062,5063,5064,5065,5066,5067,5068,5069,5070,5071,5072,5073,5074,5075,5076,5077,5078,5079,5080,5081,5082,5083,5084,5085,5086,5087,5088,5089,5090,5091,5092,5093,5094,5095,5096,5097,5098,5099,5100,5101,5102,5103,5104,5105,5106,5107,5108,5109,5110,5111,5112,5113,5114,5115,5116,5117,5118,5119,5120,5121, unused=0)+deltaUZero11(unused) on(5121,5122,5123,5124,5125,5126,5127,5128,5129,5130,5131,5132,5133,5134,5135,5136,5137,5138,5139,5140,5141,5142,5143,5144,5145,5146,5147,5148,5149,5150,5151,5152,5153,5154,5155,5156,5157,5158,5159,5160,5161,5162,5163,5164,5165,5166,5167,5168,5169,5170,5171,5172,5173,5174,5175,5176,5177,5178,5179,5180,5181,5182,5183,5184,5185,5186,5187,5188,5189,5190,5191,5192,5193,5194,5195,5196,5197,5198,5199,5200,5201,5202,5203,5204,5205,5206,5207,5208,5209,5210,5211,5212,5213,5214,5215,5216,5217,5218,5219,5220,5221,5222,5223,5224,5225,5226,5227,5228,5229,5230,5231,5232,5233,5234,5235,5236,5237,5238,5239,5240,5241,5242,5243,5244,5245,5246,5247,5248,5249,5250,5251,5252,5253,5254,5255,5256,5257,5258,5259,5260,5261,5262,5263,5264,5265,5266,5267,5268,5269,5270,5271,5272,5273,5274,5275,5276,5277,5278,5279,5280,5281,5282,5283,5284,5285,5286,5287,5288,5289,5290,5291,5292,5293,5294,5295,5296,5297,5298,5299,5300,5301,5302,5303,5304,5305,5306,5307,5308,5309,5310,5311,5312,5313,5314,5315,5316,5317,5318,5319,5320,5321,5322,5323,5324,5325,5326,5327,5328,5329,5330,5331,5332,5333,5334,5335,5336,5337,5338,5339,5340,5341,5342,5343,5344,5345,5346,5347,5348,5349,5350,5351,5352,5353,5354,5355,5356,5357,5358,5359,5360,5361,5362,5363,5364,5365,5366,5367,5368,5369,5370,5371,5372,5373,5374,5375,5376,5377,5378,5379,5380,5381,5382,5383,5384,5385,5386,5387,5388,5389,5390,5391,5392,5393,5394,5395,5396,5397,5398,5399,5400,5401,5402,5403,5404,5405,5406,5407,5408,5409,5410,5411,5412,5413,5414,5415,5416,5417,5418,5419,5420,5421,5422,5423,5424,5425,5426,5427,5428,5429,5430,5431,5432,5433,5434,5435,5436,5437,5438,5439,5440,5441,5442,5443,5444,5445,5446,5447,5448,5449,5450,5451,5452,5453,5454,5455,5456,5457,5458,5459,5460,5461,5462,5463,5464,5465,5466,5467,5468,5469,5470,5471,5472,5473,5474,5475,5476,5477,5478,5479,5480,5481,5482,5483,5484,5485,5486,5487,5488,5489,5490,5491,5492,5493,5494,5495,5496,5497,5498,5499,5500,5501,5502,5503,5504,5505,5506,5507,5508,5509,5510,5511,5512,5513,5514,5515,5516,5517,5518,5519,5520,5521,5522,5523,5524,5525,5526,5527,5528,5529,5530,5531,5532,5533,5534,5535,5536,5537,5538,5539,5540,5541,5542,5543,5544,5545,5546,5547,5548,5549,5550,5551,5552,5553,5554,5555,5556,5557,5558,5559,5560,5561,5562,5563,5564,5565,5566,5567,5568,5569,5570,5571,5572,5573,5574,5575,5576,5577,5578,5579,5580,5581,5582,5583,5584,5585,5586,5587,5588,5589,5590,5591,5592,5593,5594,5595,5596,5597,5598,5599,5600,5601,5602,5603,5604,5605,5606,5607,5608,5609,5610,5611,5612,5613,5614,5615,5616,5617,5618,5619,5620,5621,5622,5623,5624,5625,5626,5627,5628,5629,5630,5631,5632,5633, unused=0)+deltaUZero12(unused) on(5633,5634,5635,5636,5637,5638,5639,5640,5641,5642,5643,5644,5645,5646,5647,5648,5649,5650,5651,5652,5653,5654,5655,5656,5657,5658,5659,5660,5661,5662,5663,5664,5665,5666,5667,5668,5669,5670,5671,5672,5673,5674,5675,5676,5677,5678,5679,5680,5681,5682,5683,5684,5685,5686,5687,5688,5689,5690,5691,5692,5693,5694,5695,5696,5697,5698,5699,5700,5701,5702,5703,5704,5705,5706,5707,5708,5709,5710,5711,5712,5713,5714,5715,5716,5717,5718,5719,5720,5721,5722,5723,5724,5725,5726,5727,5728,5729,5730,5731,5732,5733,5734,5735,5736,5737,5738,5739,5740,5741,5742,5743,5744,5745,5746,5747,5748,5749,5750,5751,5752,5753,5754,5755,5756,5757,5758,5759,5760,5761,5762,5763,5764,5765,5766,5767,5768,5769,5770,5771,5772,5773,5774,5775,5776,5777,5778,5779,5780,5781,5782,5783,5784,5785,5786,5787,5788,5789,5790,5791,5792,5793,5794,5795,5796,5797,5798,5799,5800,5801,5802,5803,5804,5805,5806,5807,5808,5809,5810,5811,5812,5813,5814,5815,5816,5817,5818,5819,5820,5821,5822,5823,5824,5825,5826,5827,5828,5829,5830,5831,5832,5833,5834,5835,5836,5837,5838,5839,5840,5841,5842,5843,5844,5845,5846,5847,5848,5849,5850,5851,5852,5853,5854,5855,5856,5857,5858,5859,5860,5861,5862,5863,5864,5865,5866,5867,5868,5869,5870,5871,5872,5873,5874,5875,5876,5877,5878,5879,5880,5881,5882,5883,5884,5885,5886,5887,5888,5889,5890,5891,5892,5893,5894,5895,5896,5897,5898,5899,5900,5901,5902,5903,5904,5905,5906,5907,5908,5909,5910,5911,5912,5913,5914,5915,5916,5917,5918,5919,5920,5921,5922,5923,5924,5925,5926,5927,5928,5929,5930,5931,5932,5933,5934,5935,5936,5937,5938,5939,5940,5941,5942,5943,5944,5945,5946,5947,5948,5949,5950,5951,5952,5953,5954,5955,5956,5957,5958,5959,5960,5961,5962,5963,5964,5965,5966,5967,5968,5969,5970,5971,5972,5973,5974,5975,5976,5977,5978,5979,5980,5981,5982,5983,5984,5985,5986,5987,5988,5989,5990,5991,5992,5993,5994,5995,5996,5997,5998,5999,6000,6001,6002,6003,6004,6005,6006,6007,6008,6009,6010,6011,6012,6013,6014,6015,6016,6017,6018,6019,6020,6021,6022,6023,6024,6025,6026,6027,6028,6029,6030,6031,6032,6033,6034,6035,6036,6037,6038,6039,6040,6041,6042,6043,6044,6045,6046,6047,6048,6049,6050,6051,6052,6053,6054,6055,6056,6057,6058,6059,6060,6061,6062,6063,6064,6065,6066,6067,6068,6069,6070,6071,6072,6073,6074,6075,6076,6077,6078,6079,6080,6081,6082,6083,6084,6085,6086,6087,6088,6089,6090,6091,6092,6093,6094,6095,6096,6097,6098,6099,6100,6101,6102,6103,6104,6105,6106,6107,6108,6109,6110,6111,6112,6113,6114,6115,6116,6117,6118,6119,6120,6121,6122,6123,6124,6125,6126,6127,6128,6129,6130,6131,6132,6133,6134,6135,6136,6137,6138,6139,6140,6141,6142,6143,6144,6145, unused=0)+deltaUZero13(unused) on(6145,6146,6147,6148,6149,6150,6151,6152,6153,6154,6155,6156,6157,6158,6159,6160,6161,6162,6163,6164,6165,6166,6167,6168,6169,6170,6171,6172,6173,6174,6175,6176,6177,6178,6179,6180,6181,6182,6183,6184,6185,6186,6187,6188,6189,6190,6191,6192,6193,6194,6195,6196,6197,6198,6199,6200,6201,6202,6203,6204,6205,6206,6207,6208,6209,6210,6211,6212,6213,6214,6215,6216,6217,6218,6219,6220,6221,6222,6223,6224,6225,6226,6227,6228,6229,6230,6231,6232,6233,6234,6235,6236,6237,6238,6239,6240,6241,6242,6243,6244,6245,6246,6247,6248,6249,6250,6251,6252,6253,6254,6255,6256,6257,6258,6259,6260,6261,6262,6263,6264,6265,6266,6267,6268,6269,6270,6271,6272,6273,6274,6275,6276,6277,6278,6279,6280,6281,6282,6283,6284,6285,6286,6287,6288,6289,6290,6291,6292,6293,6294,6295,6296,6297,6298,6299,6300,6301,6302,6303,6304,6305,6306,6307,6308,6309,6310,6311,6312,6313,6314,6315,6316,6317,6318,6319,6320,6321,6322,6323,6324,6325,6326,6327,6328,6329,6330,6331,6332,6333,6334,6335,6336,6337,6338,6339,6340,6341,6342,6343,6344,6345,6346,6347,6348,6349,6350,6351,6352,6353,6354,6355,6356,6357,6358,6359,6360,6361,6362,6363,6364,6365,6366,6367,6368,6369,6370,6371,6372,6373,6374,6375,6376,6377,6378,6379,6380,6381,6382,6383,6384,6385,6386,6387,6388,6389,6390,6391,6392,6393,6394,6395,6396,6397,6398,6399,6400,6401,6402,6403,6404,6405,6406,6407,6408,6409,6410,6411,6412,6413,6414,6415,6416,6417,6418,6419,6420,6421,6422,6423,6424,6425,6426,6427,6428,6429,6430,6431,6432,6433,6434,6435,6436,6437,6438,6439,6440,6441,6442,6443,6444,6445,6446,6447,6448,6449,6450,6451,6452,6453,6454,6455,6456,6457,6458,6459,6460,6461,6462,6463,6464,6465,6466,6467,6468,6469,6470,6471,6472,6473,6474,6475,6476,6477,6478,6479,6480,6481,6482,6483,6484,6485,6486,6487,6488,6489,6490,6491,6492,6493,6494,6495,6496,6497,6498,6499,6500,6501,6502,6503,6504,6505,6506,6507,6508,6509,6510,6511,6512,6513,6514,6515,6516,6517,6518,6519,6520,6521,6522,6523,6524,6525,6526,6527,6528,6529,6530,6531,6532,6533,6534,6535,6536,6537,6538,6539,6540,6541,6542,6543,6544,6545,6546,6547,6548,6549,6550,6551,6552,6553,6554,6555,6556,6557,6558,6559,6560,6561,6562,6563,6564,6565,6566,6567,6568,6569,6570,6571,6572,6573,6574,6575,6576,6577,6578,6579,6580,6581,6582,6583,6584,6585,6586,6587,6588,6589,6590,6591,6592,6593,6594,6595,6596,6597,6598,6599,6600,6601,6602,6603,6604,6605,6606,6607,6608,6609,6610,6611,6612,6613,6614,6615,6616,6617,6618,6619,6620,6621,6622,6623,6624,6625,6626,6627,6628,6629,6630,6631,6632,6633,6634,6635,6636,6637,6638,6639,6640,6641,6642,6643,6644,6645,6646,6647,6648,6649,6650,6651,6652,6653,6654,6655,6656,6657, unused=0)+deltaUZero14(unused) on(6657,6658,6659,6660,6661,6662,6663,6664,6665,6666,6667,6668,6669,6670,6671,6672,6673,6674,6675,6676,6677,6678,6679,6680,6681,6682,6683,6684,6685,6686,6687,6688,6689,6690,6691,6692,6693,6694,6695,6696,6697,6698,6699,6700,6701,6702,6703,6704,6705,6706,6707,6708,6709,6710,6711,6712,6713,6714,6715,6716,6717,6718,6719,6720,6721,6722,6723,6724,6725,6726,6727,6728,6729,6730,6731,6732,6733,6734,6735,6736,6737,6738,6739,6740,6741,6742,6743,6744,6745,6746,6747,6748,6749,6750,6751,6752,6753,6754,6755,6756,6757,6758,6759,6760,6761,6762,6763,6764,6765,6766,6767,6768,6769,6770,6771,6772,6773,6774,6775,6776,6777,6778,6779,6780,6781,6782,6783,6784,6785,6786,6787,6788,6789,6790,6791,6792,6793,6794,6795,6796,6797,6798,6799,6800,6801,6802,6803,6804,6805,6806,6807,6808,6809,6810,6811,6812,6813,6814,6815,6816,6817,6818,6819,6820,6821,6822,6823,6824,6825,6826,6827,6828,6829,6830,6831,6832,6833,6834,6835,6836,6837,6838,6839,6840,6841,6842,6843,6844,6845,6846,6847,6848,6849,6850,6851,6852,6853,6854,6855,6856,6857,6858,6859,6860,6861,6862,6863,6864,6865,6866,6867,6868,6869,6870,6871,6872,6873,6874,6875,6876,6877,6878,6879,6880,6881,6882,6883,6884,6885,6886,6887,6888,6889,6890,6891,6892,6893,6894,6895,6896,6897,6898,6899,6900,6901,6902,6903,6904,6905,6906,6907,6908,6909,6910,6911,6912,6913,6914,6915,6916,6917,6918,6919,6920,6921,6922,6923,6924,6925,6926,6927,6928,6929,6930,6931,6932,6933,6934,6935,6936,6937,6938,6939,6940,6941,6942,6943,6944,6945,6946,6947,6948,6949,6950,6951,6952,6953,6954,6955,6956,6957,6958,6959,6960,6961,6962,6963,6964,6965,6966,6967,6968,6969,6970,6971,6972,6973,6974,6975,6976,6977,6978,6979,6980,6981,6982,6983,6984,6985,6986,6987,6988,6989,6990,6991,6992,6993,6994,6995,6996,6997,6998,6999,7000,7001,7002,7003,7004,7005,7006,7007,7008,7009,7010,7011,7012,7013,7014,7015,7016,7017,7018,7019,7020,7021,7022,7023,7024,7025,7026,7027,7028,7029,7030,7031,7032,7033,7034,7035,7036,7037,7038,7039,7040,7041,7042,7043,7044,7045,7046,7047,7048,7049,7050,7051,7052,7053,7054,7055,7056,7057,7058,7059,7060,7061,7062,7063,7064,7065,7066,7067,7068,7069,7070,7071,7072,7073,7074,7075,7076,7077,7078,7079,7080,7081,7082,7083,7084,7085,7086,7087,7088,7089,7090,7091,7092,7093,7094,7095,7096,7097,7098,7099,7100,7101,7102,7103,7104,7105,7106,7107,7108,7109,7110,7111,7112,7113,7114,7115,7116,7117,7118,7119,7120,7121,7122,7123,7124,7125,7126,7127,7128,7129,7130,7131,7132,7133,7134,7135,7136,7137,7138,7139,7140,7141,7142,7143,7144,7145,7146,7147,7148,7149,7150,7151,7152,7153,7154,7155,7156,7157,7158,7159,7160,7161,7162,7163,7164,7165,7166,7167,7168,7169, unused=0)+deltaUZero15(unused) on(7169,7170,7171,7172,7173,7174,7175,7176,7177,7178,7179,7180,7181,7182,7183,7184,7185,7186,7187,7188,7189,7190,7191,7192,7193,7194,7195,7196,7197,7198,7199,7200,7201,7202,7203,7204,7205,7206,7207,7208,7209,7210,7211,7212,7213,7214,7215,7216,7217,7218,7219,7220,7221,7222,7223,7224,7225,7226,7227,7228,7229,7230,7231,7232,7233,7234,7235,7236,7237,7238,7239,7240,7241,7242,7243,7244,7245,7246,7247,7248,7249,7250,7251,7252,7253,7254,7255,7256,7257,7258,7259,7260,7261,7262,7263,7264,7265,7266,7267,7268,7269,7270,7271,7272,7273,7274,7275,7276,7277,7278,7279,7280,7281,7282,7283,7284,7285,7286,7287,7288,7289,7290,7291,7292,7293,7294,7295,7296,7297,7298,7299,7300,7301,7302,7303,7304,7305,7306,7307,7308,7309,7310,7311,7312,7313,7314,7315,7316,7317,7318,7319,7320,7321,7322,7323,7324,7325,7326,7327,7328,7329,7330,7331,7332,7333,7334,7335,7336,7337,7338,7339,7340,7341,7342,7343,7344,7345,7346,7347,7348,7349,7350,7351,7352,7353,7354,7355,7356,7357,7358,7359,7360,7361,7362,7363,7364,7365,7366,7367,7368,7369,7370,7371,7372,7373,7374,7375,7376,7377,7378,7379,7380,7381,7382,7383,7384,7385,7386,7387,7388,7389,7390,7391,7392,7393,7394,7395,7396,7397,7398,7399,7400,7401,7402,7403,7404,7405,7406,7407,7408,7409,7410,7411,7412,7413,7414,7415,7416,7417,7418,7419,7420,7421,7422,7423,7424,7425,7426,7427,7428,7429,7430,7431,7432,7433,7434,7435,7436,7437,7438,7439,7440,7441,7442,7443,7444,7445,7446,7447,7448,7449,7450,7451,7452,7453,7454,7455,7456,7457,7458,7459,7460,7461,7462,7463,7464,7465,7466,7467,7468,7469,7470,7471,7472,7473,7474,7475,7476,7477,7478,7479,7480,7481,7482,7483,7484,7485,7486,7487,7488,7489,7490,7491,7492,7493,7494,7495,7496,7497,7498,7499,7500,7501,7502,7503,7504,7505,7506,7507,7508,7509,7510,7511,7512,7513,7514,7515,7516,7517,7518,7519,7520,7521,7522,7523,7524,7525,7526,7527,7528,7529,7530,7531,7532,7533,7534,7535,7536,7537,7538,7539,7540,7541,7542,7543,7544,7545,7546,7547,7548,7549,7550,7551,7552,7553,7554,7555,7556,7557,7558,7559,7560,7561,7562,7563,7564,7565,7566,7567,7568,7569,7570,7571,7572,7573,7574,7575,7576,7577,7578,7579,7580,7581,7582,7583,7584,7585,7586,7587,7588,7589,7590,7591,7592,7593,7594,7595,7596,7597,7598,7599,7600,7601,7602,7603,7604,7605,7606,7607,7608,7609,7610,7611,7612,7613,7614,7615,7616,7617,7618,7619,7620,7621,7622,7623,7624,7625,7626,7627,7628,7629,7630,7631,7632,7633,7634,7635,7636,7637,7638,7639,7640,7641,7642,7643,7644,7645,7646,7647,7648,7649,7650,7651,7652,7653,7654,7655,7656,7657,7658,7659,7660,7661,7662,7663,7664,7665,7666,7667,7668,7669,7670,7671,7672,7673,7674,7675,7676,7677,7678,7679,7680,7681, unused=0)+deltaUZero16(unused) on(7681,7682,7683,7684,7685,7686,7687,7688,7689,7690,7691,7692,7693,7694,7695,7696,7697,7698,7699,7700,7701,7702,7703,7704,7705,7706,7707,7708,7709,7710,7711,7712,7713,7714,7715,7716,7717,7718,7719,7720,7721,7722,7723,7724,7725,7726,7727,7728,7729,7730,7731,7732,7733,7734,7735,7736,7737,7738,7739,7740,7741,7742,7743,7744,7745,7746,7747,7748,7749,7750,7751,7752,7753,7754,7755,7756,7757,7758,7759,7760,7761,7762,7763,7764,7765,7766,7767,7768,7769,7770,7771,7772,7773,7774,7775,7776,7777,7778,7779,7780,7781,7782,7783,7784,7785,7786,7787,7788,7789,7790,7791,7792,7793,7794,7795,7796,7797,7798,7799,7800,7801,7802,7803,7804,7805,7806,7807,7808,7809,7810,7811,7812,7813,7814,7815,7816,7817,7818,7819,7820,7821,7822,7823,7824,7825,7826,7827,7828,7829,7830,7831,7832,7833,7834,7835,7836,7837,7838,7839,7840,7841,7842,7843,7844,7845,7846,7847,7848,7849,7850,7851,7852,7853,7854,7855,7856,7857,7858,7859,7860,7861,7862,7863,7864,7865,7866,7867,7868,7869,7870,7871,7872,7873,7874,7875,7876,7877,7878,7879,7880,7881,7882,7883,7884,7885,7886,7887,7888,7889,7890,7891,7892,7893,7894,7895,7896,7897,7898,7899,7900,7901,7902,7903,7904,7905,7906,7907,7908,7909,7910,7911,7912,7913,7914,7915,7916,7917,7918,7919,7920,7921,7922,7923,7924,7925,7926,7927,7928,7929,7930,7931,7932,7933,7934,7935,7936,7937,7938,7939,7940,7941,7942,7943,7944,7945,7946,7947,7948,7949,7950,7951,7952,7953,7954,7955,7956,7957,7958,7959,7960,7961,7962,7963,7964,7965,7966,7967,7968,7969,7970,7971,7972,7973,7974,7975,7976,7977,7978,7979,7980,7981,7982,7983,7984,7985,7986,7987,7988,7989,7990,7991,7992,7993,7994,7995,7996,7997,7998,7999,8000,8001,8002,8003,8004,8005,8006,8007,8008,8009,8010,8011,8012,8013,8014,8015,8016,8017,8018,8019,8020,8021,8022,8023,8024,8025,8026,8027,8028,8029,8030,8031,8032,8033,8034,8035,8036,8037,8038,8039,8040,8041,8042,8043,8044,8045,8046,8047,8048,8049,8050,8051,8052,8053,8054,8055,8056,8057,8058,8059,8060,8061,8062,8063,8064,8065,8066,8067,8068,8069,8070,8071,8072,8073,8074,8075,8076,8077,8078,8079,8080,8081,8082,8083,8084,8085,8086,8087,8088,8089,8090,8091,8092,8093,8094,8095,8096,8097,8098,8099,8100,8101,8102,8103,8104,8105,8106,8107,8108,8109,8110,8111,8112,8113,8114,8115,8116,8117,8118,8119,8120,8121,8122,8123,8124,8125,8126,8127,8128,8129,8130,8131,8132,8133,8134,8135,8136,8137,8138,8139,8140,8141,8142,8143,8144,8145,8146,8147,8148,8149,8150,8151,8152,8153,8154,8155,8156,8157,8158,8159,8160,8161,8162,8163,8164,8165,8166,8167,8168,8169,8170,8171,8172,8173,8174,8175,8176,8177,8178,8179,8180,8181,8182,8183,8184,8185,8186,8187,8188,8189,8190,8191,8192,8193, unused=0)+deltaUZero17(unused) on(8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8203,8204,8205,8206,8207,8208,8209,8210,8211,8212,8213,8214,8215,8216,8217,8218,8219,8220,8221,8222,8223,8224,8225,8226,8227,8228,8229,8230,8231,8232,8233,8234,8235,8236,8237,8238,8239,8240,8241,8242,8243,8244,8245,8246,8247,8248,8249,8250,8251,8252,8253,8254,8255,8256,8257,8258,8259,8260,8261,8262,8263,8264,8265,8266,8267,8268,8269,8270,8271,8272,8273,8274,8275,8276,8277,8278,8279,8280,8281,8282,8283,8284,8285,8286,8287,8288,8289,8290,8291,8292,8293,8294,8295,8296,8297,8298,8299,8300,8301,8302,8303,8304,8305,8306,8307,8308,8309,8310,8311,8312,8313,8314,8315,8316,8317,8318,8319,8320,8321,8322,8323,8324,8325,8326,8327,8328,8329,8330,8331,8332,8333,8334,8335,8336,8337,8338,8339,8340,8341,8342,8343,8344,8345,8346,8347,8348,8349,8350,8351,8352,8353,8354,8355,8356,8357,8358,8359,8360,8361,8362,8363,8364,8365,8366,8367,8368,8369,8370,8371,8372,8373,8374,8375,8376,8377,8378,8379,8380,8381,8382,8383,8384,8385,8386,8387,8388,8389,8390,8391,8392,8393,8394,8395,8396,8397,8398,8399,8400,8401,8402,8403,8404,8405,8406,8407,8408,8409,8410,8411,8412,8413,8414,8415,8416,8417,8418,8419,8420,8421,8422,8423,8424,8425,8426,8427,8428,8429,8430,8431,8432,8433,8434,8435,8436,8437,8438,8439,8440,8441,8442,8443,8444,8445,8446,8447,8448,8449,8450,8451,8452,8453,8454,8455,8456,8457,8458,8459,8460,8461,8462,8463,8464,8465,8466,8467,8468,8469,8470,8471,8472,8473,8474,8475,8476,8477,8478,8479,8480,8481,8482,8483,8484,8485,8486,8487,8488,8489,8490,8491,8492,8493,8494,8495,8496,8497,8498,8499,8500,8501,8502,8503,8504,8505,8506,8507,8508,8509,8510,8511,8512,8513,8514,8515,8516,8517,8518,8519,8520,8521,8522,8523,8524,8525,8526,8527,8528,8529,8530,8531,8532,8533,8534,8535,8536,8537,8538,8539,8540,8541,8542,8543,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,8554,8555,8556,8557,8558,8559,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,8570,8571,8572,8573,8574,8575,8576,8577,8578,8579,8580,8581,8582,8583,8584,8585,8586,8587,8588,8589,8590,8591,8592,8593,8594,8595,8596,8597,8598,8599,8600,8601,8602,8603,8604,8605,8606,8607,8608,8609,8610,8611,8612,8613,8614,8615,8616,8617,8618,8619,8620,8621,8622,8623,8624,8625,8626,8627,8628,8629,8630,8631,8632,8633,8634,8635,8636,8637,8638,8639,8640,8641,8642,8643,8644,8645,8646,8647,8648,8649,8650,8651,8652,8653,8654,8655,8656,8657,8658,8659,8660,8661,8662,8663,8664,8665,8666,8667,8668,8669,8670,8671,8672,8673,8674,8675,8676,8677,8678,8679,8680,8681,8682,8683,8684,8685,8686,8687,8688,8689,8690,8691,8692,8693,8694,8695,8696,8697,8698,8699,8700,8701,8702,8703,8704,8705, unused=0)+deltaUZero18(unused) on(8705,8706,8707,8708,8709,8710,8711,8712,8713,8714,8715,8716,8717,8718,8719,8720,8721,8722,8723,8724,8725,8726,8727,8728,8729,8730,8731,8732,8733,8734,8735,8736,8737,8738,8739,8740,8741,8742,8743,8744,8745,8746,8747,8748,8749,8750,8751,8752,8753,8754,8755,8756,8757,8758,8759,8760,8761,8762,8763,8764,8765,8766,8767,8768,8769,8770,8771,8772,8773,8774,8775,8776,8777,8778,8779,8780,8781,8782,8783,8784,8785,8786,8787,8788,8789,8790,8791,8792,8793,8794,8795,8796,8797,8798,8799,8800,8801,8802,8803,8804,8805,8806,8807,8808,8809,8810,8811,8812,8813,8814,8815,8816,8817,8818,8819,8820,8821,8822,8823,8824,8825,8826,8827,8828,8829,8830,8831,8832,8833,8834,8835,8836,8837,8838,8839,8840,8841,8842,8843,8844,8845,8846,8847,8848,8849,8850,8851,8852,8853,8854,8855,8856,8857,8858,8859,8860,8861,8862,8863,8864,8865,8866,8867,8868,8869,8870,8871,8872,8873,8874,8875,8876,8877,8878,8879,8880,8881,8882,8883,8884,8885,8886,8887,8888,8889,8890,8891,8892,8893,8894,8895,8896,8897,8898,8899,8900,8901,8902,8903,8904,8905,8906,8907,8908,8909,8910,8911,8912,8913,8914,8915,8916,8917,8918,8919,8920,8921,8922,8923,8924,8925,8926,8927,8928,8929,8930,8931,8932,8933,8934,8935,8936,8937,8938,8939,8940,8941,8942,8943,8944,8945,8946,8947,8948,8949,8950,8951,8952,8953,8954,8955,8956,8957,8958,8959,8960,8961,8962,8963,8964,8965,8966,8967,8968,8969,8970,8971,8972,8973,8974,8975,8976,8977,8978,8979,8980,8981,8982,8983,8984,8985,8986,8987,8988,8989,8990,8991,8992,8993,8994,8995,8996,8997,8998,8999,9000,9001,9002,9003,9004,9005,9006,9007,9008,9009,9010,9011,9012,9013,9014,9015,9016,9017,9018,9019,9020,9021,9022,9023,9024,9025,9026,9027,9028,9029,9030,9031,9032,9033,9034,9035,9036,9037,9038,9039,9040,9041,9042,9043,9044,9045,9046,9047,9048,9049,9050,9051,9052,9053,9054,9055,9056,9057,9058,9059,9060,9061,9062,9063,9064,9065,9066,9067,9068,9069,9070,9071,9072,9073,9074,9075,9076,9077,9078,9079,9080,9081,9082,9083,9084,9085,9086,9087,9088,9089,9090,9091,9092,9093,9094,9095,9096,9097,9098,9099,9100,9101,9102,9103,9104,9105,9106,9107,9108,9109,9110,9111,9112,9113,9114,9115,9116,9117,9118,9119,9120,9121,9122,9123,9124,9125,9126,9127,9128,9129,9130,9131,9132,9133,9134,9135,9136,9137,9138,9139,9140,9141,9142,9143,9144,9145,9146,9147,9148,9149,9150,9151,9152,9153,9154,9155,9156,9157,9158,9159,9160,9161,9162,9163,9164,9165,9166,9167,9168,9169,9170,9171,9172,9173,9174,9175,9176,9177,9178,9179,9180,9181,9182,9183,9184,9185,9186,9187,9188,9189,9190,9191,9192,9193,9194,9195,9196,9197,9198,9199,9200,9201,9202,9203,9204,9205,9206,9207,9208,9209,9210,9211,9212,9213,9214,9215,9216,9217, unused=0)+deltaUZero19(unused) on(9217,9218,9219,9220,9221,9222,9223,9224,9225,9226,9227,9228,9229,9230,9231,9232,9233,9234,9235,9236,9237,9238,9239,9240,9241,9242,9243,9244,9245,9246,9247,9248,9249,9250,9251,9252,9253,9254,9255,9256,9257,9258,9259,9260,9261,9262,9263,9264,9265,9266,9267,9268,9269,9270,9271,9272,9273,9274,9275,9276,9277,9278,9279,9280,9281,9282,9283,9284,9285,9286,9287,9288,9289,9290,9291,9292,9293,9294,9295,9296,9297,9298,9299,9300,9301,9302,9303,9304,9305,9306,9307,9308,9309,9310,9311,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,9322,9323,9324,9325,9326,9327,9328,9329,9330,9331,9332,9333,9334,9335,9336,9337,9338,9339,9340,9341,9342,9343,9344,9345,9346,9347,9348,9349,9350,9351,9352,9353,9354,9355,9356,9357,9358,9359,9360,9361,9362,9363,9364,9365,9366,9367,9368,9369,9370,9371,9372,9373,9374,9375,9376,9377,9378,9379,9380,9381,9382,9383,9384,9385,9386,9387,9388,9389,9390,9391,9392,9393,9394,9395,9396,9397,9398,9399,9400,9401,9402,9403,9404,9405,9406,9407,9408,9409,9410,9411,9412,9413,9414,9415,9416,9417,9418,9419,9420,9421,9422,9423,9424,9425,9426,9427,9428,9429,9430,9431,9432,9433,9434,9435,9436,9437,9438,9439,9440,9441,9442,9443,9444,9445,9446,9447,9448,9449,9450,9451,9452,9453,9454,9455,9456,9457,9458,9459,9460,9461,9462,9463,9464,9465,9466,9467,9468,9469,9470,9471,9472,9473,9474,9475,9476,9477,9478,9479,9480,9481,9482,9483,9484,9485,9486,9487,9488,9489,9490,9491,9492,9493,9494,9495,9496,9497,9498,9499,9500,9501,9502,9503,9504,9505,9506,9507,9508,9509,9510,9511,9512,9513,9514,9515,9516,9517,9518,9519,9520,9521,9522,9523,9524,9525,9526,9527,9528,9529,9530,9531,9532,9533,9534,9535,9536,9537,9538,9539,9540,9541,9542,9543,9544,9545,9546,9547,9548,9549,9550,9551,9552,9553,9554,9555,9556,9557,9558,9559,9560,9561,9562,9563,9564,9565,9566,9567,9568,9569,9570,9571,9572,9573,9574,9575,9576,9577,9578,9579,9580,9581,9582,9583,9584,9585,9586,9587,9588,9589,9590,9591,9592,9593,9594,9595,9596,9597,9598,9599,9600,9601,9602,9603,9604,9605,9606,9607,9608,9609,9610,9611,9612,9613,9614,9615,9616,9617,9618,9619,9620,9621,9622,9623,9624,9625,9626,9627,9628,9629,9630,9631,9632,9633,9634,9635,9636,9637,9638,9639,9640,9641,9642,9643,9644,9645,9646,9647,9648,9649,9650,9651,9652,9653,9654,9655,9656,9657,9658,9659,9660,9661,9662,9663,9664,9665,9666,9667,9668,9669,9670,9671,9672,9673,9674,9675,9676,9677,9678,9679,9680,9681,9682,9683,9684,9685,9686,9687,9688,9689,9690,9691,9692,9693,9694,9695,9696,9697,9698,9699,9700,9701,9702,9703,9704,9705,9706,9707,9708,9709,9710,9711,9712,9713,9714,9715,9716,9717,9718,9719,9720,9721,9722,9723,9724,9725,9726,9727,9728,9729, unused=0)+deltaUZero20(unused) on(9729,9730,9731,9732,9733,9734,9735,9736,9737,9738,9739,9740,9741,9742,9743,9744,9745,9746,9747,9748,9749,9750,9751,9752,9753,9754,9755,9756,9757,9758,9759,9760,9761,9762,9763,9764,9765,9766,9767,9768,9769,9770,9771,9772,9773,9774,9775,9776,9777,9778,9779,9780,9781,9782,9783,9784,9785,9786,9787,9788,9789,9790,9791,9792,9793,9794,9795,9796,9797,9798,9799,9800,9801,9802,9803,9804,9805,9806,9807,9808,9809,9810,9811,9812,9813,9814,9815,9816,9817,9818,9819,9820,9821,9822,9823,9824,9825,9826,9827,9828,9829,9830,9831,9832,9833,9834,9835,9836,9837,9838,9839,9840,9841,9842,9843,9844,9845,9846,9847,9848,9849,9850,9851,9852,9853,9854,9855,9856,9857,9858,9859,9860,9861,9862,9863,9864,9865,9866,9867,9868,9869,9870,9871,9872,9873,9874,9875,9876,9877,9878,9879,9880,9881,9882,9883,9884,9885,9886,9887,9888,9889,9890,9891,9892,9893,9894,9895,9896,9897,9898,9899,9900,9901,9902,9903,9904,9905,9906,9907,9908,9909,9910,9911,9912,9913,9914,9915,9916,9917,9918,9919,9920,9921,9922,9923,9924,9925,9926,9927,9928,9929,9930,9931,9932,9933,9934,9935,9936,9937,9938,9939,9940,9941,9942,9943,9944,9945,9946,9947,9948,9949,9950,9951,9952,9953,9954,9955,9956,9957,9958,9959,9960,9961,9962,9963,9964,9965,9966,9967,9968,9969,9970,9971,9972,9973,9974,9975,9976,9977,9978,9979,9980,9981,9982,9983,9984,9985,9986,9987,9988,9989,9990,9991,9992,9993,9994,9995,9996,9997,9998,9999,10000,10001,10002,10003,10004,10005,10006,10007,10008,10009,10010,10011,10012,10013,10014,10015,10016,10017,10018,10019,10020,10021,10022,10023,10024,10025,10026,10027,10028,10029,10030,10031,10032,10033,10034,10035,10036,10037,10038,10039,10040,10041,10042,10043,10044,10045,10046,10047,10048,10049,10050,10051,10052,10053,10054,10055,10056,10057,10058,10059,10060,10061,10062,10063,10064,10065,10066,10067,10068,10069,10070,10071,10072,10073,10074,10075,10076,10077,10078,10079,10080,10081,10082,10083,10084,10085,10086,10087,10088,10089,10090,10091,10092,10093,10094,10095,10096,10097,10098,10099,10100,10101,10102,10103,10104,10105,10106,10107,10108,10109,10110,10111,10112,10113,10114,10115,10116,10117,10118,10119,10120,10121,10122,10123,10124,10125,10126,10127,10128,10129,10130,10131,10132,10133,10134,10135,10136,10137,10138,10139,10140,10141,10142,10143,10144,10145,10146,10147,10148,10149,10150,10151,10152,10153,10154,10155,10156,10157,10158,10159,10160,10161,10162,10163,10164,10165,10166,10167,10168,10169,10170,10171,10172,10173,10174,10175,10176,10177,10178,10179,10180,10181,10182,10183,10184,10185,10186,10187,10188,10189,10190,10191,10192,10193,10194,10195,10196,10197,10198,10199,10200,10201,10202,10203,10204,10205,10206,10207,10208,10209,10210,10211,10212,10213,10214,10215,10216,10217,10218,10219,10220,10221,10222,10223,10224,10225,10226,10227,10228,10229,10230,10231,10232,10233,10234,10235,10236,10237,10238,10239,10240,10241, unused=0)+deltaUZero21(unused) on(10241,10242,10243,10244,10245,10246,10247,10248,10249,10250,10251,10252,10253,10254,10255,10256,10257,10258,10259,10260,10261,10262,10263,10264,10265,10266,10267,10268,10269,10270,10271,10272,10273,10274,10275,10276,10277,10278,10279,10280,10281,10282,10283,10284,10285,10286,10287,10288,10289,10290,10291,10292,10293,10294,10295,10296,10297,10298,10299,10300,10301,10302,10303,10304,10305,10306,10307,10308,10309,10310,10311,10312,10313,10314,10315,10316,10317,10318,10319,10320,10321,10322,10323,10324,10325,10326,10327,10328,10329,10330,10331,10332,10333,10334,10335,10336,10337,10338,10339,10340,10341,10342,10343,10344,10345,10346,10347,10348,10349,10350,10351,10352,10353,10354,10355,10356,10357,10358,10359,10360,10361,10362,10363,10364,10365,10366,10367,10368,10369,10370,10371,10372,10373,10374,10375,10376,10377,10378,10379,10380,10381,10382,10383,10384,10385,10386,10387,10388,10389,10390,10391,10392,10393,10394,10395,10396,10397,10398,10399,10400,10401,10402,10403,10404,10405,10406,10407,10408,10409,10410,10411,10412,10413,10414,10415,10416,10417,10418,10419,10420,10421,10422,10423,10424,10425,10426,10427,10428,10429,10430,10431,10432,10433,10434,10435,10436,10437,10438,10439,10440,10441,10442,10443,10444,10445,10446,10447,10448,10449,10450,10451,10452,10453,10454,10455,10456,10457,10458,10459,10460,10461,10462,10463,10464,10465,10466,10467,10468,10469,10470,10471,10472,10473,10474,10475,10476,10477,10478,10479,10480,10481,10482,10483,10484,10485,10486,10487,10488,10489,10490,10491,10492,10493,10494,10495,10496,10497,10498,10499,10500,10501,10502,10503,10504,10505,10506,10507,10508,10509,10510,10511,10512,10513,10514,10515,10516,10517,10518,10519,10520,10521,10522,10523,10524,10525,10526,10527,10528,10529,10530,10531,10532,10533,10534,10535,10536,10537,10538,10539,10540,10541,10542,10543,10544,10545,10546,10547,10548,10549,10550,10551,10552,10553,10554,10555,10556,10557,10558,10559,10560,10561,10562,10563,10564,10565,10566,10567,10568,10569,10570,10571,10572,10573,10574,10575,10576,10577,10578,10579,10580,10581,10582,10583,10584,10585,10586,10587,10588,10589,10590,10591,10592,10593,10594,10595,10596,10597,10598,10599,10600,10601,10602,10603,10604,10605,10606,10607,10608,10609,10610,10611,10612,10613,10614,10615,10616,10617,10618,10619,10620,10621,10622,10623,10624,10625,10626,10627,10628,10629,10630,10631,10632,10633,10634,10635,10636,10637,10638,10639,10640,10641,10642,10643,10644,10645,10646,10647,10648,10649,10650,10651,10652,10653,10654,10655,10656,10657,10658,10659,10660,10661,10662,10663,10664,10665,10666,10667,10668,10669,10670,10671,10672,10673,10674,10675,10676,10677,10678,10679,10680,10681,10682,10683,10684,10685,10686,10687,10688,10689,10690,10691,10692,10693,10694,10695,10696,10697,10698,10699,10700,10701,10702,10703,10704,10705,10706,10707,10708,10709,10710,10711,10712,10713,10714,10715,10716,10717,10718,10719,10720,10721,10722,10723,10724,10725,10726,10727,10728,10729,10730,10731,10732,10733,10734,10735,10736,10737,10738,10739,10740,10741,10742,10743,10744,10745,10746,10747,10748,10749,10750,10751,10752,10753, unused=0)+deltaUZero22(unused) on(10753,10754,10755,10756,10757,10758,10759,10760,10761,10762,10763,10764,10765,10766,10767,10768,10769,10770,10771,10772,10773,10774,10775,10776,10777,10778,10779,10780,10781,10782,10783,10784,10785,10786,10787,10788,10789,10790,10791,10792,10793,10794,10795,10796,10797,10798,10799,10800,10801,10802,10803,10804,10805,10806,10807,10808,10809,10810,10811,10812,10813,10814,10815,10816,10817,10818,10819,10820,10821,10822,10823,10824,10825,10826,10827,10828,10829,10830,10831,10832,10833,10834,10835,10836,10837,10838,10839,10840,10841,10842,10843,10844,10845,10846,10847,10848,10849,10850,10851,10852,10853,10854,10855,10856,10857,10858,10859,10860,10861,10862,10863,10864,10865,10866,10867,10868,10869,10870,10871,10872,10873,10874,10875,10876,10877,10878,10879,10880,10881,10882,10883,10884,10885,10886,10887,10888,10889,10890,10891,10892,10893,10894,10895,10896,10897,10898,10899,10900,10901,10902,10903,10904,10905,10906,10907,10908,10909,10910,10911,10912,10913,10914,10915,10916,10917,10918,10919,10920,10921,10922,10923,10924,10925,10926,10927,10928,10929,10930,10931,10932,10933,10934,10935,10936,10937,10938,10939,10940,10941,10942,10943,10944,10945,10946,10947,10948,10949,10950,10951,10952,10953,10954,10955,10956,10957,10958,10959,10960,10961,10962,10963,10964,10965,10966,10967,10968,10969,10970,10971,10972,10973,10974,10975,10976,10977,10978,10979,10980,10981,10982,10983,10984,10985,10986,10987,10988,10989,10990,10991,10992,10993,10994,10995,10996,10997,10998,10999,11000,11001,11002,11003,11004,11005,11006,11007,11008,11009,11010,11011,11012,11013,11014,11015,11016,11017,11018,11019,11020,11021,11022,11023,11024,11025,11026,11027,11028,11029,11030,11031,11032,11033,11034,11035,11036,11037,11038,11039,11040,11041,11042,11043,11044,11045,11046,11047,11048,11049,11050,11051,11052,11053,11054,11055,11056,11057,11058,11059,11060,11061,11062,11063,11064,11065,11066,11067,11068,11069,11070,11071,11072,11073,11074,11075,11076,11077,11078,11079,11080,11081,11082,11083,11084,11085,11086,11087,11088,11089,11090,11091,11092,11093,11094,11095,11096,11097,11098,11099,11100,11101,11102,11103,11104,11105,11106,11107,11108,11109,11110,11111,11112,11113,11114,11115,11116,11117,11118,11119,11120,11121,11122,11123,11124,11125,11126,11127,11128,11129,11130,11131,11132,11133,11134,11135,11136,11137,11138,11139,11140,11141,11142,11143,11144,11145,11146,11147,11148,11149,11150,11151,11152,11153,11154,11155,11156,11157,11158,11159,11160,11161,11162,11163,11164,11165,11166,11167,11168,11169,11170,11171,11172,11173,11174,11175,11176,11177,11178,11179,11180,11181,11182,11183,11184,11185,11186,11187,11188,11189,11190,11191,11192,11193,11194,11195,11196,11197,11198,11199,11200,11201,11202,11203,11204,11205,11206,11207,11208,11209,11210,11211,11212,11213,11214,11215,11216,11217,11218,11219,11220,11221,11222,11223,11224,11225,11226,11227,11228,11229,11230,11231,11232,11233,11234,11235,11236,11237,11238,11239,11240,11241,11242,11243,11244,11245,11246,11247,11248,11249,11250,11251,11252,11253,11254,11255,11256,11257,11258,11259,11260,11261,11262,11263,11264,11265, unused=0)+deltaUZero23(unused) on(11265,11266,11267,11268,11269,11270,11271,11272,11273,11274,11275,11276,11277,11278,11279,11280,11281,11282,11283,11284,11285,11286,11287,11288,11289,11290,11291,11292,11293,11294,11295,11296,11297,11298,11299,11300,11301,11302,11303,11304,11305,11306,11307,11308,11309,11310,11311,11312,11313,11314,11315,11316,11317,11318,11319,11320,11321,11322,11323,11324,11325,11326,11327,11328,11329,11330,11331,11332,11333,11334,11335,11336,11337,11338,11339,11340,11341,11342,11343,11344,11345,11346,11347,11348,11349,11350,11351,11352,11353,11354,11355,11356,11357,11358,11359,11360,11361,11362,11363,11364,11365,11366,11367,11368,11369,11370,11371,11372,11373,11374,11375,11376,11377,11378,11379,11380,11381,11382,11383,11384,11385,11386,11387,11388,11389,11390,11391,11392,11393,11394,11395,11396,11397,11398,11399,11400,11401,11402,11403,11404,11405,11406,11407,11408,11409,11410,11411,11412,11413,11414,11415,11416,11417,11418,11419,11420,11421,11422,11423,11424,11425,11426,11427,11428,11429,11430,11431,11432,11433,11434,11435,11436,11437,11438,11439,11440,11441,11442,11443,11444,11445,11446,11447,11448,11449,11450,11451,11452,11453,11454,11455,11456,11457,11458,11459,11460,11461,11462,11463,11464,11465,11466,11467,11468,11469,11470,11471,11472,11473,11474,11475,11476,11477,11478,11479,11480,11481,11482,11483,11484,11485,11486,11487,11488,11489,11490,11491,11492,11493,11494,11495,11496,11497,11498,11499,11500,11501,11502,11503,11504,11505,11506,11507,11508,11509,11510,11511,11512,11513,11514,11515,11516,11517,11518,11519,11520,11521,11522,11523,11524,11525,11526,11527,11528,11529,11530,11531,11532,11533,11534,11535,11536,11537,11538,11539,11540,11541,11542,11543,11544,11545,11546,11547,11548,11549,11550,11551,11552,11553,11554,11555,11556,11557,11558,11559,11560,11561,11562,11563,11564,11565,11566,11567,11568,11569,11570,11571,11572,11573,11574,11575,11576,11577,11578,11579,11580,11581,11582,11583,11584,11585,11586,11587,11588,11589,11590,11591,11592,11593,11594,11595,11596,11597,11598,11599,11600,11601,11602,11603,11604,11605,11606,11607,11608,11609,11610,11611,11612,11613,11614,11615,11616,11617,11618,11619,11620,11621,11622,11623,11624,11625,11626,11627,11628,11629,11630,11631,11632,11633,11634,11635,11636,11637,11638,11639,11640,11641,11642,11643,11644,11645,11646,11647,11648,11649,11650,11651,11652,11653,11654,11655,11656,11657,11658,11659,11660,11661,11662,11663,11664,11665,11666,11667,11668,11669,11670,11671,11672,11673,11674,11675,11676,11677,11678,11679,11680,11681,11682,11683,11684,11685,11686,11687,11688,11689,11690,11691,11692,11693,11694,11695,11696,11697,11698,11699,11700,11701,11702,11703,11704,11705,11706,11707,11708,11709,11710,11711,11712,11713,11714,11715,11716,11717,11718,11719,11720,11721,11722,11723,11724,11725,11726,11727,11728,11729,11730,11731,11732,11733,11734,11735,11736,11737,11738,11739,11740,11741,11742,11743,11744,11745,11746,11747,11748,11749,11750,11751,11752,11753,11754,11755,11756,11757,11758,11759,11760,11761,11762,11763,11764,11765,11766,11767,11768,11769,11770,11771,11772,11773,11774,11775,11776,11777, unused=0)+deltaUZero24(unused) on(11777,11778,11779,11780,11781,11782,11783,11784,11785,11786,11787,11788,11789,11790,11791,11792,11793,11794,11795,11796,11797,11798,11799,11800,11801,11802,11803,11804,11805,11806,11807,11808,11809,11810,11811,11812,11813,11814,11815,11816,11817,11818,11819,11820,11821,11822,11823,11824,11825,11826,11827,11828,11829,11830,11831,11832,11833,11834,11835,11836,11837,11838,11839,11840,11841,11842,11843,11844,11845,11846,11847,11848,11849,11850,11851,11852,11853,11854,11855,11856,11857,11858,11859,11860,11861,11862,11863,11864,11865,11866,11867,11868,11869,11870,11871,11872,11873,11874,11875,11876,11877,11878,11879,11880,11881,11882,11883,11884,11885,11886,11887,11888,11889,11890,11891,11892,11893,11894,11895,11896,11897,11898,11899,11900,11901,11902,11903,11904,11905,11906,11907,11908,11909,11910,11911,11912,11913,11914,11915,11916,11917,11918,11919,11920,11921,11922,11923,11924,11925,11926,11927,11928,11929,11930,11931,11932,11933,11934,11935,11936,11937,11938,11939,11940,11941,11942,11943,11944,11945,11946,11947,11948,11949,11950,11951,11952,11953,11954,11955,11956,11957,11958,11959,11960,11961,11962,11963,11964,11965,11966,11967,11968,11969,11970,11971,11972,11973,11974,11975,11976,11977,11978,11979,11980,11981,11982,11983,11984,11985,11986,11987,11988,11989,11990,11991,11992,11993,11994,11995,11996,11997,11998,11999,12000,12001,12002,12003,12004,12005,12006,12007,12008,12009,12010,12011,12012,12013,12014,12015,12016,12017,12018,12019,12020,12021,12022,12023,12024,12025,12026,12027,12028,12029,12030,12031,12032,12033,12034,12035,12036,12037,12038,12039,12040,12041,12042,12043,12044,12045,12046,12047,12048,12049,12050,12051,12052,12053,12054,12055,12056,12057,12058,12059,12060,12061,12062,12063,12064,12065,12066,12067,12068,12069,12070,12071,12072,12073,12074,12075,12076,12077,12078,12079,12080,12081,12082,12083,12084,12085,12086,12087,12088,12089,12090,12091,12092,12093,12094,12095,12096,12097,12098,12099,12100,12101,12102,12103,12104,12105,12106,12107,12108,12109,12110,12111,12112,12113,12114,12115,12116,12117,12118,12119,12120,12121,12122,12123,12124,12125,12126,12127,12128,12129,12130,12131,12132,12133,12134,12135,12136,12137,12138,12139,12140,12141,12142,12143,12144,12145,12146,12147,12148,12149,12150,12151,12152,12153,12154,12155,12156,12157,12158,12159,12160,12161,12162,12163,12164,12165,12166,12167,12168,12169,12170,12171,12172,12173,12174,12175,12176,12177,12178,12179,12180,12181,12182,12183,12184,12185,12186,12187,12188,12189,12190,12191,12192,12193,12194,12195,12196,12197,12198,12199,12200,12201,12202,12203,12204,12205,12206,12207,12208,12209,12210,12211,12212,12213,12214,12215,12216,12217,12218,12219,12220,12221,12222,12223,12224,12225,12226,12227,12228,12229,12230,12231,12232,12233,12234,12235,12236,12237,12238,12239,12240,12241,12242,12243,12244,12245,12246,12247,12248,12249,12250,12251,12252,12253,12254,12255,12256,12257,12258,12259,12260,12261,12262,12263,12264,12265,12266,12267,12268,12269,12270,12271,12272,12273,12274,12275,12276,12277,12278,12279,12280,12281,12282,12283,12284,12285,12286,12287,12288,12289, unused=0)+deltaUZero25(unused) on(12289,12290,12291,12292,12293,12294,12295,12296,12297,12298,12299,12300,12301,12302,12303,12304,12305,12306,12307,12308,12309,12310,12311,12312,12313,12314,12315,12316,12317,12318,12319,12320,12321,12322,12323,12324,12325,12326,12327,12328,12329,12330,12331,12332,12333,12334,12335,12336,12337,12338,12339,12340,12341,12342,12343,12344,12345,12346,12347,12348,12349,12350,12351,12352,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,12436,12437,12438,12439,12440,12441,12442,12443,12444,12445,12446,12447,12448,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,12535,12536,12537,12538,12539,12540,12541,12542,12543,12544,12545,12546,12547,12548,12549,12550,12551,12552,12553,12554,12555,12556,12557,12558,12559,12560,12561,12562,12563,12564,12565,12566,12567,12568,12569,12570,12571,12572,12573,12574,12575,12576,12577,12578,12579,12580,12581,12582,12583,12584,12585,12586,12587,12588,12589,12590,12591,12592,12593,12594,12595,12596,12597,12598,12599,12600,12601,12602,12603,12604,12605,12606,12607,12608,12609,12610,12611,12612,12613,12614,12615,12616,12617,12618,12619,12620,12621,12622,12623,12624,12625,12626,12627,12628,12629,12630,12631,12632,12633,12634,12635,12636,12637,12638,12639,12640,12641,12642,12643,12644,12645,12646,12647,12648,12649,12650,12651,12652,12653,12654,12655,12656,12657,12658,12659,12660,12661,12662,12663,12664,12665,12666,12667,12668,12669,12670,12671,12672,12673,12674,12675,12676,12677,12678,12679,12680,12681,12682,12683,12684,12685,12686,12687,12688,12689,12690,12691,12692,12693,12694,12695,12696,12697,12698,12699,12700,12701,12702,12703,12704,12705,12706,12707,12708,12709,12710,12711,12712,12713,12714,12715,12716,12717,12718,12719,12720,12721,12722,12723,12724,12725,12726,12727,12728,12729,12730,12731,12732,12733,12734,12735,12736,12737,12738,12739,12740,12741,12742,12743,12744,12745,12746,12747,12748,12749,12750,12751,12752,12753,12754,12755,12756,12757,12758,12759,12760,12761,12762,12763,12764,12765,12766,12767,12768,12769,12770,12771,12772,12773,12774,12775,12776,12777,12778,12779,12780,12781,12782,12783,12784,12785,12786,12787,12788,12789,12790,12791,12792,12793,12794,12795,12796,12797,12798,12799,12800,12801, unused=0)+deltaUZero26(unused) on(12801,12802,12803,12804,12805,12806,12807,12808,12809,12810,12811,12812,12813,12814,12815,12816,12817,12818,12819,12820,12821,12822,12823,12824,12825,12826,12827,12828,12829,12830,12831,12832,12833,12834,12835,12836,12837,12838,12839,12840,12841,12842,12843,12844,12845,12846,12847,12848,12849,12850,12851,12852,12853,12854,12855,12856,12857,12858,12859,12860,12861,12862,12863,12864,12865,12866,12867,12868,12869,12870,12871,12872,12873,12874,12875,12876,12877,12878,12879,12880,12881,12882,12883,12884,12885,12886,12887,12888,12889,12890,12891,12892,12893,12894,12895,12896,12897,12898,12899,12900,12901,12902,12903,12904,12905,12906,12907,12908,12909,12910,12911,12912,12913,12914,12915,12916,12917,12918,12919,12920,12921,12922,12923,12924,12925,12926,12927,12928,12929,12930,12931,12932,12933,12934,12935,12936,12937,12938,12939,12940,12941,12942,12943,12944,12945,12946,12947,12948,12949,12950,12951,12952,12953,12954,12955,12956,12957,12958,12959,12960,12961,12962,12963,12964,12965,12966,12967,12968,12969,12970,12971,12972,12973,12974,12975,12976,12977,12978,12979,12980,12981,12982,12983,12984,12985,12986,12987,12988,12989,12990,12991,12992,12993,12994,12995,12996,12997,12998,12999,13000,13001,13002,13003,13004,13005,13006,13007,13008,13009,13010,13011,13012,13013,13014,13015,13016,13017,13018,13019,13020,13021,13022,13023,13024,13025,13026,13027,13028,13029,13030,13031,13032,13033,13034,13035,13036,13037,13038,13039,13040,13041,13042,13043,13044,13045,13046,13047,13048,13049,13050,13051,13052,13053,13054,13055,13056,13057,13058,13059,13060,13061,13062,13063,13064,13065,13066,13067,13068,13069,13070,13071,13072,13073,13074,13075,13076,13077,13078,13079,13080,13081,13082,13083,13084,13085,13086,13087,13088,13089,13090,13091,13092,13093,13094,13095,13096,13097,13098,13099,13100,13101,13102,13103,13104,13105,13106,13107,13108,13109,13110,13111,13112,13113,13114,13115,13116,13117,13118,13119,13120,13121,13122,13123,13124,13125,13126,13127,13128,13129,13130,13131,13132,13133,13134,13135,13136,13137,13138,13139,13140,13141,13142,13143,13144,13145,13146,13147,13148,13149,13150,13151,13152,13153,13154,13155,13156,13157,13158,13159,13160,13161,13162,13163,13164,13165,13166,13167,13168,13169,13170,13171,13172,13173,13174,13175,13176,13177,13178,13179,13180,13181,13182,13183,13184,13185,13186,13187,13188,13189,13190,13191,13192,13193,13194,13195,13196,13197,13198,13199,13200,13201,13202,13203,13204,13205,13206,13207,13208,13209,13210,13211,13212,13213,13214,13215,13216,13217,13218,13219,13220,13221,13222,13223,13224,13225,13226,13227,13228,13229,13230,13231,13232,13233,13234,13235,13236,13237,13238,13239,13240,13241,13242,13243,13244,13245,13246,13247,13248,13249,13250,13251,13252,13253,13254,13255,13256,13257,13258,13259,13260,13261,13262,13263,13264,13265,13266,13267,13268,13269,13270,13271,13272,13273,13274,13275,13276,13277,13278,13279,13280,13281,13282,13283,13284,13285,13286,13287,13288,13289,13290,13291,13292,13293,13294,13295,13296,13297,13298,13299,13300,13301,13302,13303,13304,13305,13306,13307,13308,13309,13310,13311,13312,13313, unused=0)+deltaUZero27(unused) on(13313,13314,13315,13316,13317,13318,13319,13320,13321,13322,13323,13324,13325,13326,13327,13328,13329,13330,13331,13332,13333,13334,13335,13336,13337,13338,13339,13340,13341,13342,13343,13344,13345,13346,13347,13348,13349,13350,13351,13352,13353,13354,13355,13356,13357,13358,13359,13360,13361,13362,13363,13364,13365,13366,13367,13368,13369,13370,13371,13372,13373,13374,13375,13376,13377,13378,13379,13380,13381,13382,13383,13384,13385,13386,13387,13388,13389,13390,13391,13392,13393,13394,13395,13396,13397,13398,13399,13400,13401,13402,13403,13404,13405,13406,13407,13408,13409,13410,13411,13412,13413,13414,13415,13416,13417,13418,13419,13420,13421,13422,13423,13424,13425,13426,13427,13428,13429,13430,13431,13432,13433,13434,13435,13436,13437,13438,13439,13440,13441,13442,13443,13444,13445,13446,13447,13448,13449,13450,13451,13452,13453,13454,13455,13456,13457,13458,13459,13460,13461,13462,13463,13464,13465,13466,13467,13468,13469,13470,13471,13472,13473,13474,13475,13476,13477,13478,13479,13480,13481,13482,13483,13484,13485,13486,13487,13488,13489,13490,13491,13492,13493,13494,13495,13496,13497,13498,13499,13500,13501,13502,13503,13504,13505,13506,13507,13508,13509,13510,13511,13512,13513,13514,13515,13516,13517,13518,13519,13520,13521,13522,13523,13524,13525,13526,13527,13528,13529,13530,13531,13532,13533,13534,13535,13536,13537,13538,13539,13540,13541,13542,13543,13544,13545,13546,13547,13548,13549,13550,13551,13552,13553,13554,13555,13556,13557,13558,13559,13560,13561,13562,13563,13564,13565,13566,13567,13568,13569,13570,13571,13572,13573,13574,13575,13576,13577,13578,13579,13580,13581,13582,13583,13584,13585,13586,13587,13588,13589,13590,13591,13592,13593,13594,13595,13596,13597,13598,13599,13600,13601,13602,13603,13604,13605,13606,13607,13608,13609,13610,13611,13612,13613,13614,13615,13616,13617,13618,13619,13620,13621,13622,13623,13624,13625,13626,13627,13628,13629,13630,13631,13632,13633,13634,13635,13636,13637,13638,13639,13640,13641,13642,13643,13644,13645,13646,13647,13648,13649,13650,13651,13652,13653,13654,13655,13656,13657,13658,13659,13660,13661,13662,13663,13664,13665,13666,13667,13668,13669,13670,13671,13672,13673,13674,13675,13676,13677,13678,13679,13680,13681,13682,13683,13684,13685,13686,13687,13688,13689,13690,13691,13692,13693,13694,13695,13696,13697,13698,13699,13700,13701,13702,13703,13704,13705,13706,13707,13708,13709,13710,13711,13712,13713,13714,13715,13716,13717,13718,13719,13720,13721,13722,13723,13724,13725,13726,13727,13728,13729,13730,13731,13732,13733,13734,13735,13736,13737,13738,13739,13740,13741,13742,13743,13744,13745,13746,13747,13748,13749,13750,13751,13752,13753,13754,13755,13756,13757,13758,13759,13760,13761,13762,13763,13764,13765,13766,13767,13768,13769,13770,13771,13772,13773,13774,13775,13776,13777,13778,13779,13780,13781,13782,13783,13784,13785,13786,13787,13788,13789,13790,13791,13792,13793,13794,13795,13796,13797,13798,13799,13800,13801,13802,13803,13804,13805,13806,13807,13808,13809,13810,13811,13812,13813,13814,13815,13816,13817,13818,13819,13820,13821,13822,13823,13824,13825, unused=0)+deltaUZero28(unused) on(13825,13826,13827,13828,13829,13830,13831,13832,13833,13834,13835,13836,13837,13838,13839,13840,13841,13842,13843,13844,13845,13846,13847,13848,13849,13850,13851,13852,13853,13854,13855,13856,13857,13858,13859,13860,13861,13862,13863,13864,13865,13866,13867,13868,13869,13870,13871,13872,13873,13874,13875,13876,13877,13878,13879,13880,13881,13882,13883,13884,13885,13886,13887,13888,13889,13890,13891,13892,13893,13894,13895,13896,13897,13898,13899,13900,13901,13902,13903,13904,13905,13906,13907,13908,13909,13910,13911,13912,13913,13914,13915,13916,13917,13918,13919,13920,13921,13922,13923,13924,13925,13926,13927,13928,13929,13930,13931,13932,13933,13934,13935,13936,13937,13938,13939,13940,13941,13942,13943,13944,13945,13946,13947,13948,13949,13950,13951,13952,13953,13954,13955,13956,13957,13958,13959,13960,13961,13962,13963,13964,13965,13966,13967,13968,13969,13970,13971,13972,13973,13974,13975,13976,13977,13978,13979,13980,13981,13982,13983,13984,13985,13986,13987,13988,13989,13990,13991,13992,13993,13994,13995,13996,13997,13998,13999,14000,14001,14002,14003,14004,14005,14006,14007,14008,14009,14010,14011,14012,14013,14014,14015,14016,14017,14018,14019,14020,14021,14022,14023,14024,14025,14026,14027,14028,14029,14030,14031,14032,14033,14034,14035,14036,14037,14038,14039,14040,14041,14042,14043,14044,14045,14046,14047,14048,14049,14050,14051,14052,14053,14054,14055,14056,14057,14058,14059,14060,14061,14062,14063,14064,14065,14066,14067,14068,14069,14070,14071,14072,14073,14074,14075,14076,14077,14078,14079,14080,14081,14082,14083,14084,14085,14086,14087,14088,14089,14090,14091,14092,14093,14094,14095,14096,14097,14098,14099,14100,14101,14102,14103,14104,14105,14106,14107,14108,14109,14110,14111,14112,14113,14114,14115,14116,14117,14118,14119,14120,14121,14122,14123,14124,14125,14126,14127,14128,14129,14130,14131,14132,14133,14134,14135,14136,14137,14138,14139,14140,14141,14142,14143,14144,14145,14146,14147,14148,14149,14150,14151,14152,14153,14154,14155,14156,14157,14158,14159,14160,14161,14162,14163,14164,14165,14166,14167,14168,14169,14170,14171,14172,14173,14174,14175,14176,14177,14178,14179,14180,14181,14182,14183,14184,14185,14186,14187,14188,14189,14190,14191,14192,14193,14194,14195,14196,14197,14198,14199,14200,14201,14202,14203,14204,14205,14206,14207,14208,14209,14210,14211,14212,14213,14214,14215,14216,14217,14218,14219,14220,14221,14222,14223,14224,14225,14226,14227,14228,14229,14230,14231,14232,14233,14234,14235,14236,14237,14238,14239,14240,14241,14242,14243,14244,14245,14246,14247,14248,14249,14250,14251,14252,14253,14254,14255,14256,14257,14258,14259,14260,14261,14262,14263,14264,14265,14266,14267,14268,14269,14270,14271,14272,14273,14274,14275,14276,14277,14278,14279,14280,14281,14282,14283,14284,14285,14286,14287,14288,14289,14290,14291,14292,14293,14294,14295,14296,14297,14298,14299,14300,14301,14302,14303,14304,14305,14306,14307,14308,14309,14310,14311,14312,14313,14314,14315,14316,14317,14318,14319,14320,14321,14322,14323,14324,14325,14326,14327,14328,14329,14330,14331,14332,14333,14334,14335,14336,14337, unused=0)+deltaUZero29(unused) on(14337,14338,14339,14340,14341,14342,14343,14344,14345,14346,14347,14348,14349,14350,14351,14352,14353,14354,14355,14356,14357,14358,14359,14360,14361,14362,14363,14364,14365,14366,14367,14368,14369,14370,14371,14372,14373,14374,14375,14376,14377,14378,14379,14380,14381,14382,14383,14384,14385,14386,14387,14388,14389,14390,14391,14392,14393,14394,14395,14396,14397,14398,14399,14400,14401,14402,14403,14404,14405,14406,14407,14408,14409,14410,14411,14412,14413,14414,14415,14416,14417,14418,14419,14420,14421,14422,14423,14424,14425,14426,14427,14428,14429,14430,14431,14432,14433,14434,14435,14436,14437,14438,14439,14440,14441,14442,14443,14444,14445,14446,14447,14448,14449,14450,14451,14452,14453,14454,14455,14456,14457,14458,14459,14460,14461,14462,14463,14464,14465,14466,14467,14468,14469,14470,14471,14472,14473,14474,14475,14476,14477,14478,14479,14480,14481,14482,14483,14484,14485,14486,14487,14488,14489,14490,14491,14492,14493,14494,14495,14496,14497,14498,14499,14500,14501,14502,14503,14504,14505,14506,14507,14508,14509,14510,14511,14512,14513,14514,14515,14516,14517,14518,14519,14520,14521,14522,14523,14524,14525,14526,14527,14528,14529,14530,14531,14532,14533,14534,14535,14536,14537,14538,14539,14540,14541,14542,14543,14544,14545,14546,14547,14548,14549,14550,14551,14552,14553,14554,14555,14556,14557,14558,14559,14560,14561,14562,14563,14564,14565,14566,14567,14568,14569,14570,14571,14572,14573,14574,14575,14576,14577,14578,14579,14580,14581,14582,14583,14584,14585,14586,14587,14588,14589,14590,14591,14592,14593,14594,14595,14596,14597,14598,14599,14600,14601,14602,14603,14604,14605,14606,14607,14608,14609,14610,14611,14612,14613,14614,14615,14616,14617,14618,14619,14620,14621,14622,14623,14624,14625,14626,14627,14628,14629,14630,14631,14632,14633,14634,14635,14636,14637,14638,14639,14640,14641,14642,14643,14644,14645,14646,14647,14648,14649,14650,14651,14652,14653,14654,14655,14656,14657,14658,14659,14660,14661,14662,14663,14664,14665,14666,14667,14668,14669,14670,14671,14672,14673,14674,14675,14676,14677,14678,14679,14680,14681,14682,14683,14684,14685,14686,14687,14688,14689,14690,14691,14692,14693,14694,14695,14696,14697,14698,14699,14700,14701,14702,14703,14704,14705,14706,14707,14708,14709,14710,14711,14712,14713,14714,14715,14716,14717,14718,14719,14720,14721,14722,14723,14724,14725,14726,14727,14728,14729,14730,14731,14732,14733,14734,14735,14736,14737,14738,14739,14740,14741,14742,14743,14744,14745,14746,14747,14748,14749,14750,14751,14752,14753,14754,14755,14756,14757,14758,14759,14760,14761,14762,14763,14764,14765,14766,14767,14768,14769,14770,14771,14772,14773,14774,14775,14776,14777,14778,14779,14780,14781,14782,14783,14784,14785,14786,14787,14788,14789,14790,14791,14792,14793,14794,14795,14796,14797,14798,14799,14800,14801,14802,14803,14804,14805,14806,14807,14808,14809,14810,14811,14812,14813,14814,14815,14816,14817,14818,14819,14820,14821,14822,14823,14824,14825,14826,14827,14828,14829,14830,14831,14832,14833,14834,14835,14836,14837,14838,14839,14840,14841,14842,14843,14844,14845,14846,14847,14848,14849, unused=0)+deltaUZero30(unused) on(14849,14850,14851,14852,14853,14854,14855,14856,14857,14858,14859,14860,14861,14862,14863,14864,14865,14866,14867,14868,14869,14870,14871,14872,14873,14874,14875,14876,14877,14878,14879,14880,14881,14882,14883,14884,14885,14886,14887,14888,14889,14890,14891,14892,14893,14894,14895,14896,14897,14898,14899,14900,14901,14902,14903,14904,14905,14906,14907,14908,14909,14910,14911,14912,14913,14914,14915,14916,14917,14918,14919,14920,14921,14922,14923,14924,14925,14926,14927,14928,14929,14930,14931,14932,14933,14934,14935,14936,14937,14938,14939,14940,14941,14942,14943,14944,14945,14946,14947,14948,14949,14950,14951,14952,14953,14954,14955,14956,14957,14958,14959,14960,14961,14962,14963,14964,14965,14966,14967,14968,14969,14970,14971,14972,14973,14974,14975,14976,14977,14978,14979,14980,14981,14982,14983,14984,14985,14986,14987,14988,14989,14990,14991,14992,14993,14994,14995,14996,14997,14998,14999,15000,15001,15002,15003,15004,15005,15006,15007,15008,15009,15010,15011,15012,15013,15014,15015,15016,15017,15018,15019,15020,15021,15022,15023,15024,15025,15026,15027,15028,15029,15030,15031,15032,15033,15034,15035,15036,15037,15038,15039,15040,15041,15042,15043,15044,15045,15046,15047,15048,15049,15050,15051,15052,15053,15054,15055,15056,15057,15058,15059,15060,15061,15062,15063,15064,15065,15066,15067,15068,15069,15070,15071,15072,15073,15074,15075,15076,15077,15078,15079,15080,15081,15082,15083,15084,15085,15086,15087,15088,15089,15090,15091,15092,15093,15094,15095,15096,15097,15098,15099,15100,15101,15102,15103,15104,15105,15106,15107,15108,15109,15110,15111,15112,15113,15114,15115,15116,15117,15118,15119,15120,15121,15122,15123,15124,15125,15126,15127,15128,15129,15130,15131,15132,15133,15134,15135,15136,15137,15138,15139,15140,15141,15142,15143,15144,15145,15146,15147,15148,15149,15150,15151,15152,15153,15154,15155,15156,15157,15158,15159,15160,15161,15162,15163,15164,15165,15166,15167,15168,15169,15170,15171,15172,15173,15174,15175,15176,15177,15178,15179,15180,15181,15182,15183,15184,15185,15186,15187,15188,15189,15190,15191,15192,15193,15194,15195,15196,15197,15198,15199,15200,15201,15202,15203,15204,15205,15206,15207,15208,15209,15210,15211,15212,15213,15214,15215,15216,15217,15218,15219,15220,15221,15222,15223,15224,15225,15226,15227,15228,15229,15230,15231,15232,15233,15234,15235,15236,15237,15238,15239,15240,15241,15242,15243,15244,15245,15246,15247,15248,15249,15250,15251,15252,15253,15254,15255,15256,15257,15258,15259,15260,15261,15262,15263,15264,15265,15266,15267,15268,15269,15270,15271,15272,15273,15274,15275,15276,15277,15278,15279,15280,15281,15282,15283,15284,15285,15286,15287,15288,15289,15290,15291,15292,15293,15294,15295,15296,15297,15298,15299,15300,15301,15302,15303,15304,15305,15306,15307,15308,15309,15310,15311,15312,15313,15314,15315,15316,15317,15318,15319,15320,15321,15322,15323,15324,15325,15326,15327,15328,15329,15330,15331,15332,15333,15334,15335,15336,15337,15338,15339,15340,15341,15342,15343,15344,15345,15346,15347,15348,15349,15350,15351,15352,15353,15354,15355,15356,15357,15358,15359,15360,15361, unused=0)+deltaUZero31(unused) on(15361,15362,15363,15364,15365,15366,15367,15368,15369,15370,15371,15372,15373,15374,15375,15376,15377,15378,15379,15380,15381,15382,15383,15384,15385,15386,15387,15388,15389,15390,15391,15392,15393,15394,15395,15396,15397,15398,15399,15400,15401,15402,15403,15404,15405,15406,15407,15408,15409,15410,15411,15412,15413,15414,15415,15416,15417,15418,15419,15420,15421,15422,15423,15424,15425,15426,15427,15428,15429,15430,15431,15432,15433,15434,15435,15436,15437,15438,15439,15440,15441,15442,15443,15444,15445,15446,15447,15448,15449,15450,15451,15452,15453,15454,15455,15456,15457,15458,15459,15460,15461,15462,15463,15464,15465,15466,15467,15468,15469,15470,15471,15472,15473,15474,15475,15476,15477,15478,15479,15480,15481,15482,15483,15484,15485,15486,15487,15488,15489,15490,15491,15492,15493,15494,15495,15496,15497,15498,15499,15500,15501,15502,15503,15504,15505,15506,15507,15508,15509,15510,15511,15512,15513,15514,15515,15516,15517,15518,15519,15520,15521,15522,15523,15524,15525,15526,15527,15528,15529,15530,15531,15532,15533,15534,15535,15536,15537,15538,15539,15540,15541,15542,15543,15544,15545,15546,15547,15548,15549,15550,15551,15552,15553,15554,15555,15556,15557,15558,15559,15560,15561,15562,15563,15564,15565,15566,15567,15568,15569,15570,15571,15572,15573,15574,15575,15576,15577,15578,15579,15580,15581,15582,15583,15584,15585,15586,15587,15588,15589,15590,15591,15592,15593,15594,15595,15596,15597,15598,15599,15600,15601,15602,15603,15604,15605,15606,15607,15608,15609,15610,15611,15612,15613,15614,15615,15616,15617,15618,15619,15620,15621,15622,15623,15624,15625,15626,15627,15628,15629,15630,15631,15632,15633,15634,15635,15636,15637,15638,15639,15640,15641,15642,15643,15644,15645,15646,15647,15648,15649,15650,15651,15652,15653,15654,15655,15656,15657,15658,15659,15660,15661,15662,15663,15664,15665,15666,15667,15668,15669,15670,15671,15672,15673,15674,15675,15676,15677,15678,15679,15680,15681,15682,15683,15684,15685,15686,15687,15688,15689,15690,15691,15692,15693,15694,15695,15696,15697,15698,15699,15700,15701,15702,15703,15704,15705,15706,15707,15708,15709,15710,15711,15712,15713,15714,15715,15716,15717,15718,15719,15720,15721,15722,15723,15724,15725,15726,15727,15728,15729,15730,15731,15732,15733,15734,15735,15736,15737,15738,15739,15740,15741,15742,15743,15744,15745,15746,15747,15748,15749,15750,15751,15752,15753,15754,15755,15756,15757,15758,15759,15760,15761,15762,15763,15764,15765,15766,15767,15768,15769,15770,15771,15772,15773,15774,15775,15776,15777,15778,15779,15780,15781,15782,15783,15784,15785,15786,15787,15788,15789,15790,15791,15792,15793,15794,15795,15796,15797,15798,15799,15800,15801,15802,15803,15804,15805,15806,15807,15808,15809,15810,15811,15812,15813,15814,15815,15816,15817,15818,15819,15820,15821,15822,15823,15824,15825,15826,15827,15828,15829,15830,15831,15832,15833,15834,15835,15836,15837,15838,15839,15840,15841,15842,15843,15844,15845,15846,15847,15848,15849,15850,15851,15852,15853,15854,15855,15856,15857,15858,15859,15860,15861,15862,15863,15864,15865,15866,15867,15868,15869,15870,15871,15872,15873, unused=0)+deltaUZero32(unused) on(15873,15874,15875,15876,15877,15878,15879,15880,15881,15882,15883,15884,15885,15886,15887,15888,15889,15890,15891,15892,15893,15894,15895,15896,15897,15898,15899,15900,15901,15902,15903,15904,15905,15906,15907,15908,15909,15910,15911,15912,15913,15914,15915,15916,15917,15918,15919,15920,15921,15922,15923,15924,15925,15926,15927,15928,15929,15930,15931,15932,15933,15934,15935,15936,15937,15938,15939,15940,15941,15942,15943,15944,15945,15946,15947,15948,15949,15950,15951,15952,15953,15954,15955,15956,15957,15958,15959,15960,15961,15962,15963,15964,15965,15966,15967,15968,15969,15970,15971,15972,15973,15974,15975,15976,15977,15978,15979,15980,15981,15982,15983,15984,15985,15986,15987,15988,15989,15990,15991,15992,15993,15994,15995,15996,15997,15998,15999,16000,16001,16002,16003,16004,16005,16006,16007,16008,16009,16010,16011,16012,16013,16014,16015,16016,16017,16018,16019,16020,16021,16022,16023,16024,16025,16026,16027,16028,16029,16030,16031,16032,16033,16034,16035,16036,16037,16038,16039,16040,16041,16042,16043,16044,16045,16046,16047,16048,16049,16050,16051,16052,16053,16054,16055,16056,16057,16058,16059,16060,16061,16062,16063,16064,16065,16066,16067,16068,16069,16070,16071,16072,16073,16074,16075,16076,16077,16078,16079,16080,16081,16082,16083,16084,16085,16086,16087,16088,16089,16090,16091,16092,16093,16094,16095,16096,16097,16098,16099,16100,16101,16102,16103,16104,16105,16106,16107,16108,16109,16110,16111,16112,16113,16114,16115,16116,16117,16118,16119,16120,16121,16122,16123,16124,16125,16126,16127,16128,16129,16130,16131,16132,16133,16134,16135,16136,16137,16138,16139,16140,16141,16142,16143,16144,16145,16146,16147,16148,16149,16150,16151,16152,16153,16154,16155,16156,16157,16158,16159,16160,16161,16162,16163,16164,16165,16166,16167,16168,16169,16170,16171,16172,16173,16174,16175,16176,16177,16178,16179,16180,16181,16182,16183,16184,16185,16186,16187,16188,16189,16190,16191,16192,16193,16194,16195,16196,16197,16198,16199,16200,16201,16202,16203,16204,16205,16206,16207,16208,16209,16210,16211,16212,16213,16214,16215,16216,16217,16218,16219,16220,16221,16222,16223,16224,16225,16226,16227,16228,16229,16230,16231,16232,16233,16234,16235,16236,16237,16238,16239,16240,16241,16242,16243,16244,16245,16246,16247,16248,16249,16250,16251,16252,16253,16254,16255,16256,16257,16258,16259,16260,16261,16262,16263,16264,16265,16266,16267,16268,16269,16270,16271,16272,16273,16274,16275,16276,16277,16278,16279,16280,16281,16282,16283,16284,16285,16286,16287,16288,16289,16290,16291,16292,16293,16294,16295,16296,16297,16298,16299,16300,16301,16302,16303,16304,16305,16306,16307,16308,16309,16310,16311,16312,16313,16314,16315,16316,16317,16318,16319,16320,16321,16322,16323,16324,16325,16326,16327,16328,16329,16330,16331,16332,16333,16334,16335,16336,16337,16338,16339,16340,16341,16342,16343,16344,16345,16346,16347,16348,16349,16350,16351,16352,16353,16354,16355,16356,16357,16358,16359,16360,16361,16362,16363,16364,16365,16366,16367,16368,16369,16370,16371,16372,16373,16374,16375,16376,16377,16378,16379,16380,16381,16382,16383,16384,16385, unused=0)+deltaUZero33(unused) on(16385,16386,16387,16388,16389,16390, unused=0); 
   56 @     
   57 @     l = rhs(0, Vh, tgv = -1); 
   58 @ 
   59 @     /* for computation of capacitance needed */
   60 @     varf lBndVarf(unused, v) = H1(wh, v, Th)       int3d( Th, qfV=DQFVqfV2)(dx(wh)*dx( v) + dy(wh)*dy( v) + dz(wh)*dz( v)); 
   61 @     
   62 @     L(INDC(theta)          Vh.ndof * theta : (Vh.ndof * (theta+1) - 1)) = lBndVarf(0, Vh, tgv = -1);
   63 @ };  // fill boundary vectors
  105 :     // for [ i, elem : test ]{ if ( elem != 0.0 ){ INFO("BINGO"); break; } } // set boundary vector to 1 on boundary
  106 :     solveU(theta) 
   66 @ 
   67 @          
   68 @       
   69 @  
   66 @ {
   67 @     real[int] temp = A^-1 * l;
   68 @     U(INDC(theta)          Vh.ndof * theta : (Vh.ndof * (theta+1) - 1)) = temp;
   69 @ }; // solve for U[theta]
  107 : }
  108 : 
  109 : // -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
  110 : // (3) COMUTING CAPACITANCE
  111 : // -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
  112 : 
  113 : ofstream streamLogCap( outputDir + "/cap_"+outputName+".log" ); 
  114 : streamLogCap.precision(16);
  115 : for( int theta1 = 0; theta1 < cardTheta; ++theta1 ){ 
  116 :     real[int] Cap( cardTheta - theta1 );
  117 :     for( int theta2 = theta1; theta2 < cardTheta; ++theta2 ){ 
  118 :         INFO( "Computing capacitance between " + theta1 + " and " + theta2 )             if(mpirank == 0){ cout << "INFO: "; cout <<  "Computing capacitance between " + theta1 + " and " + theta2 << endl; };
  119 :         // here evaluate the capacitance between theta1 and theta2
  120 :         // and write it to Cap[theta1]
  121 :         writeCap( theta1, theta2 )
   73 @ 
   74 @          
   75 @     
   76 @              
   77 @ 
   78 @                   
   79 @ 
   73 @ {
   74 @     real[int] temp = A * U(INDC( theta2)          Vh.ndof *  theta2 : (Vh.ndof * ( theta2+1) - 1));
   75 @     
   76 @     real U1U2 = A(U(INDC( theta1)          Vh.ndof *  theta1 : (Vh.ndof * ( theta1+1) - 1)), temp); real W1L2 = A(W(INDC( theta1)          Vh.ndof *  theta1 : (Vh.ndof * ( theta1+1) - 1)), L(INDC( theta2)          Vh.ndof *  theta2 : (Vh.ndof * ( theta2+1) - 1)));
   77 @ 
   78 @     Cap[  theta2 -  theta1 ] = 1.0 / (4 * pi) * (W1L2 - U1U2);
   79 @ };
  122 :     }
  123 :     if( mpirank == 0 ) writeOutArray( streamLogCap, Cap );
  124 : }
  125 :  sizestack + 1024 =26848  ( 25824 )

 Error opening file test
  current line = 16 mpirank 0 / 1
 call readConfig  at  line 62
Exec error : Error opening file
   -- number :1
Exec error : Error opening file
   -- number :1
 err code 8 ,  mpirank 0
WARNING! There are options you set that were not used!
WARNING! could be spelling mistake, etc!
There are 4 unused database options. They are:
Option left: name:-c value: test source: command line
Option left: name:-m value: data/mesh/test.mesh source: command line
Option left: name:-n value: test source: command line
Option left: name:-o value: data/output source: command line
