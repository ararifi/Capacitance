// -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
// (2.) MESH CREATION
// -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-

// load the lebedev meshSes
macro initMeteorMesh

/* ARRAY THAT ARE GLOVALLY DEFINED */
/*
real[int] CHOICExARes(R.n); real[int] CHOICExh2STet(R.n);
*/

/* get the List of possible meshes */
real[int] List = LISTxARes();
/* the choice of the surface meshes */
int[int] ChoiceThS(R.n);
/* get the unique surface meshes in order to minimize IOs */
int[int] ChoiceThSUnique;

/* filling arrays */    
{   

    if (AResVec.n == 0){
        AResVec.resize(R.n);
        for [ind, elem : AResVec] {elem = ARes;}
    }else if (AResVec.n != numMeteor){
        real[int] AResVecOld = AResVec;
        AResVec.resize(numMeteor);
        int cnt = 0;
        for [ind, elem : AResVecOld]{
            if(CommitStatic[ind] == 1){
                AResVec[cnt] = elem; cnt += 1;
            }
        }
    }

    for [ind, elem : ChoiceThS] {
        real aRes = (1.0 * AResVec[ind]);
        if (DOsfc == 0){
            
            AResVec[ind] = aRes;

        }else if(DOsfc == 1){
            
            AResVec[ind] = aRes / R[ind];
            
        }else if(DOsfc == 2){
            
            AResVec[ind] = aRes / (R[ind]^2);
            
        }else if(DOsfc == 3){
        
            real RAtInd = R[ind];
            
            AResVec[ind] = aRes / RAtInd;            
        
            if(RAtInd < RMinARes){ AResVec[ind] = aRes / RMinARes;}
                    
        }else if(DOsfc == 4){

            /* --- SCALE BY RADIUS --- */

            real RAtInd = R[ind];            

            AResVec[ind] = aRes / RAtInd;            
            
            if(RAtInd < RMinARes){ AResVec[ind] = aRes / RMinARes;}
            
            /* --- SCALE BY DISTANCE FROM MIDPOINT --- */

            real RMax = R.max;

            real RIndMax = RMax + RAtInd;

            real[int] PosAtInd = Pos(3*ind:3*ind+2);
            real distIndMax = sqrt( PosAtInd '* PosAtInd );

            real AResScaled = DistFactorARes * (1 + (distIndMax-RIndMax)/(boxSize/2-RIndMax)) * aRes;
        
        }else if(DOsfc == 5){

            /* --- SCALE BY DIST FROM MIDPOINT --- */

            int numSteps = AResByDist.n; numSteps = numSteps / 2;

            if ( ind == mainMeteorInd ){
                AResVec[ ind ] = AResByDist[0];
            }else{
                for( int step = 1; step < numSteps; step++ ){

                    real aResByDist = AResByDist[2*step];

                    real[int] PosAtInd = Pos(3*ind:3*ind+2);
                    
                    real distIndMax = sqrt( PosAtInd '* PosAtInd );

                    if ( distIndMax < AResByDist[ 2*step + 1 ] ){
                        
                        AResVec[ ind ] = aResByDist;
                        break;

                    }else if ( step == numSteps-1 ){

                        aResByDist = AResByDist[2*(numSteps-1)];                            
                        AResVec[ ind ] = aResByDist;

                    }
                    
                }
            }

        }else{cout << "DOsfc not set" << endl; exit(1);}
        
        aRes = (1.0 * AResVec[ind]);

        elem = CHOOSExARes(List, aRes); 

        CHOICExARes[ind] = List[elem];
    }


    /* choose resolution for the meshes during tetgen procedure */

    if(DOh2STet == 0){
        CHOICExh2STet = 0;
    }else if(DOh2STet == 1){
        int choice = CHOOSExARes(List, ARes); 
        CHOICExh2STet = 1.0 * FINEFACTOR * List[choice];
    }else if(DOh2STet == 2){
        for [ind, elem : CHOICExh2STet]{
            real AResRESCALE = (1.0 * ARes) * R[ind]^2;
            elem = FINEFACTOR * AResRESCALE ;
        }
    }else if(DOh2STet == 3){
        for [ind, elem : CHOICExh2STet]{
            real AResRESCALE;
            AResRESCALE = CHOICExARes[ind] * R[ind]^2;
            elem = FINEFACTOR * AResRESCALE ;
        }
    }else{cout << "DOh2STet not set" << endl; exit(1);}



    /* get the unique values of the lebedev meshes */
    {
        int[int] ChoiceThSSorted = ChoiceThS; ChoiceThSSorted.sort;
        int oldElem=-1;
        for [i, elem : ChoiceThSSorted]{
            if(oldElem != elem){
                ChoiceThSUnique = [ChoiceThSUnique, elem]; oldElem = elem;
            }
        }
    }
    cout << "......................................................." << endl;
    cout << "--- possibleSpheres ---" << "\n" << List << endl;
    cout << "--- ChoiceThS ---" << "\n" << ChoiceThS << endl;
    cout << "--- ChoiceThSUnique ---" << "\n" << ChoiceThSUnique << endl;
    cout << "......................................................." << endl;
}

meshS[int] ArrThS(ChoiceThSUnique.n);
/* filling mesh arrays */
{
    /* load the corresponding meshes */
    for (int i = 0; i < ChoiceThSUnique.n; i++){
        ArrThS[i] = LOADxind(ChoiceThSUnique[i]);
    }
}
//


// transform the loaded meshSes and clue them into the 
// global surface meshS with MPI
macro setMeteorMeshMPItoRank0
/* one has to consider if to less particles are in the system */
if(MPIRank < numMeteor){   
    
    int chunckSize = MPICommSize > numMeteor ? numMeteor : MPICommSize;
    
    meshS ThSmeteor, MAINThSmeteor;

    for (int ind = MPIRank; ind < numMeteor; ind += chunckSize){
        /* create meshS for given meteor @ ind */
        meshS ThSmeteorONE;
        /* eval label */
        int L = ind + 7;
        /* set the axis of the meteor */
        real[int] Axis = [R[ind], R[ind], R[ind]];
        /* set the position of the meteor */
        real[int] Coord = [Pos[3*ind], Pos[3*ind + 1], Pos[3*ind + 2]];
        
        /* find the right mesh index */
        for [indThS, elem : ChoiceThSUnique]{
            if(elem == ChoiceThS[ind]){
                ThSmeteorONE = ArrThS[indThS];
                formMeshS(ThSmeteorONE, Axis, L, 1);
                shiftMeshS(ThSmeteorONE, Coord, L, 1);
                cout << "INFO: meteorIND " << ind << " set from rank: " << MPIRank << " with resIND " << indThS << endl;
            }
        }
        ThSmeteor = ThSmeteor + ThSmeteorONE;
    }


    /* send all meshes to the first process  */      
    mpiRequest sendRq, recvRq;
    if(MPIRank != 0){
        Isend(processor(0, Comm, sendRq), ThSmeteor);
    }else{
        MAINThSmeteor = ThSmeteor;        
        for (int i = 1; i < numMeteor; i++){
            Irecv(processor(i, Comm, recvRq), ThSmeteor);
            cout << "ThS recieved from "  << i << endl;
            mpiWait(recvRq);
            MAINThSmeteor = MAINThSmeteor + ThSmeteor;
        }
    }
    mpiWait(sendRq);
    cout << "MPIrank "  << MPIRank << " send ThS" << endl;
    ThS = ThS + MAINThSmeteor;
}
//


// transform the loaded meshSes and clue them into the 
// global surface meshS with MPI
macro setMeteorMeshMPICross
/* one has to consider if to less particles are in the system */
{

    meshS ThSmeteor, MAINThSmeteor;
    if(MPIRank < numMeteor){   

        int chunckSize = MPICommSize > numMeteor ? numMeteor : MPICommSize;

        for (int ind = MPIRank; ind < numMeteor; ind += chunckSize){
            /* create meshS for given meteor @ ind */
            meshS ThSmeteorONE;
            /* eval label */
            int L = ind + 7;
            /* set the axis of the meteor */
            real[int] Axis = [R[ind], R[ind], R[ind]];
            /* set the position of the meteor */
            real[int] Coord = [Pos[3*ind], Pos[3*ind + 1], Pos[3*ind + 2]];

            /* find the right mesh index */
            for [indThS, elem : ChoiceThSUnique]{
                if(elem == ChoiceThS[ind]){
                    ThSmeteorONE = ArrThS[indThS];
                    formMeshS(ThSmeteorONE, Axis, L, 1);
                    shiftMeshS(ThSmeteorONE, Coord, L, 1);
                    cout << "Meteor " << ind << " is set from rank: " << MPIRank << endl;
                }
            }
            if(ind%20 == 0){
                MAINThSmeteor = MAINThSmeteor + ThSmeteor;
                ThSmeteor = ThSmeteorONE;
            }else{
                ThSmeteor = ThSmeteor + ThSmeteorONE;
            }
        }
    }
    
    MAINThSmeteor = MAINThSmeteor + ThSmeteor;  
    
    mpiRequest recvRq, sendRq;
    for( int phase=1; phase < MPICommSize; phase++ ){
        cout << "PHASE "  << phase - 1 << " OF " << MPICommSize -  1 << endl;

        /* SEND */
        int MPIRankRecver = (MPIRank + phase)%MPICommSize;
        cout << "HELLO FROM MPIRANK " << MPIRank << endl;
        if(MPIRank < numMeteor){
            Isend(processor(MPIRankRecver, Comm, sendRq), ThSmeteor);
            cout << "SENDER: " << MPIRank << ", RECV: " << MPIRankRecver << endl;
        }
        
        /* RECV */
        int MPIRankSender = (MPIRank - phase + MPICommSize)%MPICommSize;
        cout << "MPIRank " << MPIRankSender << " IS SENDER OF " << MPIRank << endl;
        if(MPIRankSender < numMeteor){
            Irecv(processor(MPIRankSender, Comm, recvRq), ThSmeteor);
            cout << "RECV: " << MPIRank << ", SENDER: " << MPIRankSender << endl;
            mpiWait(recvRq); 
        }

    /* MERGE  */
    MAINThSmeteor = MAINThSmeteor + ThSmeteor;
    }
    

    ThS = ThS + MAINThSmeteor;
    mpiBarrier(Comm);
}
//


macro setMeteorMeshMPI0
/* one has to consider if to less particles are in the system */
{
    meshS ThSmeteor, MAINThSmeteor;
    mpiRequest recvRq, sendRq;
    if (MPIRank == 0){
        for (int ind = MPIRank; ind < numMeteor; ind++){
            /* create meshS for given meteor @ ind */
            meshS ThSmeteorONE;
            /* eval label */
            int L = ind + 7;
            /* set the axis of the meteor */
            real[int] Axis = [R[ind], R[ind], R[ind]];
            /* set the position of the meteor */
            real[int] Coord = [Pos[3*ind], Pos[3*ind + 1], Pos[3*ind + 2]];

            /* find the right mesh index */
            for [indThS, elem : ChoiceThSUnique]{
                if(elem == ChoiceThS[ind]){
                    ThSmeteorONE = ArrThS[indThS];
                    formMeshS(ThSmeteorONE, Axis, L, 1);
                    shiftMeshS(ThSmeteorONE, Coord, L, 1);
                    cout << "Meteor " << ind << " is set from rank: " << MPIRank << endl;
                }
            }

            if(ind%20 == 0){
                MAINThSmeteor = MAINThSmeteor + ThSmeteor;
                ThSmeteor = ThSmeteorONE;
            }else{
                ThSmeteor = ThSmeteor + ThSmeteorONE;
            }

        }
        MAINThSmeteor = MAINThSmeteor + ThSmeteor;  
        for ( int rank = 1; rank < MPICommSize; rank++ ){
            Isend(processor(rank, Comm, sendRq), MAINThSmeteor);
        }
    }else{
        Irecv(processor(0, Comm, recvRq), MAINThSmeteor);
        mpiWait(recvRq);
        cout << "MPIrank " << MPIRank << " recv ThS" << endl;
    }
    
    ThS = ThS + MAINThSmeteor;
    mpiBarrier(Comm);
}
//


macro setMeteorMesh
  
/* one has to consider if to less particles are in the system */
{   
    meshS ThSmeteor, ThSmeteorONE, MAINThSmeteor;
    for (int ind = MPIRank; ind < numMeteor; ind++){
        /* eval label */
        int L = ind + 7;
        /* set the axis of the meteor */
        real[int] Axis = [R[ind], R[ind], R[ind]];
        /* set the position of the meteor */
        real[int] Coord = [Pos[3*ind], Pos[3*ind + 1], Pos[3*ind + 2]];

        /* find the right mesh index */
        for [indThS, elem : ChoiceThSUnique]{
            if(elem == ChoiceThS[ind]){
                ThSmeteorONE = ArrThS[indThS];
                formMeshS(ThSmeteorONE, Axis, L, 1);
                shiftMeshS(ThSmeteorONE, Coord, L, 1);
                cout << "INFO: meteorIND " << ind << " set from rank: " << MPIRank << " with resIND " << indThS << endl;
            }
        }

        if(ind%20 == 0){ MAINThSmeteor = MAINThSmeteor + ThSmeteor; ThSmeteor = ThSmeteorONE;
        }else{ ThSmeteor = ThSmeteor + ThSmeteorONE; }

    }
    MAINThSmeteor = MAINThSmeteor + ThSmeteor; ThS = ThS + MAINThSmeteor;
    /*
    for (int ind = 0; ind < numMeteor; ind++){
        % create meshS for given meteor @ ind
        meshS ThSmeteor;
        % eval label
        int L = ind + 7;
        % set the axis of the meteor
        real[int] Axis = [R[ind], R[ind], R[ind]];
        % set the position of the meteor
        real[int] Coord = [Pos[3*ind], Pos[3*ind + 1], Pos[3*ind + 2]];
        
        % find the right mesh index
        for [indThS, elem : ChoiceThSUnique]{
            if(elem == ChoiceThS[ind]){
                ThSmeteor = ArrThS[indThS];
                formMeshS(ThSmeteor, Axis, L, 1);
                shiftMeshS(ThSmeteor, Coord, L, 1);
                cout << "Meteor " << ind << " is set.";
            }
        }
        ThS = ThS + ThSmeteor;
    }
    */
}
//


macro initThS

meshS ThS;

{/*#########################################*/
if(BOX == 0){
    /* ----- BOX ----- */

    /* number of elements */
    int[int] dimBoxNumElem = [boxNumElem, boxNumElem, boxNumElem];

    /* box (size-)dimension */
    real [int,int] B = [[-boxSize/2., boxSize/2.], 
                        [-boxSize/2., boxSize/2.], 
                        [-boxSize/2., boxSize/2.]];

    /* labels */
    int [int,int] L = [[1, 2], [3, 4], [5, 6]];

    ThS = SurfaceHex(dimBoxNumElem, B, L, 1);
}else if(BOX > 0){
    /* "+/../../meshSLeb/+"*/
    
    /*meshS ThSEncl = readmeshS(meshSPATH+"/../../meshSLeb/"+string(BOX)+".mesh");*/
    real[int] ListBnd = LISTxARes();
    int indBnd = CHOOSExARes(ListBnd, BOX);
    meshS ThSEncl = readmeshS(meshSPATH+string(indBnd)+".mesh");
    real[int] AxisEncl = [boxSize/2, boxSize/2, boxSize/2];
    formMeshS(ThSEncl, AxisEncl, 1, 1);
    ThS = ThSEncl;
    /*ThS = Sphere(boxSize/2,boxSize/20,);*/
}else{
    cout << "BOX not set" << endl;
}

/*#########################################*/}

/* ----- PARTICLES ----- */
initMeteorMesh

{/*#########################################*/
setMeteorMesh
/*#########################################*/}
//

macro initTh

mesh Th;

{
    /* ----- 3D TETGEN MESH ----- */

    real[int] domain = [boxSize/2 * 0.99, 0, 0, 0, maxVol];
    
    /* constraints for faces */
    int nbFacecl = 0;
    real[int] Facecl(1);
    if( BOX == 0 ){
        nbFacecl = numMeteor;
        Facecl.resize(2*numMeteor);
        for [ind, elem : CHOICExh2STet]{
            Facecl[2*ind] = 7 + ind;
            Facecl[2*ind + 1] = elem; 
        }
    }else{
        nbFacecl = numMeteor + 1;
        Facecl.resize(2*(numMeteor+1));
        for [ind, elem : CHOICExh2STet]{
            Facecl[2*ind] = 7 + ind;
            Facecl[2*ind + 1] = elem; 
        }
        Facecl[2*numMeteor] = 1;
        Facecl[2*numMeteor + 1] = 1.0 * FINEFACTOR * ( boxSize/2 )^2 * BOX;
    }

    string mySwitch = "pq"+string(ratioRadiusEdge)+"/"+string(minDihedralAngle)+"aA" + addSwitch + "CV";
    /* run tetgen */
    if(DOh2STet == 0){
        Th = tetg(
            ThS, 
            switch=mySwitch, 
            nbofregions = 1, regionlist = domain, 
            nbofholes = numMeteor, holelist = Pos);
    }else{
        Th = tetg(
            ThS, 
            switch=mySwitch, 
            nboffacetcl = nbFacecl, facetcl = Facecl,
            nbofregions = 1, regionlist = domain, 
            nbofholes = numMeteor, holelist = Pos);
    }
}
//


/* ---------------------- OLD STUFF ----------------------
    
// load the lebedev meshSes
macro initMeteorMeshOLD

# get the List of possible meshes %
real[int] List = listMeshS();
int[int] ChoiceThSUnique;
int[int] ChoiceThS(R.n);



# filling arrays %    
{
    # choose resolution for the meshses %
    if(adaptiveSfc){
        for [ind, elem : ChoiceThS]{
            real hSscaled = (1.0 * hS) / R[ind];
            elem = chooseMeshS(List, hSscaled); 
        }
    }else{
        int choice = chooseMeshS(List, hS); 
        ChoiceThS = choice;
    }

    # get the unique values of the lebedev meshes %
    {
        int[int] ChoiceThSSorted = ChoiceThS; ChoiceThSSorted.sort;
        int oldElem=0;
        for [i, elem : ChoiceThSSorted]{
            if(oldElem != elem){
                ChoiceThSUnique = [ChoiceThSUnique, elem]; oldElem = elem;
            }
        }
    }
    cout << "......................................................." << endl;
    cout << "--- possibleSpheres ---" << "\n" << List << endl;
    cout << "--- ChoiceThS ---" << "\n" << ChoiceThS << endl;
    cout << "......................................................." << endl;
}

meshS[int] ArrThS(ChoiceThSUnique.n);
# filling mesh arrays %
{
    # load the corresponding meshes %
    for (int i = 0; i < ChoiceThSUnique.n; i++){
        ArrThS[i] = LOADxind(ChoiceThSUnique[i]);
    }
}
//

// transform the loaded meshSes and clue them into the 
// global surface meshS with MPI
macro setMeteorMeshMPICrossOLD
# one has to consider if to less particles are in the system %
{

    meshS ThSmeteor, MAINThSmeteor;
    if(MPIRank < numMeteor){   

        int chunckSize = MPICommSize > numMeteor ? numMeteor : MPICommSize;

        for (int ind = MPIRank; ind < numMeteor; ind += chunckSize){
            # create meshS for given meteor @ ind %
            meshS ThSmeteorONE;
            # eval label %
            int L = ind + 7;
            # set the axis of the meteor %
            real[int] Axis = [R[ind], R[ind], R[ind]];
            # set the position of the meteor %
            real[int] Coord = [Pos[3*ind], Pos[3*ind + 1], Pos[3*ind + 2]];

            # find the right mesh index %
            for [indThS, elem : ChoiceThSUnique]{
                if(elem == ChoiceThS[ind]){
                    ThSmeteorONE = ArrThS[indThS];
                    formMeshS(ThSmeteorONE, Axis, L, 1);
                    shiftMeshS(ThSmeteorONE, Coord, L, 1);
                    cout << "Meteor " << ind << " is set from rank: " << MPIRank << endl;
                }
            }
            ThSmeteor = ThSmeteor + ThSmeteorONE;
        }
    }

    MAINThSmeteor = ThSmeteor;  
    
    mpiRequest recvRq, sendRq;
    for( int phase=1; phase < MPICommSize; phase++ ){
        cout << "PHASE "  << phase - 1 << " OF " << MPICommSize -  1 << endl;

        # SEND %
        int MPIRankRecver = (MPIRank + phase)%MPICommSize;
        cout << "HELLO FROM MPIRANK " << MPIRank << endl;
        if(MPIRank < numMeteor){
            Isend(processor(MPIRankRecver, Comm, sendRq), ThSmeteor);
            cout << "SENDER: " << MPIRank << ", RECV: " << MPIRankRecver << endl;
        }
        
        # RECV %
        int MPIRankSender = (MPIRank - phase + MPICommSize)%MPICommSize;
        cout << "MPIRank " << MPIRankSender << " IS SENDER OF " << MPIRank << endl;
        if(MPIRankSender < numMeteor){
            Irecv(processor(MPIRankSender, Comm, recvRq), ThSmeteor);
            cout << "RECV: " << MPIRank << ", SENDER: " << MPIRankSender << endl;
            mpiWait(recvRq); 
        }

    # MERGE  %
    MAINThSmeteor = MAINThSmeteor + ThSmeteor;
    }
    

    ThS = ThS + MAINThSmeteor;
    mpiBarrier(Comm);
}
//

*/